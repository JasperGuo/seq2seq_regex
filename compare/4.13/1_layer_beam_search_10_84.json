{
    "lines with a number or a lower-case letter at least once in it": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": "(([<NUM>])|([<LOW>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": "(([<LOW>])|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": "(([<NUM>])|([<LOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": "(([<NUM>])+)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": "(([<NUM>])|(([<LOW>])+))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": "((([<NUM>])|([<LOW>]))+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": "((([<NUM>])+)|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": ".*(([<NUM>])|([<LOW>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": "(.*([<NUM>])|([<LOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>]))+",
                "prediction": "(([<NUM>])|(.*[<LOW>].*))+"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> , a capital letter , and a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": ".*(<M0>).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": ".*(<M0>)|([<CAP>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": "(<M0>).*([<CAP>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": ".*([<CAP>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": "(.*<M0>.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": ".*(<M0>)|([<CAP>])|(.).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": ".*(<M0>).*([<CAP>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": "(<M0>).*(([<CAP>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": "\\b(<M0>)|([<CAP>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": "(<M0>).*(([<CAP>])|(.)|([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words which contain a letter or a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<VOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": "\\b(([<LET>])|([<VOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": "\\b.*([<LET>])|([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|([<VOW>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|([<LOW>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": ".*\\b([<LET>])|([<LOW>])|([<VOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<VOW>])\\b",
                "prediction": "\\b(.*[<LET>].*)|([<VOW>])\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines with a character before capital or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": "((.)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": "(..*[<CAP>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": "(.)+(([<CAP>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": "(..*[<CAP>].*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": "((.)+([<CAP>]).*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": ".*(.)+(([<CAP>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": "((.)+([<CAP>]).*)|(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": "(..*[<CAP>].*).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": "((.)+).*(([<CAP>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])|([<LOW>])).*",
                "prediction": "(..*[<CAP>].*)|((.*)([<LOW>]))"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a capital followed by vowel before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": "(.*[<CAP>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": ".*[<CAP>].*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": "([<CAP>].*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": "([<CAP>]).*([<VOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": "([<CAP>].*[<VOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": "(.*[<CAP>].*[<VOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": ".*([<CAP>].*[<NUM>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": "(([<CAP>].*[<NUM>].*)+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": "(([<CAP>]).*([<VOW>]).*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<NUM>]).*",
                "prediction": "(([<CAP>].*[<VOW>].*).*([<NUM>]).*)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines that have words containing a small letter preceding the <M0> string": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": "\\b<M0>.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": "\\b[<LOW>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": "\\b.*[<LOW>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": "\\b([<LOW>].*<M0>.*)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": "(\\b[<LOW>].*<M0>.*\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": "\\b([<LOW>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": "\\b([<LOW>].*<M0>.*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": ".*\\b[<LOW>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(<M0>).*\\b",
                "prediction": "\\b(.*[<LOW>].*).*(<M0>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines with either at least 1 <M0> , number , or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "((<M0>)|([<NUM>])|(<M1>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "((<M0>)|([<NUM>])|(<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "\\b(<M0>)|([<NUM>])|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "((<M0>)+)|(([<NUM>])|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": ".*(<M0>)|([<NUM>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": ".*([<NUM>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "(.*<M0>.*)|(([<NUM>])|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "(.*(<M0>)|([<NUM>])|(<M1>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "(.*<M0>.*)|(([<NUM>])|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words that contain string <M0> or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": "(\\b.*<M0>.*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": "\\b(<M0>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": "\\b([<LOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": "\\b((<M0>)|([<LOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": "(\\b(<M0>)|([<LOW>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": "\\b(.*<M0>.*)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": "\\b.*(<M0>)|([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": ".*\\b(<M0>)|([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|([<LOW>])\\b",
                "prediction": ".*\\b(<M0>)|([<LOW>])\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines containging a capital letter and a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": ".*[<CAP>].*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": "[<CAP>].*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": "([<CAP>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": "([<CAP>].*[<LET>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": ".*([<CAP>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": "([<CAP>]).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": "(([<CAP>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": "(.*[<CAP>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": "([<CAP>]).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*[<LET>].*)",
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines starting in a vowel or character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "(([<VOW>])|(.))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "((.)|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "((([<VOW>])|(.))(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "((([<VOW>])|(.))+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "((([<VOW>])+)|(.))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "((([<VOW>])(.*))|(.))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "((([<VOW>])|(.))*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "(([<VOW>])(.*))|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "((([<VOW>])|(.))(.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>])|(.))+)(.*)",
                "prediction": "(([<VOW>])(.*))|(.*..*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines with a letter before a capital letter or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": "([<LET>].*[<CAP>].*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": "(<M0>).*(([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": "([<LET>]).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": ".*([<LET>]).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": "(([<LET>])|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": "(([<LET>]).*([<CAP>]).*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": "(([<LET>])+).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": "(.*[<LET>].*).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": "(([<CAP>])+).*(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)|((<M0>)+)",
                "prediction": "(([<LET>]).*([<CAP>]).*)|(.*<M0>.*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "items with words containing a vowel or character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": "\\b([<VOW>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": "\\b(.)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": "\\b(([<VOW>])|(.))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": "\\b(([<VOW>])|(.))*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": "\\b(.*[<VOW>].*)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": "(\\b([<VOW>])|(.)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": "\\b(.*..*)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": ".*\\b([<VOW>])|(.)\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])\\b",
                "prediction": "\\b(.)|([<VOW>])|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with a number before a lower-case letter or the string <M0> in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": "(([<NUM>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": ".*([<NUM>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": "([<NUM>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": "(([<NUM>])+).*([<LOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": "(([<NUM>])+).*(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": "(([<NUM>]).*([<LOW>]).*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": "(.*[<NUM>].*).*(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": "([<NUM>]).*(([<LOW>])|(<M0>)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": "([<NUM>]).*(([<LOW>])|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])|(<M0>)).*",
                "prediction": "([<NUM>]).*(([<LOW>])|(<M0>)|([<CAP>])).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with at least 2 numbers or vowels": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": "(([<NUM>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": "([<NUM>])|(([<NUM>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": "(([<VOW>])|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": "([<NUM>])|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": "([<VOW>])|(([<NUM>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": ".*([<NUM>])|([<VOW>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": "(.*[<NUM>].*)|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": "\\b([<NUM>])|([<VOW>]){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": "\\b(([<NUM>])|([<VOW>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){2,}",
                "prediction": ".*(([<NUM>])|([<VOW>])){2,}.*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "items with <M0> , a vowel , or a character .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": ".*(<M0>)|(<M1>)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": "(.*<M0>.*)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": ".*(<M0>)|([<VOW>])|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": ".*([<VOW>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": ".*([<NUM>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": ".*(<M0>)|(.)|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": ".*([<LET>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": ".*(.)|(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": "(.*)|(<M0>)|([<VOW>])|(.)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<VOW>]).*",
                "prediction": "\\b(<M0>)|([<VOW>])|(.)\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines with words and the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": ".*\\b<M0>\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": ".*\\b(<M0>)+\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": ".*\\b(<M0>)*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": "\\b.*(<M0>)+.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": "(\\b.*<M0>.*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": "(\\b.*<M0>.*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": ".*\\b.*<M0>.*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing either string <M0> , number , or string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": ".*(.*<M0>.*)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": ".*(.)|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": ".*(<M0>)|([<NUM>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": ".*(<M0>)|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": ".*([<NUM>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": ".*(<M0>)|(<M1>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": ".*(.)|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": ".*(<M1>)|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": "\\b(<M0>)|([<NUM>])|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|(<M1>).*",
                "prediction": ".*((<M0>)|([<NUM>])|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with a number , zero times or more": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "((([<NUM>])*)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "(([<NUM>])*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "(([<NUM>])(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "(\\b([<NUM>])*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "(\\b([<NUM>])(.*)\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "((([<NUM>])(.*))*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "((.*[<NUM>].*)*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "((([<NUM>])*)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "((([<NUM>])*)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))*",
                "prediction": "(([<NUM>].*[<NUM>].*)*)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with lower-case letter before number or zero or more of <U> letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>]).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>].*[<NUM>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "(([<LOW>])+).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>]).*(([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>]).*(([<NUM>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>]).*(([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>]).*((([<NUM>])*)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "(([<LOW>]).*([<NUM>]).*)|((.*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "(([<LOW>]).*([<NUM>]).*)|((.*)([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "(([<LOW>]).*([<NUM>]).*)|(([<LET>])*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words starting with string <M0> , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": "\\b(<M0>)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": "\\b(<M0>){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": "\\b(<M0>)(.*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": ".*\\b(<M0>){2,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": "(\\b(<M0>){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": "\\b((<M0>)(.*)){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": "(\\b(<M0>)(.*)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": "(\\b(<M0>)|([<LET>])\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": "\\b((<M0>){2,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b){2,}",
                "prediction": "\\b((<M0>){2,})|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": "\\b(<M0>){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": "\\b(<M0>)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": "\\b(<M0>)(.*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": ".*\\b(<M0>){2,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": "(\\b(<M0>){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": "\\b((<M0>){2,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": "(\\b(<M0>)(.*)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": "(\\b(<M0>)|([<LET>])\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": "\\b((<M0>)(.*)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})(.*)\\b",
                "prediction": "\\b((<M0>){2,})|(.)\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "\\b([<LET>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "\\b.*[<LET>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "\\b.*([<LET>])+.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": ".*\\b[<LET>]\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "(\\b.*[<LET>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": ".*\\b([<LET>])+\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "(\\b.*[<LET>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "\\b(.*[<LET>].*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": ".*\\b([<LET>])*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines having either <M0> , a lower case letter , or a vowel then capital": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|(<M0>)|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<VOW>])|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<VOW>])|([<LOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "((.)|([<LOW>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<LOW>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<VOW>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<VOW>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<VOW>])|([<CAP>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines containing 3 or more letters followed by the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "(([<CAP>]){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "(([<LET>]){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "((<M0>){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "(\\b([<LET>]){3,}\\b).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "\\b(([<LET>]){3,}).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "(([<LET>].*<M0>.*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "(.*([<LET>].*<M0>.*){3,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){3,}).*(<M0>).*",
                "prediction": "(([<LET>].*<M0>.*){3,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines starting with character before lower-case letter or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((.)(.*)).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((.)(.*)).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((.)([<LOW>])).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((..*[<LOW>].*)|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((..*[<LOW>].*)|([<LOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((.)(.*[<LOW>].*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((.)+([<LOW>]).*)|(([<LET>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((.)+([<LOW>]).*)|(([<LET>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((.)(.*)).*(([<LOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)+([<LOW>]).*)|([<LET>]))(.*)",
                "prediction": "((.)([<LOW>])).*(([<LET>])|([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines with a character preceding a vowel at least zero times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "(..*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "(.)+(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "((.)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "((.)*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "(.)+((.*[<VOW>].*)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "(.)+(.*([<VOW>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "\\b(..*[<VOW>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "(.)+([<VOW>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<VOW>].*)*",
                "prediction": "(.*..*).*(([<VOW>])*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines stating with 5 or more lower-case letters or vowels": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "(([<LOW>]){5,})|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "(([<LOW>])|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "((([<LOW>])|([<VOW>])){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "((([<LOW>]){5,})|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "(([<LOW>]){5,})|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "((([<LOW>])|([<VOW>])){5,})|([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "(([<LOW>]){5,})|(([<VOW>]){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "(([<LOW>])|(([<VOW>]){5,}))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "((([<LOW>])(.*))|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "((([<LOW>]){5,})|([<VOW>])){5,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and the string <M0> before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "(\\b<M0>.*[<LET>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "\\b<M0>.*[<LET>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "(\\b<M0>.*[<LET>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "\\b.*<M0>.*[<LET>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "\\b(<M0>.*[<LET>].*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "\\b(<M0>).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": ".*\\b<M0>.*[<LET>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "(\\b(<M0>).*([<LET>]).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "(\\b.*<M0>.*\\b).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": ".*\\b(<M0>).*([<LET>]).*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a vowel preceding <M0> preceding a numeral .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "([<VOW>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "[<VOW>].*<M0>.*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "([<VOW>]).*(<M0>.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(<M0>).*([<VOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(<M0>.*[<VOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "([<VOW>]).*([<NUM>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "([<VOW>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "([<VOW>].*[<NUM>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(([<VOW>]).*(<M0>).*).*([<NUM>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with words with either strings : dog or truck , or a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b(<M0>)|(<M1>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b(.)|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b([<LOW>])|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b([<VOW>])|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b(<M0>)|([<LOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b(<M0>)|([<LET>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b(.*<M0>.*)|([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b(.*<M0>.*)|([<LET>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(<M1>)|([<LET>])\\b",
                "prediction": "\\b((<M0>)|(<M1>)|([<LET>]))|([<LET>])\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines that contain a lower-case letter followed by 3 or more capital letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "(([<LOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "([<LOW>].*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "(.*[<LOW>].*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "(([<LOW>]){3,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "(([<LOW>])(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "(([<LOW>]).*([<CAP>]).*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "([<LOW>]).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "(.*[<LOW>].*).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "(([<LOW>].*[<CAP>].*){3,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>]){3,}).*",
                "prediction": "(([<LOW>].*[<CAP>].*){3,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines where a letter is preceded by a lowercase letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": "[<LET>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": ".*[<LET>].*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": "[<LOW>].*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": ".*[<LOW>].*[<LET>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": "([<LOW>].*[<LET>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": "([<LET>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": "([<LOW>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": "\\b[<LET>].*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": "([<LOW>].*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<LET>].*",
                "prediction": "([<LOW>].*[<LET>].*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a number followed by a capital letter and the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "([<NUM>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "(.*[<NUM>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "(<M0>).*([<NUM>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "([<CAP>].*[<NUM>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "([<NUM>]).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "(([<NUM>]).*([<CAP>]).*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "(([<NUM>])(.*)).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "(([<NUM>])+).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "(([<NUM>]).*([<CAP>]).*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(<M0>).*",
                "prediction": "(([<NUM>].*[<CAP>].*)|(<M0>)).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "items with a numeral after a letter or <M0> .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<LET>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<CAP>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<LET>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<NUM>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<LET>])|(<M0>)).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<NUM>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "(<M0>).*(([<LET>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<LET>])|(<M0>)).*(([<NUM>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<LET>])|(<M0>)).*(([<NUM>])|(<M1>)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a small letter preceding a character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "([<LOW>]).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "([<LOW>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "(([<LOW>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "(([<LOW>])(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "(.*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "([<LOW>]).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "([<LOW>]).*(..*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "(([<LOW>]).*(.)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*)*",
                "prediction": "([<LOW>]).*(..*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which are containing either a lower-case letter , a capital letter , or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": ".*([<LOW>])|([<CAP>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": ".*(.)|([<LOW>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": ".*([<LOW>])|([<CAP>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": ".*([<NUM>])|([<CAP>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": "\\b([<LOW>])|([<CAP>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": ".*([<LET>])|([<CAP>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": ".*([<NUM>])|([<CAP>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": ".*([<LOW>])|([<NUM>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": ".*([<CAP>])|([<LOW>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<NUM>]).*",
                "prediction": "(.*[<LOW>].*)|(([<CAP>])|([<NUM>]))"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter , 4 or more times before a vowel in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": "(.*[<LET>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": "((.){4,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": "(([<LET>]){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": "([<LET>].*[<VOW>].*){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": "(([<LET>]){4,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": "([<LET>]).*(([<VOW>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": ".*(([<LET>]){4,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": "(.*[<LET>].*).*(([<VOW>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": "((([<LET>]){4,})|([<VOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){4,}).*([<VOW>]).*",
                "prediction": "(([<LET>].*[<VOW>].*){4,}).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which end 2 or more times with a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "([<CAP>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)(([<CAP>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "((.*)([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": ".*(.*)(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)((([<CAP>]){2,}))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": ".*((.*)([<CAP>])){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "\\b((.*)([<CAP>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)((.*[<CAP>].*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)(.*([<CAP>]){2,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)(.*([<CAP>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words and 2 or more numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": "\\b.*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": "\\b([<NUM>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": "(\\b[<NUM>]\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": "\\b\\b([<NUM>]){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": "\\b.*([<NUM>]){2,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": ".*\\b([<NUM>]){2,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": "\\b(.*[<NUM>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": "(\\b.*[<NUM>].*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": ".*\\b([<NUM>]){2,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){2,}.*\\b",
                "prediction": "(\\b([<NUM>]){2,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter followed by a character , 5 or more times in it": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": "([<LOW>].*..*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": "([<LOW>]).*((.){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": "(..*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": "(([<LOW>]).*(.)+){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": "(([<LOW>]){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": ".*([<LOW>].*..*){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": "(.*[<LOW>].*).*(.){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": "(.*[<LOW>].*).*((.){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": "(([<LOW>].*..*){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){5,}",
                "prediction": "(([<LOW>]).*(.){5,}).*(<M0>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "the lines that begin with either a capital letter or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "((.)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "((<M0>)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "(([<CAP>])(.*))|([<LOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "(([<CAP>])|([<LOW>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "((([<CAP>])|([<LOW>]))+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "(.*[<CAP>].*)|(([<LOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "(([<CAP>])(.*))|(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "((.*[<CAP>].*)|([<LOW>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "\\b(([<CAP>])|([<LOW>]))(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))(.*)",
                "prediction": "(([<CAP>])(.*))|(([<LOW>]).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines with the string <M0> , a letter , or number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": "(<M0>)|([<LET>])|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": "(.*<M0>.*)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": "((<M0>)|([<LET>])|([<NUM>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": ".*(<M0>)|([<LET>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": ".*([<LET>])|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": "\\b(<M0>)|([<LET>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": "(.*<M0>.*)|(([<LET>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": "(.*<M0>.*)|(([<LET>])|([<NUM>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LET>])|([<NUM>]).*",
                "prediction": "((<M0>)|([<LET>])|([<NUM>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending <U> <M0> before a lower-case": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "(.*)(.*<M0>.*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "(.*)(<M0>.*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "((.*)(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "((.*)(<M0>.*[<LOW>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "((.*)(<M0>)).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "(.*)((<M0>).*([<LOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "((.*)(<M0>)).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "((.*)(<M0>)).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "((.*)(.*[<LOW>].*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))+).*([<LOW>]).*",
                "prediction": "((.*)(.*<M0>.*)).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines with words and <M0> or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b([<LOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b(<M0>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b((<M0>)|([<LOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b(.*<M0>.*)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b.*(<M0>)|([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b([<LOW>])|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": ".*\\b(<M0>)|([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b([<LOW>])|(<M0>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b([<LOW>])|(<M0>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": ".*\\b(<M0>)|([<LOW>]).*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter before ending with the string <M0> at least zero times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*((.*)(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*((.*)((<M0>)*)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*(((.*)(<M0>))*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*((.*)((<M0>)*).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>].*).*(((.*)(<M0>))*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "(([<CAP>])+).*((.*)(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "(([<CAP>]).*((.*)(<M0>)).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*(((.*)(.*<M0>)*)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*(((.*)((<M0>)*))*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*(((.*)(.*<M0>.*))*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have a lower-case letter after a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": "[<VOW>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": ".*[<VOW>].*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": "([<VOW>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": "([<VOW>].*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": "\\b.*[<LOW>].*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": "\\b[<VOW>].*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": "\\b([<VOW>]).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": "\\b.*[<VOW>].*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": "([<VOW>]).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LOW>].*",
                "prediction": "(.*[<VOW>].*).*([<LOW>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines with a letter or vowel before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "(([<LET>])|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "(([<CAP>])|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "([<LET>]).*(([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "(([<LET>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "(([<LET>])|([<VOW>])).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "(([<LET>])|(([<VOW>]).*(<M0>).*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "(([<LET>])|([<VOW>])|([<LOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*(<M0>).*",
                "prediction": "(([<LET>])|([<VOW>])|(<M0>)).*([<LOW>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines ending with capital letter , zero or more times or string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": "((.*)(.*[<CAP>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": "(.*)(([<CAP>])|(<M0>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": ".*((.*)([<CAP>]))*.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": "(.*)((([<CAP>])*)|(<M0>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": "((.*)(([<CAP>])*)|(<M0>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": "((.*)(([<CAP>])*))|(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": "((.*)([<CAP>]))|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": "((.*)(([<CAP>])|(<M0>)))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": "((.*)(([<CAP>]))*)|(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])*)|(<M0>))",
                "prediction": "(((.*)([<CAP>]))*)|(<M0>)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines having words with a number , the string <M0> , or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": "\\b(.)|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": "\\b([<NUM>])|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": "\\b(<M0>)|([<NUM>])|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": "(\\b([<NUM>])|(<M0>)|(<M1>)\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": "\\b(<M0>)|(<M1>)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": ".*\\b([<NUM>])|(<M0>)|(<M1>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": "(\\b([<NUM>])|(<M0>)|(<M1>)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": ".*\\b([<NUM>])|(<M0>)|(<M1>)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|(<M1>)\\b",
                "prediction": "\\b.*([<NUM>])|(<M0>)|(<M1>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words start with a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": "\\b([<CAP>])+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": "\\b([<CAP>])(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": "\\b.*([<CAP>])+.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": "(\\b[<CAP>]\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": "(\\b([<CAP>])+\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": "(\\b([<CAP>])(.*)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": ".*\\b([<CAP>])(.*)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": "\\b(.*[<CAP>].*)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": "\\b.*([<CAP>])(.*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])(.*)\\b",
                "prediction": "(\\b.*[<CAP>].*\\b)(.*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines beginning with a number or a vowel preceding the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "((([<NUM>])+)|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "(([<NUM>])(.*))|([<VOW>].*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "(([<NUM>])|([<VOW>].*<M0>.*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "(([<NUM>])+)|(([<VOW>].*<M0>.*)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "(([<NUM>].*[<VOW>].*)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "(([<NUM>])(.*))|(([<VOW>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "(([<NUM>])|([<VOW>].*<M0>.*)(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "(([<NUM>])(.*))|(([<VOW>].*<M0>.*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "(([<NUM>])|([<VOW>])).*((<M0>)(.*)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(([<VOW>]).*(<M0>).*))(.*)",
                "prediction": "((([<NUM>])(.*))|([<VOW>])).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing the string <M0> , a lower-case letter , or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": "(.*<M0>.*)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": ".*(<M0>)|([<LOW>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": ".*(<M0>)|([<LOW>])|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": ".*([<LOW>])|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": ".*(.)|([<LOW>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": ".*([<NUM>])|(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": "(.*)((<M0>)|([<LOW>])|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": "(.*<M0>.*)|(([<LOW>])|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LOW>])|([<NUM>])\\b",
                "prediction": ".*((<M0>)|([<LOW>])|([<NUM>]))|([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number or a capital letter before the string <M0> in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "(([<NUM>])+)|([<CAP>].*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "(([<CAP>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<CAP>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "([<NUM>]).*((<M0>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "([<NUM>]).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "(([<NUM>])+)|(([<CAP>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "(([<NUM>])|(([<CAP>]).*(<M0>).*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<CAP>])|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])).*(<M0>).*",
                "prediction": "(([<NUM>].*[<CAP>].*)|(<M0>)).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing the string <M0> , 2 or more times followed by a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": "(.*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": "(<M0>){2,}.*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": "((<M0>){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": "(.*(<M0>){2,}.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": "(.*<M0>.*){2,}.*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": "(<M0>).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": "((.*<M0>.*){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": ".*((<M0>){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": "(.*<M0>.*).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<NUM>]).*",
                "prediction": "(.*<M0>.*){2,}.*[<NUM>]"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines wherein either an uppercase letter , a letter , or the string <M0> are preceded by the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": ".*([<CAP>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": "(<M1>).*(([<CAP>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": "((<M1>)|([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": "(([<CAP>])|([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": "(([<CAP>])|([<LET>])|(<M1>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": "(([<LET>])|([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number following a lower case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": "[<LOW>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": ".*[<LOW>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": ".*[<NUM>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": "([<LOW>].*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": "([<LOW>].*[<NUM>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": "([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": "([<LOW>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": ".*([<LOW>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": "(([<LOW>])+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<NUM>].*",
                "prediction": "(.*[<LOW>].*).*([<NUM>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "the string <M0> a number or a vowel appears in the lines": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "(<M0>)|(([<NUM>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>]))|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "(([<NUM>])|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "(<M0>)|(([<NUM>])|([<VOW>]))(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter preceded by either a vowel , the string <M0> or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "((<M0>)|([<VOW>])|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "([<LOW>]).*(([<VOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(<M0>).*(([<LOW>])|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(<M0>).*(([<VOW>])|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|([<LOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "([<VOW>]).*(([<VOW>])|(<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a a vowel or a number followed by ending with the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "(([<VOW>])|([<NUM>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "(([<VOW>])|([<NUM>].*<M0>.*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "([<VOW>]).*(([<NUM>])|(.*<M0>.*)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "(([<VOW>])|([<NUM>])).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "(([<VOW>])|([<NUM>]).*(<M0>).*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "(([<VOW>])|([<NUM>].*..*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "(([<VOW>])|([<NUM>].*<M0>.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "(([<VOW>])|([<NUM>]).*(.*).*(<M0>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "(([<VOW>])|([<NUM>])).*((.*)(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*((.*)(<M0>)).*",
                "prediction": "(([<VOW>])|([<NUM>]).*(.*)).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines with a number , string <M0> , or lower-case letter before a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": "([<NUM>])|(<M0>)|([<LOW>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": ".*([<NUM>])|(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": "(.)+(([<NUM>])|(<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": "(.*[<NUM>].*)|((<M0>)|([<LOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": "((.)|(<M0>)|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<NUM>])|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": "(([<NUM>])|([<LOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": ".*(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|([<LOW>])).*([<CAP>]).*",
                "prediction": "(([<CAP>])|(<M0>)|([<LOW>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines with the string <M0> , 2 or more times before a capital letter in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": "(<M0>.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": "(<M0>){2,}.*[<CAP>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": "((<M0>){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": "(.*<M0>.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": ".*((<M0>){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": "\\b((<M0>){2,}).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": "(.*(<M0>){2,}.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": "((<M0>){2,}).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<CAP>]).*",
                "prediction": "(((<M0>){2,})|([<CAP>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "string <M0> appear before a character followed by a number in the lines": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "(<M0>).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "(<M0>).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "(<M0>).*(.)+([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "(<M0>.*..*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "(<M0>).*(..*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "(<M0>).*([<NUM>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "((<M0>)+).*(..*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "(<M0>).*([<NUM>].*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "((<M0>).*(.)+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*[<NUM>].*).*",
                "prediction": "((<M0>)(.*)).*(.*[<NUM>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines where an alphabet character <U> a , e , i , o or u": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*(.)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": "\\b.*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": "\\b[<VOW>].*..*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": "\\b[<VOW>].*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": "\\b([<VOW>])|([<LOW>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": "\\b([<VOW>])|(.)\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character or a letter , followed by a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "(.)|([<LET>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "(.)|(([<LET>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "((..*[<LET>].*)|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "((.)|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "(([<LET>])|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "(.)+(([<LET>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "((.)+)|([<LET>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "((.)|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "(..*[<LET>].*)|(.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "(.)|(([<LET>])|([<NUM>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words and zero or more of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "(\\b<M0>\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "(\\b(<M0>)*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "\\b.*(<M0>)*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "\\b(.*<M0>.*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "\\b.*(<M0>)*.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": ".*\\b(<M0>)*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "(\\b.*<M0>.*\\b)*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and 2 or more of strings <M0> before a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "\\b(<M0>.*[<CAP>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "\\b(<M0>).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "(\\b<M0>.*[<CAP>].*\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "\\b((<M0>){2,}).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "(\\b<M0>\\b.*[<CAP>].*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "\\b(<M0>).*(([<CAP>]){2,}).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "(\\b(<M0>){2,}\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "\\b((<M0>).*([<CAP>]).*)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "\\b(<M0>).*([<CAP>].*[<CAP>].*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,}).*([<CAP>]).*\\b",
                "prediction": "(\\b(<M0>).*([<CAP>]).*\\b){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with 5 or more of only characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "\\b(.){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "\\b.*..*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "(\\b.\\b){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "(\\b\\b){5,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "(\\b.\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "(\\b.*\\b){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "(\\b.*..*\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "\\b.*(.){5,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "(\\b(.){5,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.\\b){5,}",
                "prediction": "(\\b.*\\b){5,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have a vowel preceded by the string <M0> at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(<M0>){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(<M0>.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "([<VOW>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(.*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(<M0>).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(.*[<VOW>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "((<M0>){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(<M0>).*([<VOW>].*<M0>.*){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "<M0> string appear at least once in the lines": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": "(<M0>)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": "(<M0>)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": "((<M0>)+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": ".*(<M0>)+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": "(.*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": "(.*)((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": "((.*)(<M0>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": "((<M0>)+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": "((<M0>)+).*(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>)+",
                "prediction": "((<M0>)+).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> before a lower-case letter or a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": "((<M0>)*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": ".*(<M0>.*[<LOW>].*)|([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": "(<M0>).*(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": "(<M0>.*[<LOW>].*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": ".*(<M0>).*(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": "((<M0>).*([<LOW>]).*)|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": "((<M0>).*([<LOW>]).*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": "((<M0>)+).*(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": "((<M0>)*).*(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<CAP>])).*",
                "prediction": "(.*<M0>.*).*(([<LOW>])|([<CAP>])).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "items with a letter preceding <M0> .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": ".*[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": ".*([<LET>]).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "(.*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>]).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words that contain only 4 or more capital letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": "\\b[<CAP>]\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": "\\b.*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": "(\\b[<CAP>]\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": "\\b([<CAP>]){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": ".*\\b[<CAP>]\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": "(\\b\\b[<CAP>]\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": ".*\\b([<CAP>]){4,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": "\\b.*([<CAP>]){4,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": "(\\b.*[<CAP>].*\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>]\\b){4,}",
                "prediction": "(\\b([<CAP>]){4,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "items with any letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": "(([<CAP>])|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": "(([<LOW>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": "(([<LET>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": "(([<CAP>])|([<LOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": ".*([<CAP>])|([<LOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": "(([<LOW>])|([<LET>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": ".*([<LOW>])|([<CAP>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": ".*([<LET>])|([<CAP>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": "\\b([<LOW>])|([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": ".*([<LET>])|([<LOW>])|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines that contain a number followed by a vowel , at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "([<NUM>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "([<NUM>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "(<M0>).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "(.*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "(([<NUM>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "([<NUM>]).*([<VOW>]){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "([<NUM>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "([<NUM>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "(.*[<NUM>].*).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){2,}",
                "prediction": "([<NUM>]).*(.*[<VOW>].*){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a vowel preceding a letter at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": "[<VOW>].*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": ".*[<VOW>].*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": "(.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": "([<VOW>].*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": "([<VOW>]).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": "([<LET>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": "(.*[<VOW>].*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": "\\b([<VOW>].*[<LET>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": ".*([<VOW>].*[<LET>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LET>].*){2,}",
                "prediction": "(([<VOW>]){2,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a vowel then a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": ".*[<VOW>].*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": "([<VOW>].*[<LET>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": "([<VOW>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": "(([<VOW>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": "([<VOW>].*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": "([<VOW>]).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": "([<LET>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": "(.*[<LET>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": "(.*[<VOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*[<LET>].*",
                "prediction": "([<VOW>].*[<LET>].*).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words ending in only a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": "\\b(.*)([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": "(\\b.*[<NUM>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": "(.*)(\\b[<NUM>]\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": "(\\b.*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": "(\\b(.*)([<NUM>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": "(\\b(.*)([<NUM>])\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": "\\b((.*)([<NUM>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": "(.*)(\\b([<NUM>])+\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": ".*\\b(.*)([<NUM>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<NUM>])\\b",
                "prediction": "(.*)(\\b.*[<NUM>].*\\b)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing words with a letter , a character , or a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": "\\b(.)|([<LET>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": "\\b([<LET>])|(.)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": "\\b(.)|([<LOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": "(\\b(.)|([<LET>])|([<LOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": ".*\\b([<LET>])|(.)|([<LOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": "\\b.*([<LET>])|(.)|([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": ".*\\b(.)|([<LET>])|([<LOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": "\\b.*(.)|([<LET>])|([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": "\\b((.)|([<LET>])|([<LOW>]))|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|([<LOW>])\\b",
                "prediction": ".*\\b(.)|([<LOW>])|([<LET>])\\b.*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with vowel , 5 or more times before character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": "((.){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": "([<VOW>]).*((.){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": "(([<VOW>]){5,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": "\\b(([<VOW>]){5,}).*(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": "((([<VOW>]){5,})|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": ".*(([<VOW>]){5,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": "(([<VOW>]){5,}).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": "((([<VOW>]){5,})(.)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": "((([<VOW>]){5,})(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(.)+",
                "prediction": "((([<VOW>]){5,})|(.)).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines ending with a number before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "(.*)([<NUM>].*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "((.*)([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "(.*)(([<NUM>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "(.*)(([<NUM>]).*([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "((.*)([<NUM>])).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "((.*)(([<NUM>])+)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "(((.*)([<NUM>]))+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "(.*(.*)([<NUM>]).*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "((.*)(.*[<NUM>].*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "((.*)([<NUM>])).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines must contain a character or a lower-case letter 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(..*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "((.)|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(.)|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(([<LOW>])|(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "\\b((.)|([<LOW>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(\\b(.)|([<LOW>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(.)|(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": ".*((.)|([<LOW>])){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(((.)|([<LOW>])){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(((.)|([<LOW>])){2,}){2,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines that have a character followed by <M0> 3 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": "(..*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": "(.*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": "(.*..*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": "(.*..*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": "(.)+((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": "((.){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": "\\b(..*<M0>.*){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": ".*(..*<M0>.*){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": "((..*<M0>.*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*){3,}",
                "prediction": "(.*..*).*((<M0>){3,}).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines where either the string <M0> or a vowel appear 4 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "((<M0>)|([<LOW>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "(([<LOW>])|(<M0>)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "((.)|([<VOW>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "((<M0>)|([<VOW>])){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "(.*(<M0>)|([<VOW>]).*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "(.*<M0>.*)|(([<VOW>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "((.*<M0>.*)|([<VOW>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": ".*((<M0>)|([<VOW>])){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "(((<M0>)|([<VOW>])){4,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "(((<M0>)|([<VOW>])){4,}){4,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and a number , the string <M0> , or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": "\\b([<NUM>])|(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": "\\b(.)|(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": "\\b([<NUM>])|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": "\\b(<M0>)|([<NUM>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": "(\\b([<NUM>])|(<M0>)|([<VOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": "(\\b([<NUM>])|(<M0>)|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": ".*\\b([<NUM>])|(<M0>)|([<VOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": ".*\\b([<NUM>])|(<M0>)|([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b",
                "prediction": "\\b.*([<NUM>])|(<M0>)|([<VOW>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel before either the string <M0> , capital letter and string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "([<VOW>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "([<VOW>].*<M0>.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "([<VOW>]).*(<M0>.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "([<VOW>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "([<VOW>]).*(([<CAP>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "([<VOW>]).*((<M0>.*[<CAP>].*)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "([<VOW>].*<M0>.*).*(([<CAP>])|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter before letter then capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": "(.*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": ".*[<LOW>].*[<LET>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": "([<LOW>].*[<LET>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": "([<LOW>].*[<CAP>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": "([<LOW>]).*([<CAP>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": "([<LOW>]).*([<LET>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": "(([<LOW>])+).*([<LET>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": "(.*[<LOW>].*[<LET>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": "(([<LOW>])+).*([<CAP>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<LET>].*).*([<CAP>]).*",
                "prediction": "(.*[<LOW>].*).*([<CAP>].*[<CAP>].*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a number before a character at least zero times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "([<NUM>].*..*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "(([<NUM>])*).*(.)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "(([<NUM>])*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "(.)+(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "(([<NUM>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "(([<NUM>])+).*(.)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "([<NUM>]).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "(([<NUM>])*).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "([<NUM>]).*(\\b(.)*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*).*(.)+",
                "prediction": "(.*[<NUM>].*).*((.)*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a vowel in words , at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "\\b(.*)([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "\\b(.*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "([<VOW>]){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "\\b([<VOW>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "\\b([<LET>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "\\b.*([<VOW>]){2,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "(.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": ".*\\b([<VOW>]){2,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "(\\b([<VOW>]){2,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with words containing a letter before a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": "(.*)(\\b.*[<LET>].*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": "(.*)(\\b..*[<CAP>].*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": "(.*)(\\b[<LET>].*[<CAP>].*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": "(.*)(\\b([<LET>].*[<CAP>].*)\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": "((.*)([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": ".*(.*)([<LET>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": "((.*)(.*[<LET>].*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": "((.*)(\\b[<LET>]).*([<CAP>]).*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>]).*([<CAP>]).*\\b)",
                "prediction": "((.*)([<LET>])).*(.*[<CAP>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines starting with string <M0> or string <M1> , 5 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "(((<M0>)|(<M1>)){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "(((<M0>)+)|(<M1>)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "(((<M0>)|(<M1>))(.*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "((<M0>)|((<M1>){5,}))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "(((<M0>)|(.)){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "(((<M0>)(.*))|(<M1>)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "((<M0>)(.*))|((<M1>){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "((<M0>)|((<M1>)(.*))){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "(((<M0>)|(<M1>)){5,})((.*)(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){5,})(.*)",
                "prediction": "(((<M0>).*(<M1>).*)|(<M2>)){5,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with the string <M0> or a character , 2 or more times in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": "\\b(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": "\\b(<M0>)|(.){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": "(\\b.*<M0>.*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": ".*\\b(<M0>)|(.)\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": "(\\b(<M0>)|(.)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": "\\b((<M0>)|(.)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": "\\b(<M0>)|((.){2,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": "\\b(<M0>)|((.){2,})\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": "(\\b<M0>\\b)|((.){2,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(.)\\b){2,}",
                "prediction": "(\\b(<M0>)|(.)|(.)\\b){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter after the string <M0> at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>.*[<LET>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>).*([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "((<M0>)(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "((<M0>)+).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>).*(([<LET>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "((<M0>)+).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines which are starting with a capital letter or the string <M0> , zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "(([<CAP>])|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "(([<CAP>])|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "((([<CAP>])|(<M0>))*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "((([<CAP>])|(<M0>))*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "((([<CAP>])(.*))|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "(([<CAP>])(.*))|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "((([<CAP>])|(<M0>))(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "(([<CAP>])|((<M0>)(.*)))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "(([<CAP>])|((<M0>)*))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|((<M0>)*))(.*)",
                "prediction": "(((<M0>)|([<CAP>]))*)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines containing either a vowel , string <M0> , or capital": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": ".*([<VOW>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": ".*(.)|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": ".*(.)|([<VOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": ".*([<VOW>])|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": ".*(<M0>)|([<VOW>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": "\\b([<VOW>])|(<M0>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": ".*([<CAP>])|(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": ".*([<LET>])|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": ".*([<LOW>])|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<CAP>]).*",
                "prediction": ".*(.)|([<VOW>])|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a character preceding a vowel or an upper case letter .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "(.)+(([<VOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "((.)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "((.)+([<VOW>]).*)|([<CAP>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "(.)+(([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "((.)+([<VOW>]).*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "(..*[<VOW>].*)|(([<CAP>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "(..*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "((.)+([<VOW>]).*)|(([<CAP>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "(..*[<VOW>].*).*(([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<CAP>])).*",
                "prediction": "((.)+).*(([<VOW>])|([<CAP>])).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "items with a vowel preceding a small letter preceding <M0> .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "[<VOW>].*[<LOW>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "([<VOW>]).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "([<VOW>]).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "([<VOW>]).*([<LOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "([<VOW>].*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "(.*[<VOW>].*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "([<VOW>]).*(<M0>.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "(([<VOW>]).*([<LOW>]).*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "([<VOW>]).*(([<LOW>]).*(<M0>).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LOW>].*<M0>.*).*",
                "prediction": "(([<VOW>])(.*)).*([<LOW>].*<M0>.*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            1
        ]
    },
    "lines that have only the word <M0> followed by a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "<M0>.*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": ".*<M0>.*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": ".*[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>.*[<LET>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>.*[<LET>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "\\b<M0>.*[<LET>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>.*[<LET>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+).*([<LET>]).*",
                "prediction": "(<M0>).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines with 2 or more of the string <M0> before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "(<M0>.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "(.*<M0>.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "((<M0>){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "(.*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "(<M0>).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": ".*(<M0>).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "((<M0>.*[<LET>].*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": ".*(<M0>.*[<LET>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "((<M0>){2,})|(([<LET>]).*([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "(.*<M0>.*).*(([<LET>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and either a letter , the string <M0> , or a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": "\\b([<LET>])|(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": "\\b(.)|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": "\\b(<M0>)|([<LET>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": "\\b(<M0>)|(.)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": "\\b([<LOW>])|(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": "\\b.*([<LET>])|(<M0>)|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": "\\b.*(<M0>)|([<LET>])|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": "\\b.*([<LET>])|(<M0>)|(.)|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": ".*\\b([<LET>])|(<M0>)|(.)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(.)\\b",
                "prediction": "\\b.*([<LET>])|(<M0>)|(.)+\\b.*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing 3 or more vowels before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": "((<M0>){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": "([<VOW>].*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": "(([<VOW>]){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": ".*(([<VOW>]){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": "(.*[<VOW>].*){3,}.*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": "(.*[<VOW>].*).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": "((.*[<VOW>].*){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": "((([<VOW>]){3,})|([<LOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LOW>]).*",
                "prediction": "(([<VOW>].*[<LOW>].*){3,}).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more of a capital letter before string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": "([<CAP>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": "([<CAP>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": ".*([<CAP>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": "(.*([<CAP>]).*(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": ".*(([<CAP>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": ".*([<CAP>].*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": "(.*[<CAP>].*).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": ".*([<CAP>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*){2,}",
                "prediction": "(([<CAP>]){2,}).*(<M0>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with <M0> or a number 3 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "((.*)((<M0>)+)|([<NUM>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "(.*)((<M0>)|([<NUM>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "((.*)(<M0>))|(([<NUM>]){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "((.*)((<M0>)|([<NUM>]))){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "(.*)(((<M0>){3,})|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "((.*)(([<NUM>])|(<M0>))){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "(.*)((<M0>)|(([<NUM>]){3,}))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "(.*)(((<M0>)|([<NUM>])){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "(((.*)(<M0>))|([<NUM>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|([<NUM>])){3,})",
                "prediction": "((.*)([<NUM>]))|((<M0>){3,})"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with only zero or more of a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": "([<LOW>])*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": ".*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": "(([<LOW>])*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": "(.*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": ".*([<LOW>])*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": "\\b([<LOW>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": "(([<LOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": "(([<LOW>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*)*",
                "prediction": "([<LOW>]).*(([<LET>])*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> after words with a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": "\\b.*..*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": "\\b(..*<M0>.*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": "\\b(.)+(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": "(\\b.*..*\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": "\\b.*(.)+(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": "(\\b..*<M0>.*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": "(\\b(.)+\\b).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": "(\\b.*..*\\b).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+(<M0>).*\\b",
                "prediction": ".*\\b(.)+(<M0>).*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines with the string <M0> before string <M1> followed by string <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "(<M0>).*(<M1>.*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "(<M0>).*(<M1>.*<M2>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "(<M0>).*(<M1>.*<M1>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "(<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "(<M0>).*(<M1>.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "(.*<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "(<M0>).*(<M1>.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "((<M0>)*).*(<M1>.*<M2>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "((<M0>)+).*(<M1>.*<M2>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*<M2>.*).*",
                "prediction": "((<M0>).*(<M1>).*).*(<M2>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines finishing with a character at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "(.*..*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "(.*)((.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "((.*)(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "((.)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "((.)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "(.*)(.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "(.*)(..*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "(.)+((.*)(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*..*)+)",
                "prediction": "(.*)(.*(.)+)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines with number words": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": "\\b([<NUM>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": "\\b([<NUM>])+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": "\\b.*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": "\\b([<NUM>])(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": ".*\\b([<NUM>])+\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": "\\b.*([<NUM>])+.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": "\\b(.*[<NUM>].*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": "(\\b.*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": ".*\\b([<NUM>])*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<NUM>].*\\b",
                "prediction": "(\\b.*[<NUM>].*\\b)+"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines starting with words with vowel , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "\\b([<VOW>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "(\\b[<VOW>]\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "(\\b[<VOW>]\\b){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "(\\b([<VOW>])(.*)\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "(\\b([<VOW>]){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "(\\b.*[<VOW>].*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "\\b(([<VOW>])(.*)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "\\b(([<VOW>]){2,})(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "(\\b\\b([<VOW>]){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<VOW>]){2,}\\b)(.*)",
                "prediction": "(\\b([<VOW>])(\\b){2,}\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with character followed by string <M0> before lower-case letter or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "(.)+(<M0>.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "(..*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "((..*<M0>.*).*([<LOW>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "(..*<M0>.*).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "((..*<M0>.*).*)|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "((..*<M0>.*)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "(<M0>.*..*).*(([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "((..*[<LOW>].*)|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*).*(([<LOW>])|([<VOW>])).*",
                "prediction": "((..*<M0>.*)|([<VOW>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with the string <M0> or zero or more of a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "((<M0>)|([<VOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "((<M0>)|(([<VOW>]))*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "(.*<M0>.*)|(([<VOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "((<M0>)|(.*[<VOW>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "((<M0>)*)|(([<VOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": ".*((<M0>)|([<VOW>]))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "(.*(<M0>)|([<VOW>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "(\\b(<M0>)|([<VOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": ".*((<M0>)*)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "((.*<M0>.*)|([<VOW>]))*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter before string <M0> or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": "(([<CAP>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": "([<CAP>]).*(<M0>.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": "([<CAP>]).*((<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": "([<CAP>].*<M0>.*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": "(<M0>).*(([<CAP>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": ".*([<CAP>]).*((<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": "(([<CAP>]).*(<M0>).*)|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": "(([<CAP>]).*(<M0>).*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": "(([<CAP>]).*(<M0>).*)|(([<LOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LOW>])).*",
                "prediction": "(.*[<CAP>].*).*((<M0>)|([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter before zero or more of the string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "([<LET>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "([<LET>]).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "([<LET>]).*((<M0>)*)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "(([<LET>].*<M0>.*)|(<M1>))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "([<LET>].*<M0>.*)|((<M1>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "([<LET>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "([<LET>]).*((<M0>)*)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "(([<LET>]).*(<M0>).*)|((<M1>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "(([<LET>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]).*(<M0>).*)|((<M1>)*)",
                "prediction": "([<LET>]).*(((<M0>)*)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with 3 or more characters or lower-case letters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": "((.)|([<LOW>])){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": "(([<CAP>])|(.)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": "((.){3,})|([<LOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": "(([<LET>])|(.)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": "(.)|(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": "\\b((.){3,})|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": "(.*(.)|([<LOW>]).*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": ".*((.)|([<LOW>])){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": "(((.)|([<LOW>])){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){3,}",
                "prediction": "(((.){3,})|([<LOW>])){3,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines with words containing a number before a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "\\b[<NUM>].*..*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "\\b.*[<NUM>].*..*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "\\b([<NUM>]).*(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "\\b([<NUM>].*..*)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "\\b([<NUM>].*..*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "\\b(([<NUM>])+).*(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "\\b([<NUM>]).*(..*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "\\b(.*[<NUM>].*).*(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "\\b(([<NUM>]).*(.)+).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(.)+\\b",
                "prediction": "(\\b[<NUM>].*..*\\b).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines with words and containing a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<NUM>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<NUM>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b.*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b.*([<NUM>])+.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<NUM>])(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b(.*[<NUM>].*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b[<NUM>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": ".*\\b([<NUM>])+\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b(.*[<NUM>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "(\\b.*[<NUM>].*\\b)*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "line with <U> number or character preceding a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "(([<NUM>])|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "(.)+(([<NUM>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "(.)+(([<NUM>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "(.)+(([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "(([<NUM>])|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "((.)|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "(([<NUM>])|((.)+)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "([<NUM>]).*(([<LET>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "(([<NUM>])|(.)|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<LET>]).*",
                "prediction": "(.)|(([<NUM>])|(.)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines containing either a lower-case letter , a vowel , or a number after the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*([<LOW>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "\\b(<M0>)|([<LOW>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*([<LOW>]).*([<VOW>])|.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*(.*[<LOW>].*)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*([<LOW>])|([<VOW>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*([<LOW>]).*([<VOW>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*([<LOW>].*[<VOW>].*)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<VOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*([<LOW>]).*(([<VOW>])|([<VOW>])|([<NUM>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines which are having either a vowel , a capital letter , or a letter before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "((.)|([<CAP>])|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<CAP>])|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<CAP>])|([<VOW>])|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<CAP>])|([<CAP>])|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|([<LOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])|([<LET>])).*([<NUM>]).*",
                "prediction": "((([<VOW>])|([<CAP>])|([<LET>]))|([<NUM>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines with the string <M0> , number , or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": "(.*<M0>.*)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": ".*(<M0>)|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": "\\b(<M0>)|([<NUM>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": ".*(<M0>)|([<NUM>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": "(.*<M0>.*)|(([<NUM>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": ".*(<M0>)|([<NUM>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": ".*([<NUM>])|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": "(<M0>)|(([<NUM>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": "((<M0>)|([<NUM>])|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<NUM>])|([<LET>]).*",
                "prediction": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> or character ending in lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": "((<M0>)|(.)).*(.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": "((<M0>)|(.))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": "((<M0>)|(.)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": "(<M0>).*((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": "((<M0>)|(.*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": ".*(<M0>)|((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": "(.*<M0>.*)|((.*)([<LOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": "((<M0>)|(.)).*(.*)([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": "((<M0>)|(.))|((.*)([<LOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)).*((.*)([<LOW>])).*",
                "prediction": "((<M0>)|(.)).*((.*)([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines containing the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": ".*(<M0>)+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": ".*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": "(.*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": ".*(<M0>)*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": "(.*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": "\\b(.*<M0>.*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": "\\b(.*<M0>.*)*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with capital letter at least twice": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)(([<CAP>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "((.*)([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": ".*(.*)(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)(\\b([<CAP>]){2,}\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "\\b((.*)([<CAP>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)((.*[<CAP>].*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)(.*([<CAP>]){2,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "\\b(.*)(([<CAP>]){2,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "((.*)(.*[<CAP>].*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){2,}",
                "prediction": "(.*)((([<CAP>]){2,}))(.*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that end with <M0> and a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)(.*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)((<M0>)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)(.*<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "((.*)(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)((<M0>).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": ".*(.*)(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)(\\b(<M0>).*([<VOW>]).*\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter , vowel , or <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": ".*([<CAP>])|(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": ".*([<CAP>])|([<VOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": "\\b([<CAP>])|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": "([<CAP>]).*(([<CAP>])|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": ".*(<M0>)|([<CAP>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": "(.*[<CAP>].*)|(([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": "(.*[<CAP>].*)|(([<VOW>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": "([<CAP>]).*(([<LET>])|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<VOW>])|(<M0>).*",
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with <M0> followed by a capital": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "(<M0>.*[<CAP>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "([<LET>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>.*[<CAP>].*)+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>.*[<CAP>].*)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>)(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>.*[<CAP>].*)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "(\\b<M0>.*[<CAP>].*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "\\b(<M0>.*[<CAP>].*)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>.*[<CAP>].*)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>.*[<CAP>].*)|([<VOW>]))(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting in 2 or more of the string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "(((<M0>)+)|(<M1>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "((.*<M0>.*)|(<M1>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "(((<M0>)|(<M1>)){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "(((<M0>)|(<M1>))(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "(((<M0>){2,})|(<M1>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "(((<M0>)|(<M1>))|(<M1>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "((<M0>)|((<M1>){2,}))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "(((<M0>)(.*))|(<M1>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "((<M0>)|((<M1>)(.*))){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((<M1>){2,})",
                "prediction": "((<M0>)(.*))|((<M1>){2,})"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "the lines that have either a capital letter or lower-case letter at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "((.)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "((<M1>)|([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "((.)|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "(([<CAP>])|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "((<M0>)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "((([<CAP>])|([<LOW>]))+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "((.*[<CAP>].*)|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "(.*([<CAP>])|([<LOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": ".*(([<CAP>])|([<LOW>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "\\b(([<CAP>])|([<LOW>]))+\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words that have the string <M0> at least 3 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": "\\b(<M0>){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": "\\b(<M1>){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": "\\b.*(<M0>){3,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": "\\b((<M0>){3,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": ".*\\b(<M0>){3,}\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": "\\b(.*<M0>.*){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": "(\\b.*<M0>.*\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*){3,}\\b",
                "prediction": ".*\\b(<M0>){3,}.*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing character , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": ".*..*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(.){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(.*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": ".*(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "\\b(.){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(.*)(.*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(.*)((.){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": ".*(.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "((.){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": ".*(.*)(.){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines in which there are words containing 1 of the following: an upper-case letter , the <M0> string or a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": ".*\\b[<CAP>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": ".*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": "\\b([<CAP>])|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": ".*([<CAP>])|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": ".*\\b([<CAP>])|(<M0>)|([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": "\\b.*([<CAP>])|(<M0>)|([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": ".*\\b([<CAP>])|(<M0>)|([<LET>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": "\\b.*(<M0>)|([<CAP>])|([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|([<CAP>])\\b",
                "prediction": ".*\\b(<M0>)|([<CAP>])|([<LET>])\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines beginning with a lower case letter with the string <M0> following": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "(.*[<LOW>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "(([<LOW>].*..*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "([<LOW>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "(([<LOW>].*<M0>.*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "(([<LOW>].*<M0>.*)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "(([<LOW>].*..*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "(([<LOW>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "(([<LOW>].*[<CAP>].*)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "((<M0>)(.*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)(.*)",
                "prediction": "(([<LOW>].*<M0>.*)|([<CAP>]))(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines that have words containing a lower-case letter following an upper-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": "[<CAP>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": ".*[<LOW>].*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": "\\b[<LOW>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": "\\b[<LET>].*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": "\\b[<CAP>].*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": "(\\b[<LOW>].*[<CAP>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": "\\b.*[<LOW>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": ".*\\b[<LOW>].*[<CAP>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": "\\b([<LOW>]).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*([<LOW>]).*\\b",
                "prediction": "(.*[<LOW>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a letter , 5 or more times followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": "([<LET>].*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": "((.){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": "(([<LET>]){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": "(([<LET>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": "([<LET>]).*(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": ".*(([<LET>]){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": "((.*[<LET>].*){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": "(.*[<LET>].*).*(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": "(([<LET>].*[<LOW>].*){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){5,}).*([<LOW>]).*",
                "prediction": "((([<LET>]){5,})|([<LOW>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have only 1 letter preceding the word <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": ".*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": "[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": ".*[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": ".*<M0>.*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": "\\b[<LET>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": "([<LET>]).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": ".*([<LET>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>]).*(<M0>).*",
                "prediction": "([<LET>]).*(\\b<M0>\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with letters after numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": "([<NUM>].*[<LET>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": "([<NUM>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": ".*([<NUM>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": "([<NUM>]).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": "([<NUM>]).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": "([<NUM>]).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": "([<NUM>]).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": "([<NUM>]).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": "([<NUM>]).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<NUM>].*[<LET>].*",
                "prediction": "([<NUM>]).*((.*)([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines with string <M0> , 2 or more times before containing string <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": "((<M0>){2,}).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": "((<M0>){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": "((<M0>){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": "(<M0>).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": "\\b((<M0>){2,}).*(<M1>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": "((<M0>){2,}).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": ".*((<M0>){2,}).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": "(((<M0>){2,}).*(<M1>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": "((<M0>){2,}).*(<M1>.*<M1>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*(.*<M1>.*).*",
                "prediction": "((<M0>){2,}).*((.*)(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines with a lower-case letter before string <M0> or <M1> or letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>)|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": "([<LOW>]).*((<M0>)|(.)|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|((<M1>)|([<LET>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": "([<LOW>]).*((<M0>)|([<LET>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|(([<LET>])|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|(([<LET>])|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": ".*([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*",
                "prediction": "(.*[<LOW>].*).*((<M0>)|(<M1>)|([<LET>])).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital or lower case after a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": ".*([<LET>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": ".*([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": "(([<CAP>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": "\\b([<LET>]).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": "(([<LET>])|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": "([<LET>]).*(([<CAP>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": "(([<CAP>])|([<LOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": "([<LET>]).*(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": "([<CAP>]).*(([<LOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|([<LOW>])).*",
                "prediction": "(([<CAP>])|([<LOW>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines with characters followed by a capital letter at least 1 time": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": "(..*[<CAP>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": "(.)+(([<CAP>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": "((.)+([<CAP>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": "((..*[<CAP>].*)+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": "((.)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": "(\\b..*[<CAP>].*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": ".*(..*[<CAP>].*)+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": "((..*[<CAP>].*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": "((.)(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*)+",
                "prediction": "(.)+((.*[<CAP>].*)+).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with the string <M0> or the strings <M1> before <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": ".*(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "((<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "(<M0>).*((<M2>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "((<M1>)|(<M0>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "(.*<M0>.*)|(<M1>.*<M2>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "(<M0>).*((<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "(.*<M0>.*)|((<M1>).*(<M2>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": ".*((<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "(\\b(<M0>)|(<M1>)\\b).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "\\b((<M0>)|(<M1>)).*(<M2>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with containing only a lower-case letter , at least 5 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)(([<LOW>]){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "((.*)([<LOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": ".*(.*)(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)((.*[<LOW>].*){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)(.*([<LOW>]){5,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": ".*((.*)([<LOW>])){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "((.*)(.*[<LOW>].*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)((([<LOW>]){5,})|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)((([<LOW>]){5,})){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)(([<LOW>].*[<CAP>].*){5,})"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing string <M0> , string <M1> , a vowel or a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": ".*(<M1>)|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": ".*(<M0>)|(<M1>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": ".*(<M0>)|(<M1>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": ".*(<M1>)|(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": "(.*)|((<M0>)|([<VOW>])|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": "(.*<M0>.*)|((<M1>)|([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": "(.*<M0>.*)|((<M1>)|([<VOW>])|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": "(.*<M0>.*)|((<M1>)|([<CAP>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": "(.*<M1>.*)|((<M0>)|([<CAP>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": "(.*<M0>.*)|(([<VOW>])|([<CAP>])|([<CAP>]))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter before a character or string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "([<CAP>].*..*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "(.)+(([<CAP>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "([<CAP>]).*((.)|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "(([<CAP>]).*(.)+)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "([<CAP>]).*(((.)|(<M0>)|(<M1>)))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "(([<CAP>].*..*)|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "([<CAP>]).*(((.)|(<M0>)|(<M1>))).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "(([<CAP>]).*(.).*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "(([<CAP>]).*(.)|(<M0>)).*((.)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.)|(<M1>)|(<M0>)).*",
                "prediction": "(.*[<CAP>].*).*((.)|(<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines ending in a letter before string <M0> or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "(.*)([<LET>].*<M0>.*)|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "((.*)([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "(.*)(([<LET>].*<M0>.*)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "(.*)(([<LET>]).*(<M0>)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "((.*)([<LET>].*<M0>.*))|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "(.*)(([<LET>]).*(<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "(.*)(([<LET>]).*(<M0>).*)|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "((.*)(([<LET>]).*(<M0>).*)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "((.*)([<LET>])).*((<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>]).*(<M0>).*)|([<LOW>]))",
                "prediction": "(((.*)([<LET>])).*(<M0>).*)|([<LOW>])"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter followed by a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "[<LET>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": ".*[<LET>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "([<LET>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "([<LET>].*..*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "(.)+([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "([<LET>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "\\b[<LET>].*..*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "([<LET>].*..*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "([<LET>].*..*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "([<LET>].*..*).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter after a vowel at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "([<VOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "(.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "([<CAP>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "([<VOW>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "([<VOW>]).*([<CAP>]){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "([<VOW>]).*([<CAP>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "(([<VOW>]){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "([<VOW>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "([<CAP>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>]){2,}).*",
                "prediction": "(.*[<VOW>].*).*(([<CAP>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines starting with string <M0> and <M1> , 5 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "((<M0>)(.*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "((<M0>)|(<M1>)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "((.*<M0>.*){5,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "((<M0>).*(<M1>).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "(((<M0>){5,})|(<M1>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "((<M0>.*<M1>.*)(.*)){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "((<M0>.*<M1>.*){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "(((<M0>)(.*)){5,}).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "(((<M0>)(.*)){5,})|((<M1>){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*){5,})(.*)",
                "prediction": "((<M0>.*<M1>.*)|(<M2>)){5,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a letter followed by the string <M0> before character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": ".*[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": "([<LET>].*<M0>.*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": "(<M0>.*[<LET>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": "([<LET>].*<M0>.*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": "([<LET>]).*(<M0>.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": "(.*[<LET>].*<M0>.*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": "(([<LET>].*<M0>.*)|(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": "(([<LET>].*<M0>.*)+).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": "(([<LET>].*<M0>.*).*(.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*(.)+",
                "prediction": "(([<LET>].*<M0>.*)|(.)).*(<M1>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with 5 or more times vowels followed by a numbers 5": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "(..*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "([<VOW>].*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "(([<VOW>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "(.*[<VOW>].*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "([<VOW>]).*(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "(([<VOW>]){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "(([<VOW>]){5,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "(([<VOW>].*[<NUM>].*){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "(([<VOW>]){5,}).*(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<NUM>].*){5,}",
                "prediction": "(([<VOW>].*[<NUM>].*){5,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines a vowel before a letter then capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "(([<VOW>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "(.*[<LET>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "([<VOW>]).*([<LET>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "([<VOW>].*[<LET>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "(.*[<VOW>].*[<LET>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "(.*[<LET>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "(([<VOW>].*[<LET>].*)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "(([<VOW>])+).*([<LET>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "(([<VOW>])(.*)).*([<LET>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<CAP>].*).*",
                "prediction": "(([<VOW>]).*([<LET>]).*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines with the string <M0> before a vowel , 4 or more times in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": "((<M0>)*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": "(<M0>).*(([<VOW>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": "((<M0>).*([<VOW>]).*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": "(<M0>.*[<VOW>].*){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": "((<M0>)+).*(([<VOW>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": ".*(<M0>).*(([<VOW>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": "(<M0>).*((.*[<VOW>].*){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": "((<M0>)*).*(([<VOW>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": "(<M0>).*((([<VOW>]){4,})|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>]){4,}).*",
                "prediction": "(.*<M0>.*).*(([<VOW>]){4,}).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines having either a character , string <M0> , or string <M1> before vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(.)|((<M0>)|(<M1>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(.)+((<M0>)|(<M1>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(.)+((<M0>)|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(.)+((<M0>)|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|(.)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "((.)|(<M1>)|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(((.)|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "((.)|([<VOW>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": ".*((.)|(<M0>)|(<M1>)).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with 2 or more of a lower-case or capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": "([<LOW>])|(([<CAP>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": "(([<LOW>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": ".*([<LOW>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": ".*(([<LOW>])|([<CAP>])){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": "\\b(([<LOW>])|([<CAP>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": "(.*([<LOW>])|([<CAP>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": "((.*[<LOW>].*)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": "\\b(([<LOW>]){2,})|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])){2,}",
                "prediction": ".*(([<LOW>]){2,})|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "items beginning with an upper case letter or a character .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "((.)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "(([<CAP>])|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "(([<CAP>])(.*))|(.)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "((.)(.*))|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "(((.)(.*))|([<CAP>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "(([<CAP>])(.*))|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "((([<CAP>])|(.))(.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "(([<CAP>])(.*))|(.*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "((.)(.*))|(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))(.*)",
                "prediction": "((.)(.*))|(([<CAP>])(.*))"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines containing <M0> , <M1> , or a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(<M0>)|(<M1>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(.*<M0>.*)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(<M1>)|(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(<M0>)|([<LOW>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(.)|(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*([<LET>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(.*<M0>.*)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*([<LOW>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(.*)|(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*([<LET>])|(<M0>)|([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a vowel , numeral , or upper case letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "\\b([<VOW>])|([<NUM>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": ".*([<NUM>])|([<VOW>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "\\b([<NUM>])|([<VOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": ".*([<VOW>])|([<NUM>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "([<CAP>]).*(([<VOW>])|([<NUM>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<CAP>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<NUM>])|([<VOW>])|([<CAP>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<CAP>])).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words containing a capital letter after a lower case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "\\b[<LOW>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": ".*[<LOW>].*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "\\b[<CAP>].*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "([<LOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "(\\b[<LOW>].*[<CAP>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "\\b([<LOW>]).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "\\b.*[<LOW>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": ".*\\b[<LOW>].*[<CAP>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "([<LOW>]).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "(.*[<LOW>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that must have a vowel preceding a letter , character , or the word <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "(<M0>).*([<VOW>])|(.)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "(<M1>).*([<VOW>])|(.)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "([<VOW>]).*(([<LET>])|(.)|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "([<VOW>]).*((.)|([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "(<M0>).*(([<LET>])|(.)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "(([<VOW>])|(.)|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "(<M0>).*(([<VOW>])|(.)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "(([<VOW>])|(.)|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>])|(<M0>)|(.)).*",
                "prediction": "\\b([<VOW>]).*(([<LET>])|(.)|(<M0>)).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines ending with <M0> or a number .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "((.*)(<M0>))|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "((.*)(<M0>))|(([<NUM>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "(.*)((<M0>)|([<NUM>]))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "(.*)(([<NUM>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "((.*)(<M0>))|(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "((.*)(.*<M0>.*))|([<NUM>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "((.*)((<M0>)|([<NUM>])))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "((.*)(<M0>))|(.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "(.*)((.*<M0>.*)|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|(<M0>))",
                "prediction": "((.*)(<M0>))|(([<NUM>])(.*))"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing 2 characters preceding a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(.){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(..*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(.){2,}.*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(.*)(..*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": ".*(.){2,}.*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(.*..*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(.){2,}.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "((.){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "\\b(.){2,}.*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": ".*(..*[<VOW>].*){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which contain a vowel , number or <U>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": "(([<VOW>])|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": ".*([<VOW>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": "\\b([<VOW>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": "(.*[<VOW>].*)|(([<NUM>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": ".*([<NUM>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": ".*([<VOW>])|([<NUM>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": ".*([<VOW>])|([<NUM>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": ".*([<VOW>])|([<NUM>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": ".*([<VOW>])|([<NUM>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": ".*([<VOW>])|([<NUM>])|([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "items with words containing <M0> , <M1> , or a small letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(.*<M1>.*)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(.*<M0>.*)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(<M1>)|(<M0>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(<M0>)|(<M1>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(.)|(<M0>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(.)|(<M1>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b([<LET>])|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b([<VOW>])|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(<M1>)|([<LOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b([<LOW>])|(<M0>)|(<M1>)\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with either the string <M0> , a lower-case letter , or a vowel followed by a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<VOW>])|([<LOW>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<LOW>])|(<M0>)|([<VOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(.)+((<M0>)|([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(<M0>).*(([<LOW>])|([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": "((<M0>)|([<LOW>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": "((<M0>)|([<LOW>])|([<LET>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<LOW>])|([<LOW>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<VOW>])|([<LOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*",
                "prediction": ".*((<M0>)|([<LOW>])|([<VOW>])).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "multiple lines with capital letters or characters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": "(([<CAP>])|(.))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": ".*([<CAP>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": "(([<CAP>])|(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": "([<CAP>])|((.)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": "([<CAP>])|(.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": "\\b([<CAP>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": "(([<CAP>])|(.)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": "(([<CAP>])|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": "([<CAP>])|((.){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.))*",
                "prediction": "(.*[<CAP>].*)|((.)+)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending in words with string <M0> or a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": ".*(.*)(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": "(.*)((<M0>)|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": "\\b(.*)(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": "(.*)(\\b(<M0>)|([<LET>])\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": "((.*)(<M0>))|(([<LET>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": ".*(.*)((<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": "\\b(.*)((<M0>)|([<LET>]))\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": "(.*)(.*(<M0>)|([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": "(.*)(\\b([<LET>])|(<M0>)\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>)|([<LET>])\\b)",
                "prediction": ".*(.*)((<M0>)+)|([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "the lines that contain words words that also have a vowel at least 1 time": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b[<VOW>]"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b[<VOW>]\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b([<VOW>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b.*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b\\b[<VOW>]\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b\\b([<VOW>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b.*([<VOW>])+.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b.*([<VOW>])+\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which are ending with a lower-case letter or a vowel , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": "((.*)(.*[<LOW>].*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": "(.*)((([<LOW>])*)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": "(.*)((([<LOW>])+)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": "((.*)([<LOW>]))|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": ".*((.*)([<LOW>]))|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": "(.*)((([<LOW>])|([<VOW>])){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": "((.*)([<LOW>]))|(([<VOW>]){2,}))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": "(.*)((([<LOW>]){2,})|([<VOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": "((.*)(([<LOW>])|([<VOW>]))){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>]))){2,}",
                "prediction": "(.*)(([<LOW>])|(([<VOW>]){2,}))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a capital letter after a vowel at least zero times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "([<VOW>]).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "(.*[<VOW>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "([<VOW>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "([<VOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "([<CAP>]).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "(([<VOW>]).*([<CAP>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "(([<VOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "(\\b([<VOW>]).*([<CAP>]).*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "(.*([<VOW>]).*([<CAP>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])*).*",
                "prediction": "(([<VOW>])+).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lined ending with a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "(.*)([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "(.*)(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "((.*)([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "(.*)(.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": ".*(.*)([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "((.*)([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "(.*)([<NUM>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "(.*)(\\b([<NUM>])*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "((.*)([<NUM>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words with either a vowel , string <M0> , or character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": "\\b[<VOW>])|(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": "\\b([<VOW>])|(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": "\\b(.)|(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": "\\b(<M0>)|([<VOW>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": "\\b(.)|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": "\\b.*[<VOW>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": "\\b([<VOW>])|(.)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": ".*\\b([<VOW>])|(<M0>)|(.)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": "\\b([<VOW>])|(<M0>)|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|(.)\\b",
                "prediction": "\\b.*([<VOW>])|(<M0>)|(.)+\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with <M0> before <M1> , <M2> , or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(<M3>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<VOW>])|(<M2>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<VOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "(<M0>).*((<M1>)|(<M1>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<VOW>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<VOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "(<M0>).*((<M1>)|(<M3>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*",
                "prediction": "(.*<M0>.*).*((<M1>)|(<M2>)|([<VOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a capital letter before string <M0> , vowel , or character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "([<CAP>]).*(<M0>.*[<VOW>].*)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "([<CAP>]).*((<M0>)|(.)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "(<M0>).*(([<CAP>])|([<VOW>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "([<CAP>]).*((<M0>)|(.)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "([<CAP>]).*(<M0>).*((<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "([<CAP>]).*((<M0>)|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "([<CAP>]).*(<M0>).*(([<VOW>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "([<CAP>]).*(<M0>).*((.)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<VOW>])|(.)).*",
                "prediction": "(([<CAP>]).*(<M0>).*)|(([<VOW>])|(.))"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing 2 or more lower-case letters , followed by a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": "((.){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": "((<M0>){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": "((.*[<LOW>].*){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": "(.*([<LOW>]).*([<LET>]).*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": "(([<LOW>]){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": ".*(([<LOW>]){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": "(.*([<LOW>]){2,}.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": "((([<LOW>]){2,})|([<LET>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": "((([<LOW>]){2,})|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<LET>]).*",
                "prediction": "(([<LOW>].*[<LET>].*){2,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with a character preceding a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "(..*[<LET>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "(.)(.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "((..*[<LET>].*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "((..*[<LET>].*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "(\\b..*[<LET>].*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "((.)(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "((.)(.*)).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "(.)(.*(.*)([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "((..*[<LET>].*)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)(.*)",
                "prediction": "((.)(.*)).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "lines using the word string <M0> before the string <M1> , no times or more": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>).*((<M1>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "((<M0>)*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(.*<M0>.*<M1>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>).*((<M1>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(.*<M0>.*).*((<M1>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>).*((<M1>){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(.*<M0>.*).*((<M1>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "((<M0>).*(<M1>).*)|((<M2>){2,})"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with <M0> preceding a letter at least 1 time .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "(<M0>.*..*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "([<LET>].*<M0>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "(<M0>.*[<LET>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "((<M0>).*([<LET>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "(<M0>).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "(<M0>).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "(<M0>).*(([<LET>])|([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "((<M0>)+).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "(<M0>).*((.*[<LET>].*)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])+).*",
                "prediction": "(<M0>).*(([<LET>])|([<CAP>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1
        ]
    },
    "the lines with the string <M0> ; at least once or the string <M1> before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|(.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|(<M1>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|(<M1>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|((<M1>.*[<VOW>].*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|((<M1>.*[<VOW>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "(((<M0>)+)+)|(<M1>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|((<M1>).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "(((<M0>)+)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|((<M1>)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)|(<M1>)|(<M1>)).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "<U> lines containing a character or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": "(.)|([<VOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": "((.)|([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": "((.)|([<VOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": "(.)|(([<VOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": ".*(.)|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": "(.*..*)|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": "\\b(.)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": "(.*..*)|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": "(.*(.)|([<VOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>]).*",
                "prediction": "(.)|(([<VOW>])|([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines that have the string <M0> and a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": ".*<M0>.*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": ".*[<LOW>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": "(<M0>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": "\\b<M0>.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": ".*(<M0>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": "(<M0>).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": "\\b.*<M0>.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": "(.*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": "(<M0>).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<LOW>].*",
                "prediction": "\\b(<M0>).*([<LOW>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "lines that have the string <M0> that occurs before a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": "(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": "(<M0>.*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": ".*(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": "(<M0>).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": "(.*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": "(<M0>).*((.*)([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)*).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)+).*(.*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines ending in a vowel before a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "((.*)([<VOW>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "(.*)(([<VOW>].*..*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "(.*)([<VOW>].*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "(.*)(([<VOW>]).*(.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "((.*)(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "(.*)((.*[<VOW>].*).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "((.*)([<VOW>])).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "(.*)(.*([<VOW>]).*(.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "((.*)(.*[<VOW>].*)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(.)+",
                "prediction": "(.*(.*)([<VOW>]).*).*(.)+"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines which are starting with a vowel or a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": "(([<VOW>])|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": ".*([<VOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": "(([<VOW>])|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": "(([<VOW>])(.*))|(([<LET>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": "(([<LET>])|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": "((.*[<VOW>].*)|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": "(([<VOW>])|(.*[<LET>].*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": "(.*[<VOW>].*)|(([<LET>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": "(.*[<LET>].*)|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>]))(.*)",
                "prediction": "(([<VOW>])(.*))|(([<LET>]).*([<LET>]).*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that start with <M0> then <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "(<M0>.*<M1>.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "(.*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "(.*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "((.*<M0>.*)(<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "([<LET>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "([<LOW>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "((<M0>)(.*)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "((<M0>.*<M1>.*)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "(([<LOW>].*<M0>.*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)+)(.*)",
                "prediction": "(\\b<M0>.*<M1>.*\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines ending in a character or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": "(.*)((.)|([<LOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": "((.*)(.))|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": "(.*)(((.)|([<LOW>]))*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": "(.*)(((.)|([<LOW>]))+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": "((.*)(.))|(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": "((.*)((.)|([<LOW>])))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": "(.*)(.*(.)|([<LOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": "((.*)(.))|(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": ".*((.*)(.))|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)|([<LOW>])).*",
                "prediction": ".*(.*)((.)|([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines ending with a lower-case letter before a capital followed by letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "(.*)([<LOW>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "(.*)([<LOW>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "((.*)([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "((.*)([<LOW>])).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "((.*)([<LOW>])).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "(.*)(([<LOW>].*[<CAP>].*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "((.*)([<LOW>].*[<CAP>].*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "((.*)([<LOW>].*[<CAP>].*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>].*[<LET>].*).*",
                "prediction": "((.*)([<LOW>].*[<LET>].*)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines with 2 or more characters or lower-case letters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "((.)|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "((.){2,})|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(.)|(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "\\b((.){2,})|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "\\b((.)|([<LOW>])){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(.*(.)|([<LOW>]).*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": ".*((.)|([<LOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": ".*((.){2,})|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(.*..*)|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){2,}",
                "prediction": "(((.)|([<LOW>])){2,})(.*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines with lower-case letter , zero or more times before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": "(.*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": "([<LOW>].*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": "(([<LOW>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": ".*(([<LOW>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": "((.*[<LOW>].*)*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": "(.*[<LOW>].*).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": "\\b(([<LOW>])*).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<NUM>]).*",
                "prediction": "(([<LOW>])*).*(.*[<NUM>].*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines with words numbers or letters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": "\\b([<NUM>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": "\\b([<NUM>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": "(\\b[<NUM>]\\b)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": "\\b([<LET>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": "(\\b[<NUM>]\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": "\\b([<NUM>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": "(\\b([<NUM>])|([<LET>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": "(\\b([<NUM>])|([<LET>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": ".*\\b([<NUM>])|([<LET>])|([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<LET>])\\b",
                "prediction": ".*\\b([<NUM>])|([<LET>]).*\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing words with only the string <M0> 1 time or more": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": "(\\b<M0>\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": "\\b((<M0>)+)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": "(\\b<M0>\\b)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": "(\\b\\b<M0>\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": "(\\b(<M0>)+\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": "\\b(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": "(\\b.*<M0>.*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": ".*\\b(<M0>)+\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b)+",
                "prediction": "(\\b(<M0>)+\\b).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with letter followed by capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": "\\b..*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": "\\b[<CAP>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": "\\b[<LET>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": "\\b.*[<LET>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": "(\\b[<LET>].*[<CAP>].*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": "\\b([<LET>]).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": "\\b([<LET>].*[<CAP>].*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": "(\\b[<LET>]\\b.*[<CAP>].*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": ".*\\b[<LET>].*[<CAP>].*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LET>].*[<CAP>].*\\b",
                "prediction": "(\\b[<LET>].*[<CAP>].*\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines with a capital letter or <M0> as a string at least twice": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "(([<CAP>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "((.)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "((<M0>)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "\\b(([<CAP>])|(<M0>)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "(\\b([<CAP>])|(<M0>)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": ".*(([<CAP>])|(<M0>)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "(.*[<CAP>].*)|((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "((([<CAP>])|(<M0>)){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "(.*([<CAP>])|(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "((([<CAP>])|(<M0>)){2,}).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter containing only a capital letter at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "((.*[<CAP>].*)+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "([<CAP>]).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "([<CAP>]).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "((.*[<CAP>].*)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> containing only a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": ".*<M0>.*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "(<M0>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "(<M0>.*[<LOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "((<M0>)*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "(.*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "(<M0>).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "((<M0>)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "\\b(<M0>).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "((<M0>)+).*(.*[<LOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number followed by a lower-case letter then a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": "(..*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": ".*[<NUM>].*[<LOW>].*..*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": "([<NUM>].*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": "(.*[<NUM>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": "\\b[<NUM>].*[<LOW>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": "(.)+([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": "([<NUM>]).*([<LOW>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": "(..*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": "([<NUM>].*..*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*).*(.)+",
                "prediction": "(([<NUM>]).*([<LOW>]).*).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines containing a character followed by 3 or more lower-case letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "(..*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "(.)+(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "(.){3,}.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": ".*(..*[<LOW>].*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "(.*..*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "((.){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "\\b(..*[<LOW>].*){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "(.*..*).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "((..*[<LOW>].*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "((..*[<LOW>].*){3,}).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that contain 4 or more times the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": "(<M0>){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": "(.*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": ".*(<M0>){4,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": "\\b(<M0>){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": "((.*)(<M0>)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": "((<M0>){4,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": "\\b((<M0>){4,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": ".*\\b(<M0>){4,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": "\\b(.*<M0>.*){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){4,}",
                "prediction": "((<M0>){4,}).*(.)+"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> , a number , or the string <M1> before the string <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*(<M3>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|([<NUM>])).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M1>)|(<M0>)|([<NUM>])).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": ".*((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": "\\b((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|(([<NUM>])|(<M1>)).*(<M2>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": "(((<M0>)|([<NUM>])|(<M1>))|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*",
                "prediction": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b).*(<M2>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "items with <M0> preceding a vowel preceding a numeral .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "(<M0>.*[<VOW>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "<M0>.*[<VOW>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "(<M0>.*[<VOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "(<M0>).*([<VOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "([<VOW>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "(<M0>.*[<VOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "([<VOW>]).*(<M0>.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "([<NUM>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "(<M0>).*(([<VOW>]).*([<NUM>]).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "(<M0>).*(.*[<VOW>].*[<NUM>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines having the string <M0> before a letter followed by a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "(<M0>.*[<LET>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "((<M0>)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "([<LET>].*<M0>.*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "(<M0>).*([<LET>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "(<M0>).*(..*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "(<M0>).*([<LET>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "((<M0>).*([<LET>]).*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "((<M0>)+).*([<LET>].*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "(<M0>).*(([<LET>]).*(.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LET>].*..*).*",
                "prediction": "((<M0>)*).*([<LET>].*..*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines ending with the string <M0> which is followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "(.*)(<M0>.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "(.*)(.*[<LOW>].*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "(.*)(.*<M0>.*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "((.*)(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "((.*)(<M0>)).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "((.*)(<M0>.*[<LOW>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "((.*)(.*<M0>.*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "((.*)(<M0>.*[<LOW>].*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "((.*)(<M0>.*[<LOW>].*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*[<LOW>].*)",
                "prediction": "((.*)(<M0>.*[<LOW>].*)).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> , a letter , or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": "(.*<M0>.*)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": ".*(<M0>)|([<LET>])|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": "\\b(<M0>)|([<LET>])|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": ".*(<M0>)|(<M1>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": ".*([<LET>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": ".*(<M1>)|([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": "(.*<M0>.*)|(([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": ".*(<M1>)|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(<M1>)\\b",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a character preceding a letter at <U> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "..*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "(..*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "(.)+([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "(..*[<LET>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "(.)+(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "(.)+([<LET>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "(..*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "(.)+(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "(.)+(([<LET>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){2,}).*",
                "prediction": "(..*[<LET>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a zero or more characters or the string <M0> before letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "((<M0>)*)|((.*)([<LET>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "((<M0>)*)|((.)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "((<M0>)*)|((.)+([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "((<M0>)*)|((.*)([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "(((.)*)|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "((.)*)|((<M0>).*([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "((<M0>)|((.)*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "(([<CAP>])*)|((<M0>).*([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "((<M0>)*)|((.)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|(<M0>.*[<LET>].*)",
                "prediction": "(((<M0>)*)|(.)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with the string <M0> before a number or the string <M1> in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "(\\b<M0>.*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "(\\b<M0>.*[<NUM>].*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "\\b(<M0>.*[<NUM>].*)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "(\\b(<M0>).*([<NUM>]).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "\\b(<M0>).*([<NUM>])|(<M1>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "(\\b(<M0>).*([<NUM>]).*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "\\b(<M0>).*(([<NUM>])|(<M1>)).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "(\\b(<M0>).*([<NUM>]).*\\b)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<NUM>]).*)|(<M1>)\\b",
                "prediction": "(\\b(<M0>).*([<NUM>]).*\\b)|(<M1>)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines finishing with the string <M0> or a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": "(.*)((<M0>)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": ".*(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": ".*((<M0>)|([<LOW>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": "((.*)(<M0>))|([<LOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": "(.*)(((<M0>)|([<LOW>]))+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": "((.*)((<M0>)|([<LOW>])))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": ".*(.*)((<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": ".*((<M0>)|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": "((.*)(<M0>))|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>)|([<LOW>]))",
                "prediction": "(.*<M0>.*)|(([<LOW>])(.*))"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter before string <M0> then a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": "([<CAP>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": "([<CAP>]).*(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(<M0>).*([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": ".*([<CAP>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(([<CAP>].*<M0>.*)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(([<CAP>])+).*(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(([<CAP>].*<M0>.*).*([<VOW>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(([<CAP>]).*(<M0>).*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*).*(<M0>.*[<VOW>].*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines with letters or characters before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "([<LET>]).*(([<VOW>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "(([<LET>])|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "(([<LET>])|([<VOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "(([<LET>])|((.)+([<VOW>])).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "(([<LET>])|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "(([<LET>])|((.)+([<VOW>]).*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "(([<LET>])|((.)*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "(([<LET>])|((.)+)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "(([<LET>])|((.)|([<VOW>]))).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)).*([<VOW>]).*",
                "prediction": "(([<LET>])|((.)(.*))).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    "lines with a character that is preceded by an uppercase letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": ".*[<CAP>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": "[<CAP>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": ".*[<CAP>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": "(.)+([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": "([<CAP>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": "(.*[<CAP>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": "([<CAP>].*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": "(..*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": "(([<CAP>])(.*)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.)+",
                "prediction": "([<CAP>]).*(.*..*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines having minimum either 1 vowel or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": "([<VOW>])+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": "(([<VOW>])|(<M0>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": "([<VOW>])|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": "(([<VOW>])|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": ".*([<VOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": "(([<VOW>])|([<LET>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": "(([<VOW>])+)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": "(.*[<VOW>].*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": "(([<VOW>])+)|(.*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>))+",
                "prediction": "(([<VOW>])|(.*<M0>.*))+"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with the string <M0> before a lower-case letter or the strings <M1> or <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>.*[<LOW>].*)|(<M1>))(<M2>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>.*[<LOW>].*)|(<M1>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>).*([<LOW>]).*)|((<M1>)|(<M2>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>.*[<LOW>].*)|(<M1>))|(<M2>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(((<M0>).*([<LOW>]).*)|(<M1>))|(<M2>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>).*(([<LOW>]).*)|(<M1>))|(<M2>)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>)(.*)).*(([<LOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>)(.*)).*(([<LOW>])|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(((<M0>)(.*)).*([<LOW>]).*)|((<M2>)|(<M2>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>)(.*)).*(([<LOW>])|(<M2>)|(<M2>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines that have the string <M0> followed by a letter or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "(<M0>.*[<LET>].*)|(<M1>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "(<M0>.*[<LET>].*)|((<M1>)+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "(<M0>).*(([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>).*([<LET>]).*)|(<M1>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "(<M1>).*(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "(<M0>.*[<LET>].*)|((<M1>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>).*([<LET>]).*)|(.*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>).*([<LET>]).*)|((<M1>)+)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before <M1> or <M2> or a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>.*<M1>.*)|((<M2>)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<LOW>])|(<M2>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<LOW>])|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<LOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "((<M0>).*(<M1>).*)|((<M2>)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<LOW>])|(<M2>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": ".*(<M0>).*((<M1>)|(<M2>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "((<M0>)+).*((<M1>)|(<M2>)|([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing ending with a capital letter at least once in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": "(.*)(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": "(.*)((([<CAP>])+))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": "((.*)([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": ".*((.*)([<CAP>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": "(.*)((([<CAP>])+)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": "(.*)((.*[<CAP>].*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": ".*(.*)(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": "(.*)(\\b([<CAP>])+\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": "(.*)(.*([<CAP>])+.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<CAP>]))+.*",
                "prediction": "(.*)(.*([<CAP>])+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with a capital letter before containing a letter in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": ".*[<CAP>].*[<LET>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": "[<CAP>].*[<LET>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": "([<CAP>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": ".*([<CAP>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": "(([<CAP>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": "([<CAP>]).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": "(.*[<CAP>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": "(([<CAP>])+).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": "([<CAP>].*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*[<LET>].*).*",
                "prediction": "([<CAP>]).*([<LET>].*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines that contain a character followed by a letter , at least twice": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": "(..*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": "(.)+([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": "(.)+(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": "(..*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": "((.){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": ".*(..*[<LET>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": "(.)+([<LET>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": "\\b(..*[<LET>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": "((..*[<LET>].*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<LET>]).*",
                "prediction": "(.)+([<LET>].*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a vowel or an upper case letter or <M0> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<CAP>])|(<M0>))|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<CAP>])|([<VOW>]))|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": ".*([<CAP>])|(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<CAP>])|(<M0>))|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "\\b([<CAP>])|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<CAP>])|(<M0>)|([<VOW>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more of the string <M0> before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": "(.*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": ".*(<M0>).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": "(<M0>.*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": "(<M0>).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": "(.*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": ".*(<M0>.*[<NUM>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": "((<M0>){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": "(.*<M0>.*).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){2,}).*",
                "prediction": ".*(<M0>).*(([<NUM>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have a lower-case letter preceded by a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": "[<NUM>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": ".*[<LOW>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": ".*[<NUM>].*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": "([<NUM>].*[<LOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": "([<NUM>].*[<LOW>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": "([<NUM>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": "\\b[<NUM>].*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": "([<NUM>].*[<LOW>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": "(.*[<NUM>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>]).*",
                "prediction": "([<NUM>].*[<LOW>].*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines which are starting with a number at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "((.)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "(.*[<NUM>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "(([<NUM>])(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "(([<NUM>])+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "(([<NUM>])*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "(.*[<NUM>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "((([<NUM>])+)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "([<NUM>].*[<NUM>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*))+",
                "prediction": "((.*[<NUM>].*)+)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines beginning with either a number or a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": "(([<NUM>])|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": ".*(([<NUM>])|([<CAP>]))+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": "(([<NUM>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": "(([<CAP>])|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": "(([<NUM>])+)|(([<CAP>])(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": "((([<NUM>])+)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": "((([<NUM>])|([<CAP>]))+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": "(.*[<NUM>].*)|(([<CAP>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": "(([<NUM>])|(.*[<CAP>].*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>]))(.*)",
                "prediction": "(([<NUM>])(.*))|(([<CAP>])+)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with 4 or more capital letters or characters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "(([<CAP>])|(.)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "([<CAP>]){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "(([<CAP>]){4,})|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "(([<CAP>]){4,})|(.)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "(([<CAP>])|([<LET>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "(([<CAP>]){4,})|(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "((([<CAP>])|(.)){4,}){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "(([<CAP>]){4,})|((.){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "(([<CAP>]){4,})|(.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){4,}",
                "prediction": "(([<CAP>])|((.){4,})){4,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with lower-case letter , zero or more times before letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": "(.*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": "([<LOW>].*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": "(([<LOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": "(([<LOW>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": "([<LOW>]).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": ".*(([<LOW>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": "(.*[<LOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": "((.*[<LOW>].*)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": "(.*[<LOW>].*).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])*).*([<LET>]).*",
                "prediction": "\\b(([<LOW>])*).*([<LET>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines with 2 or more of the string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": ".*(<M0>)|(<M1>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": "((<M0>)|(<M1>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": "((<M0>){2,})|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": ".*((<M0>)|(<M1>)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": ".*((<M0>){2,})|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": "(.*<M0>.*)|((<M1>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": "\\b((<M0>)|(<M1>)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": "((.*<M0>.*)|(<M1>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": "(((<M0>)|(<M1>)){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((<M1>){2,})",
                "prediction": "(.*(<M0>)|(<M1>).*){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with a character followed by a capital letter , 5 or more times in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "\\b(..*[<CAP>].*){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "(\\b..*[<CAP>].*\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "(\\b(.)*\\b).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "(\\b(.)+\\b).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "(\\b(.).*([<CAP>]).*\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "(\\b(.)+([<CAP>]).*\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "(\\b(.)+\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "(\\b(.){5,}\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "(\\b(..*[<CAP>].*){5,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(..*[<CAP>].*){5,}\\b",
                "prediction": "(\\b(..*[<CAP>].*){5,}\\b){5,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with the string <M0> or a character , 3 or more times in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": "((<M0>)|(.)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": "((.)|(<M0>)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": "((<M0>)|((.)+)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": "(\\b(<M0>)|(.)\\b){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": "(.*<M0>.*)|((.){3,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": "\\b((<M0>)|(.)){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": ".*((<M0>)|(.)){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": "(((<M0>)|(.)){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": "(((<M0>)|(.)){3,}){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){3,}",
                "prediction": "(((<M0>)|(.)){3,}).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "the string <M0> should be <U> with words in the string .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "(<M0>)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "\\b(<M0>)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "(<M0>).*(\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "(<M0>).*(\\b.*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "(<M0>).*(\\b([<CAP>])+\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*<M0>.*\\b",
                "prediction": "(<M0>).*(\\b(.)+\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines in which a <M0> string , a letter that's lower-case , or a <M1> string are preceded by a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "((<M0>)+)|([<LET>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "((<M0>)|([<LET>])|([<LOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "(([<LET>])|(<M0>)|([<LOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "((<M0>)|([<LOW>])|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "(([<LOW>])|(<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "(([<LET>])|([<LOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "(([<LOW>])|(<M0>)|([<LOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "at least twice , the string <M0> followed by a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(.*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(<M0>.*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(..*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "((<M0>){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "((.){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(<M0>).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(([<CAP>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(([<NUM>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(([<LET>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(([<NUM>]){2,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with only a letter or a vowel at least 1 time": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": "((.)|([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": "(.*[<LET>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": "(([<CAP>])|([<VOW>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": "(([<LET>])|([<VOW>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": "(([<VOW>])|([<LET>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": "((([<LET>])|([<VOW>]))+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": "\\b(([<LET>])|([<VOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": ".*(([<LET>])|([<VOW>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": "(\\b([<LET>])|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>]))+",
                "prediction": "(.*([<LET>])|([<VOW>]).*)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "items terminating with <M0> at least twice .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "((.*)(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "(.*)((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "((.*)(.*<M0>.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "(.*)((<M0>)|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": ".*((.*)(<M0>)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "\\b((.*)(<M0>)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": ".*(.*)((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "(.*)(((<M0>){2,})|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "(.*)((.*<M0>.*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "(.*)(((<M0>){2,})|(<M1>))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a capital , zero or more times or string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": "(.*[<CAP>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": ".*([<CAP>])*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": ".*([<CAP>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": ".*(.*[<CAP>].*)*.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": ".*(([<CAP>])*)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": "(.*([<CAP>])|(<M0>).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": "\\b(([<CAP>])*)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": "(.*[<CAP>].*)|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": "(([<CAP>])*)|(.*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])*)|(<M0>).*",
                "prediction": "(.*([<CAP>])*)|(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with words that contain the string <M0> before a capital letter in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "\\b<M0>.*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "(\\b<M0>.*[<CAP>].*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "\\b.*<M0>.*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "(\\b<M0>.*[<CAP>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "\\b(<M0>).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "(\\b<M0>).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": ".*\\b<M0>.*[<CAP>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "(\\b<M0>.*[<CAP>].*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "(\\b(<M0>).*([<CAP>]).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": ".*\\b(<M0>).*([<CAP>]).*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines wherein a character is preceded by the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": ".*..*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": ".*<M0>.*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(<M0>).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(<M0>.*..*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(<M0>).*(.*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(.*<M0>.*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(.*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(..*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(<M0>).*(..*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(<M0>.*..*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing either character , string <M0> , or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": ".*.*..*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": ".*..*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": ".*(.)|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": ".*(<M0>)|([<LET>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": ".*(<M0>)|(.)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": "\\b(.)|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": ".*.*(.)|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": ".*([<LET>])|(.)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": ".*(.)|([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|([<LET>]).*",
                "prediction": ".*(.)|(<M0>)|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines ending with <M0> before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "(.*)(.*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "(.*)(<M0>.*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "(.*)((<M0>).*(.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "((.*)(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "((.*)(.*<M0>.*)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "((.*)(<M0>)).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "(((.*)(<M0>)).*(.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "((.*)(<M0>)).*((.)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "((.*)(<M0>)).*((.*)(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.)+",
                "prediction": "((.*)(<M0>)).*(.*..*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "items with a small letter or character preceding <M0> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "((<M0>)|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "(.)|(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LOW>])|(.)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LOW>])|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "([<LOW>]).*((<M0>)|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "((.)|([<LOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LOW>])|(.)|(.)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LOW>])|(.)|(<M0>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LOW>])|(.)|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LOW>])|(.)|(<M0>)).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines which are containing a character or a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": ".*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": "((.)|([<LET>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": ".*([<LET>])|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": "(.*..*)|([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": "\\b(.)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": "(.*..*)|([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": ".*(.)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": "(.*..*)|(([<LET>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": "(.*..*)|(.*[<LET>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<LET>]).*",
                "prediction": ".*(.)|([<LET>])|([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines ending with string <M0> followed by number at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "(.*)(<M0>.*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "(.*)(<M0>.*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "(.*)(<M0>.*[<NUM>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "(.*)((<M0>.*[<NUM>].*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "((.*)(<M0>.*[<NUM>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "(.*)(.*<M0>.*[<NUM>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "((.*)(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "((.*)(<M0>)).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "((.*)(<M0>)).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<NUM>].*)+)",
                "prediction": "(((.*)(<M0>)).*([<NUM>]).*)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a number , 5 or more times before the string <M0> in it": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": "((.){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": ".*(([<NUM>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": "(([<NUM>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": "([<NUM>]).*((<M0>){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": "\\b(([<NUM>]){5,}).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": "((([<NUM>]){5,}).*(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": "((([<NUM>]){5,})|(<M0>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": "((([<NUM>]){5,})|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": "(([<NUM>]){5,}).*(<M0>.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(<M0>).*",
                "prediction": "((([<NUM>]){5,}){5,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel before number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": "([<VOW>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": "([<VOW>].*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": "(([<VOW>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": ".*([<VOW>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": "(([<VOW>])+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": "([<VOW>]).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": "([<VOW>]).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": "([<VOW>]).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": "(.*[<VOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>])+).*",
                "prediction": "(([<VOW>])(.*)).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines followed by a vowel before a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<VOW>].*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<VOW>].*[<CAP>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<VOW>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<VOW>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "(<M0>.*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<VOW>].*[<CAP>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<LET>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<CAP>].*[<VOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<CAP>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "(.*[<VOW>].*[<CAP>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines having either a capital , string <M0> , or number before string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|(<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((.)|(<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|([<CAP>])|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|([<NUM>])|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((([<CAP>])|(<M0>)|([<NUM>]))|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((([<CAP>])|(<M0>)|([<NUM>])))*.*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((([<CAP>])|(<M0>)|([<NUM>])))+.*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines ending with letter , zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": "(.*)(([<CAP>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": "((.*)([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": "(.*)(([<LET>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": "(.*)(\\b([<LET>])*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": ".*(.*)(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": "(.*)((.*[<LET>].*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": "((.*)(.*[<LET>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": ".*((.*)([<LET>]))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": "(.*)((([<LET>])*)|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))*",
                "prediction": "(.*)(.*([<LET>])*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number , zero or more times or the string <M0> before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": "(([<NUM>])*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": "(([<NUM>])*)|(<M0>).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": ".*(([<NUM>])*)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": "(([<NUM>])*)|(.*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": "(([<NUM>])*)|(<M0>.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": "(([<NUM>])*)|((<M0>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": "(([<NUM>])*)|(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": "(([<NUM>])*).*((.)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": "(([<NUM>])*)|((<M0>).*(.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])*)|((<M0>).*(.)+)",
                "prediction": "((([<NUM>])*)|(<M0>)).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with 5 or more vowels before a letter or string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "(([<VOW>]){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "(([<VOW>]){5,}).*([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "(([<VOW>]){5,})|(([<LET>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "((<M0>){5,}).*(([<LET>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "((([<VOW>]){5,})|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "(([<VOW>]){5,})|(([<LET>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "(([<VOW>].*[<LET>].*)|(<M0>)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "((<M0>){5,}).*(([<LET>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,}).*(([<LET>])|(<M0>)).*",
                "prediction": "(([<VOW>]){5,})|((<M0>).*([<LET>]).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character followed by a capital letter and then a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "(..*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "(..*[<CAP>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "(.)+([<CAP>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "..*[<CAP>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "(..*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "((..*[<CAP>].*)|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "([<CAP>].*..*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "((.)+).*([<CAP>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "\\b(..*[<CAP>].*).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<CAP>].*).*([<NUM>]).*",
                "prediction": "(..*[<CAP>].*).*(.*[<NUM>].*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    "lines with a lower-case letter after the string <M0> followed by a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": ".*<M0>.*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": "(<M0>.*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": "(<M0>).*([<LOW>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": "([<LOW>].*<M0>.*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": "(<M0>).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": "((<M0>).*([<LOW>]).*)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": "(<M0>.*..*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": "((<M0>).*([<LOW>]).*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": "((<M0>).*(.)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*).*([<LOW>]).*",
                "prediction": "((<M0>).*([<LOW>]).*)|(..*..*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines with a letter before vowel then string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": "(.*[<LET>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": "([<LET>]).*([<VOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": "([<LET>]).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": ".*[<LET>].*[<VOW>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": "([<LET>].*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": "([<LET>]).*(.*[<VOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": "(([<LET>].*[<VOW>].*).*(<M0>).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": "(([<LET>])+).*([<VOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": "([<LET>]).*(([<VOW>].*<M0>.*)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*<M0>.*).*",
                "prediction": "(([<LET>]).*([<VOW>]).*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines ending ending with a capital or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "(.*)((.*)([<CAP>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "(.*)((([<CAP>])+)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "((.*)([<CAP>]))|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "(.*)((.*)(([<CAP>])+))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "(.*)((([<CAP>])|([<LOW>]))+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "(.*)((.*[<CAP>].*)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "((.*)(.*[<CAP>].*))|(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "(.*)((.*)(([<CAP>])|([<LOW>])))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "(.*)(((.*)([<CAP>]))|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|([<LOW>]))",
                "prediction": "((.*)(.*[<CAP>].*))|(.*[<LOW>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with <M0> followed by capital letter , zero times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": ".*<M0>.*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": "<M0>.*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": "(.*<M0>.*[<CAP>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": "(<M0>.*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": "<M0>.*<M0>.*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": "(<M0>).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": "(<M0>).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": "(<M0>).*([<CAP>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": ".*(<M0>.*[<CAP>].*)*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<CAP>].*\\b)*",
                "prediction": "(<M0>).*(.*[<CAP>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a capital letter and 2 or more vowels": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": ".*([<CAP>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "(([<CAP>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": ".*([<CAP>]).*(([<VOW>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing 2 or more characters or numbers .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": "((.)|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": "((.){2,})|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": "(.)|(([<NUM>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": "\\b((.){2,})|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": "(.*..*)|(([<NUM>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": ".*((.)|([<NUM>])){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": "(.*(.)|([<NUM>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": ".*((.){2,})|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": "(\\b(.)|([<NUM>])\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<NUM>]).*){2,}",
                "prediction": "\\b((.)|([<NUM>])){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines having a capital letter before a number following a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(([<CAP>])+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "([<CAP>].*[<NUM>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "([<CAP>].*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "([<CAP>].*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(([<CAP>])+).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(.*[<CAP>].*).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(([<CAP>]).*([<NUM>]).*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(([<CAP>])(.*)).*([<NUM>].*[<LOW>].*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines with a letter , or a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": "\\b([<LET>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": ".*([<LET>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": "\\b.*([<LET>])|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": "(.*[<LET>].*)|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": ".*([<LET>])|(.)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": ".*([<LET>])|([<CAP>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": ".*([<LET>])|(.)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": ".*([<LET>])|(.)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": ".*([<LET>])|(.)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(.)|([<LET>])\\b",
                "prediction": ".*(.)|([<LET>])|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with a vowel , 4 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "((.*)([<VOW>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)(([<VOW>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)(\\b([<VOW>]){4,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)((.*[<VOW>].*){4,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)((([<VOW>]){4,}))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)(.*([<VOW>]){4,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": ".*((.*)([<VOW>])){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)((([<VOW>]){4,})){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)((([<VOW>]){4,})|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)((([<VOW>]){4,})){4,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a small letter followed by a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": ".*[<LOW>].*..*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": "([<LOW>]).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": "\\b[<LOW>].*..*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": "(([<LOW>])+).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": "([<LOW>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": "(.*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": "([<LOW>]).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": "([<LOW>]).*(..*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": "([<LOW>].*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*..*",
                "prediction": "([<LOW>].*..*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines ending with a vowel preceding a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "(.*)([<CAP>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "(.*)([<VOW>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "(.*)(([<VOW>].*[<CAP>].*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "(.*)(.*[<VOW>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "((.*)([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "((.*)([<VOW>].*[<CAP>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "((.*)([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "(.*)(\\b[<VOW>].*[<CAP>].*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "((.*)([<VOW>])).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<VOW>].*[<CAP>].*)",
                "prediction": "((.*)([<VOW>])).*(([<CAP>])+).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "lines containing both a lower-case and capital letter at least 3 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": "([<LOW>]){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": "([<CAP>]){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": "\\b([<LOW>]){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": "(.*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": ".*([<LOW>]){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": "([<LOW>].*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": "([<LOW>]).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": "(([<LOW>]){3,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": "(([<CAP>]){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){3,}",
                "prediction": "([<CAP>]).*(([<LOW>]){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "the line with a character followed by any number before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "(.)+(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "(..*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "(.)+([<NUM>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "(..*[<NUM>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "((..*[<NUM>].*)|(<M0>))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "(.)+(([<NUM>].*<M0>.*)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "((..*[<NUM>].*)+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "((.)+([<NUM>]).*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "((..*[<NUM>].*).*(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*).*(<M0>).*",
                "prediction": "((..*[<NUM>].*)*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lines with words ending in string <M0> before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": "((.*)(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": "\\b(.*)(<M0>.*[<LOW>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": ".*\\b(.*)(<M0>).*\\b[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": "(\\b(.*)(<M0>.*[<LOW>].*)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": "(\\b(.*)(<M0>)\\b).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": "\\b((.*)(<M0>)).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": "(.*)(\\b(<M0>).*([<LOW>]).*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": "(\\b(.*)(<M0>)).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": ".*\\b((.*)(<M0>)).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<LOW>].*)\\b",
                "prediction": "(\\b(.*)(<M0>).*\\b).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines with a number or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": "(([<NUM>])|([<LET>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": "(([<NUM>])|([<LET>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": ".*([<NUM>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": "\\b([<NUM>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": "(.*[<NUM>].*)|(([<LET>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": ".*([<NUM>])|([<CAP>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": ".*([<NUM>])|([<LET>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": ".*([<NUM>])|([<LOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": "(([<NUM>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LET>]))+",
                "prediction": ".*([<NUM>])|([<LET>])|([<LOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with string <M0> followed by string <M1> or number at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "((<M0>.*<M1>.*)|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "((<M0>.*<M1>.*)|(<M2>))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "(<M0>.*<M1>.*)|(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "((<M0>).*(<M1>)|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "(.*<M0>.*<M1>.*)|(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "((<M0>).*(<M1>.*)|([<NUM>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "((<M0>).*(<M1>).*)|(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "((<M0>)|(<M1>)).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*)|(([<NUM>])+)",
                "prediction": "(<M0>).*(((<M1>)|([<NUM>]))+).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a lower-case letter followed by a capital letter or any letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>].*[<CAP>].*)|(([<LET>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>].*[<CAP>].*)|(([<LET>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>]).*(([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "(([<LOW>])|([<CAP>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>]).*(([<CAP>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>].*[<CAP>].*)|(([<LET>])|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "(([<LOW>])|([<CAP>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>]).*(([<CAP>])|([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "(([<LOW>])|([<CAP>])|([<LET>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more capital letters before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": "((.){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": "([<CAP>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": "([<CAP>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": "(([<CAP>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": "((([<CAP>]){2,}).*(<M0>).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": ".*(([<CAP>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": "\\b(([<CAP>]){2,}).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": "((([<CAP>]){2,}).*(<M0>).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": "((([<CAP>]){2,})|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>]){2,}.*).*(<M0>).*",
                "prediction": "(([<CAP>].*<M0>.*){2,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with a capital followed by number , zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "([<CAP>].*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "(([<CAP>].*[<NUM>].*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "(([<NUM>].*[<NUM>].*)*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "(([<CAP>].*[<NUM>].*)*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "(([<CAP>].*[<NUM>].*)(.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "(\\b([<CAP>].*[<NUM>].*)*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "(\\b([<CAP>].*[<NUM>].*)*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "(\\b([<CAP>]).*([<NUM>]).*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "(([<CAP>])(.*)).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>].*[<NUM>].*)(.*))*",
                "prediction": "((([<CAP>])(.*))*).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a letter , or <M0> before <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": ".*([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)|(.)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)|([<LOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": ".*(([<LET>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)|((<M1>)).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*",
                "prediction": ".*(([<LET>])|(<M0>)|([<LOW>])).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> followed by a character , zero times or more": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "(<M0>).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "(<M0>.*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "(<M0>.*..*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "((<M0>.*..*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "\\b(<M0>.*..*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": ".*(<M0>.*..*)*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "(.*<M0>.*).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "((<M0>.*..*)*)|(<M1>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "((<M0>).*(.)*)|(.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "(<M0>).*((.*..*)*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "items with a vowel preceding a character at least 1 time .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "([<VOW>].*..*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "(([<VOW>]).*(.)+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "(.)+(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "(([<VOW>])+).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "([<VOW>]).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "(([<VOW>])(.*)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "(([<VOW>])(.*)).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "(([<VOW>])+).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "(([<VOW>]).*(.)+)|(([<LET>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)+",
                "prediction": "([<VOW>]).*(((.)+)|([<LET>])).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "lines containing containing only vowel before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "([<VOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "(.*[<VOW>].*<M0>.*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": ".*([<VOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": ".*(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": ".*(([<VOW>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "(.*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "(.*[<VOW>].*<M0>.*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": ".*(.*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "((.*[<VOW>].*)*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": ".*([<VOW>].*<M0>.*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines ending with the string <M0> or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "((.*)(<M0>))|(<M1>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "(.*)((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "(.*)(((<M0>)|(<M1>))+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "(.*)(((<M0>)+)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "((.*)(<M0>))|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "(.*)((<M1>)|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "((.*)(<M1>))|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "(.*)((.*<M0>.*)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "((.*)(<M0>))|(.*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": ".*(.*)((<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that start with 2 or more instance of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "((<M0>){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "(\\b(<M0>){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "((<M0>)(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "\\b((<M0>){2,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "(\\b(<M0>)(.*)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "((.*<M0>.*){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "\\b((<M0>)(.*)){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "(((<M0>)(.*)){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)){2,}",
                "prediction": "(((<M0>){2,})(.*)){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines that begin with a character or <M0> a minimum of 1 time": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "((.)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "(((.)(.*))|(<M0>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "(((.)(.))|(<M0>))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "(((.)|(<M0>))(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "((.)|((<M0>)(.*)))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "(((.)+)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "((<M0>)(.*))|((.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "(((.)|(<M0>))+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "((.)(.*))|((<M0>)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))|(<M0>))+",
                "prediction": "((.)(.*))|((<M0>).*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with the string <M0> before <M1> , a letter , or a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<LET>])|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "(<M0>).*(<M1>.*[<LET>].*)|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<LOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "(<M0>)+.*((<M1>)|([<LET>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<LET>])|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<LET>])|([<LOW>])|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<LET>])|([<LOW>])|(<M1>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "((<M0>)+).*((<M1>)|([<LET>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<LOW>])).*",
                "prediction": "(<M0>.*<M1>.*).*(([<LET>])|([<LET>])|([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with the string <M0> coming before a vowel , the string <M1> , or a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "(<M0>.*[<VOW>].*)|((.)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "(<M0>.*[<VOW>].*)|((<M1>)|(.))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "(<M0>).*(([<VOW>])|(.)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "(<M0>).*((.)|(<M1>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "((<M0>).*([<VOW>]).*)|((.)|(<M1>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "((<M0>)+).*(([<VOW>])|(<M1>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(.)).*",
                "prediction": "((<M0>).*([<VOW>]).*)|((.)|(.))"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words with a character , vowel , or string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b(.)|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b([<VOW>])|(.)|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b(.)|(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": "(\\b.*..*\\b)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": "(\\b.)|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": "(\\b(.)|([<VOW>])|(<M0>)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b.*(.)|([<VOW>])|(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": "(\\b(.)|([<VOW>])|(<M0>)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": ".*\\b(.)|([<VOW>])|(<M0>)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b.*(.)|(<M0>)|([<VOW>]).*\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing either a character , string <M0> , or string <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": "(.*..*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": ".*(.)|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": ".*(<M0>)|(.)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": "\\b(.)|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": ".*(.)|(<M1>)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": ".*([<LET>])|(.)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": ".*.*(.)|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": ".*((.)|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": ".*([<NUM>])|(.)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|(<M0>)|(<M1>).*",
                "prediction": ".*(.)|(<M0>)|([<LET>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines with a number at the end followed by a capital letter or <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "(([<NUM>])+).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "((.*[<NUM>].*)|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "(([<NUM>])|(.*[<CAP>].*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "((<M0>)+).*(([<CAP>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "((.*[<NUM>].*)|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "(([<NUM>])+)|((.*[<CAP>].*)|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "((.*)([<CAP>])).*(([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "((.*)([<NUM>])).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "((.*)([<CAP>])).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "prediction": "(([<NUM>])(.*)).*(([<CAP>])|(<M0>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a lower-case letter preceding a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": "([<LOW>].*[<CAP>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": "\\b[<LOW>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": "([<LOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": ".*[<LOW>].*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": ".*([<LOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": "(.*[<LOW>].*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": "(.*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": "([<LOW>]).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": ".*([<LOW>].*[<CAP>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<LOW>].*[<CAP>].*\\b",
                "prediction": "([<LOW>].*[<CAP>].*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines that end with 5 or more capital letters , each followed by a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "(((.){5,}){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "((.*)(([<CAP>]){5,})).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "(((.){5,}).*([<CAP>]).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "(((.){5,})|([<CAP>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "(((.*)([<CAP>])){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "(((.){5,})|([<CAP>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "((.){5,}).*(([<CAP>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "(((.){5,})|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "(((.){5,})|([<CAP>])).*(.){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "prediction": "(((.*)(([<CAP>]){5,})){5,}).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a vowel or a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": "(<M0>.*[<VOW>].*)|(([<LOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": "(<M0>).*(([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": "(<M0>).*(([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": "(<M0>.*[<VOW>].*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": ".*(<M0>).*(([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": "(<M0>.*[<VOW>].*)|(([<LOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": "((<M0>).*([<VOW>]).*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": "((<M0>)+).*(([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": "(<M0>).*((.*[<VOW>].*)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<VOW>])|([<LOW>])).*",
                "prediction": "(<M0>).*((([<VOW>])|([<LOW>]))+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with a character after the string dog 4 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "((.*)(.)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "((.*)(<M0>)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "((.*)(..*<M0>.*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "((.*)((<M0>).*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "(.*)(((<M0>){4,})|(.))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "(.*)((<M0>.*..*){4,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "((.*)(<M0>.*..*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "(.*)(((<M0>){4,})|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "((.*)(<M0>)).*((.){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*..*){4,})",
                "prediction": "((.*)((<M0>){4,})).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with letter , 2 or more times before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": "((.){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": "([<LET>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": "(([<LET>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": "((([<LET>]){2,})|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": ".*(([<LET>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": "((([<LET>]){2,})|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": "\\b(([<LET>]){2,}).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": "((([<LET>]){2,})(.*)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<NUM>]).*",
                "prediction": "((.*[<LET>].*){2,}).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines containing a letter followed by a number 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "([<LET>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "[<LET>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "([<LET>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "(.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "([<LET>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "([<LET>]).*([<NUM>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": ".*([<LET>].*[<NUM>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "([<LET>]).*([<NUM>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "(([<LET>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "\\b([<LET>].*[<NUM>].*){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with words contain only a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "(\\b\\b)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "(\\b[<VOW>]\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "(\\b[<VOW>]\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "(\\b\\b)([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "(\\b\\b[<VOW>]\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "\\b([<VOW>])(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "(\\b.*[<VOW>]\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "(\\b([<VOW>])+\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "(\\b.*[<VOW>].*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<VOW>]\\b)(.*)",
                "prediction": "(\\b([<VOW>])*\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a small letter or character at least 1 time .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": "((.)|([<LOW>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": "(([<LOW>])|(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": "(((.)|([<LOW>]))+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": "((<M0>)|([<LOW>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": "((([<LOW>])|(.))+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": "(.*([<LOW>])|(.)+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": "\\b(([<LOW>])|(.))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": ".*(([<LOW>])|(.))+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": "(.*[<LOW>].*)|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.))+",
                "prediction": "(.)+(([<LOW>])|(.)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lines containing the string <M0> or the string <M1> or a lowercase letter preceding a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(.)+((<M0>)|(<M1>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(.*<M0>.*)|(([<LOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "((<M1>)|(<M0>)|([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(.*(<M0>)|(<M1>)|([<LOW>]).*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a character that follows a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": "(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": ".*..*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": "(..*[<LOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": "(.)+([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": "(.)+(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": "(..*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": "\\b(.)+([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": "(.)+((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": "(.)+(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<LOW>].*..*",
                "prediction": "(.*..*).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter occuring 2 or more times before a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "(([<LET>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "(([<LOW>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "([<LET>]).*((.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "\\b(([<LET>]){2,}).*(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "((([<LET>]){2,})|(.))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "\\b(([<LET>]){2,}).*(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "(([<LET>]){2,}).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "(\\b([<LET>]){2,}\\b).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "((([<LET>]){2,}).*(.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(.)+",
                "prediction": "((([<LET>]){2,})|(.)).*(.)+"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines with 2 or more of a letter before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": "([<LOW>].*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": "([<LET>].*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": "([<LET>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<LET>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": "([<LOW>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": ".*([<LET>].*[<LOW>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": "([<CAP>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": ".*([<LET>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": "(.*[<LET>].*).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<LET>].*[<LOW>].*){2,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which contain either a lower-case letter , a letter , or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*[<LOW>].*[<LET>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<LOW>])|([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*[<LOW>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<LOW>])|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<LET>])|([<LOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*(<M0>)|([<LOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": "\\b([<LOW>])|([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<LOW>])|(<M0>)|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital before <M0> zero times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "([<CAP>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "(([<CAP>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "([<CAP>]).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "(([<CAP>]).*(<M0>).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "(([<CAP>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "(.*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "\\b([<CAP>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "(([<CAP>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "([<CAP>]).*(\\b<M0>\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*<M0>.*)*).*",
                "prediction": "([<CAP>]).*(\\b(<M0>)*\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "items with <M0> preceding a vowel .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": ".*<M0>.*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "<M0>.*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>.*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*((.*)([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*([<VOW>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>.*[<VOW>].*).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 3 capital letters or characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": "\\b([<CAP>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": "([<CAP>]){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": "(([<CAP>])|(.)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": "([<CAP>])|((.){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": ".*([<CAP>])|(.){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": "(([<CAP>])|([<LET>])){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": ".*(([<CAP>])|(.)){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": "(.*[<CAP>].*)|((.){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)){3,}",
                "prediction": ".*(([<CAP>])|([<LET>])){3,}.*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a capital letter at least 2 times prior to a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "([<CAP>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "([<CAP>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "((.){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "(([<CAP>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": ".*(([<CAP>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "([<CAP>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "\\b(([<CAP>]){2,}).*([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "((.*[<CAP>].*){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "([<CAP>]).*((([<VOW>]){2,}).*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with string <M0> before ending with containing only string <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "(<M0>.*).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*(.*(.*)(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*((.*)((<M1>)+)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "((<M0>)+).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*(((.*)(<M1>))+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*((.*)(.*<M1>.*)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*(.*(.*)(<M1>).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*(((.*)(<M1>))*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*((.*)(<M1>.*<M1>.*)).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines with a number or capital letter before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": "(([<NUM>])|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": "([<NUM>]).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": "(([<CAP>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": "(([<NUM>])+)|([<CAP>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": ".*(([<NUM>])|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": "(([<NUM>])+)|(([<CAP>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": "(([<NUM>])|(([<CAP>]).*(<M0>).*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": "(([<NUM>])|(([<CAP>])+)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": "(([<NUM>].*[<CAP>].*)|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<CAP>])).*",
                "prediction": "(([<NUM>])|([<CAP>])|([<CAP>])).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter or 2 strings of <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "(([<CAP>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": ".*([<CAP>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "((<M0>)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": ".*(([<CAP>])|(<M0>)){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "\\b(([<CAP>])|(<M0>)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "(.*[<CAP>].*)|((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "((.*[<CAP>].*)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "(.*([<CAP>])|(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "([<CAP>]).*((<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)){2,}",
                "prediction": "(([<CAP>])|(.*<M0>.*)){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with only 3 or more of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": "(<M0>){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": ".*(<M0>){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": "(.*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": "((<M0>){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": "\\b(<M0>){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": "(<M0>).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": "(<M0>).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": "((<M0>){3,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": "((<M0>){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){3,}",
                "prediction": "((<M0>){3,})|(.*[<LET>].*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing only string <M0> or letter , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": "((<M0>)|([<LET>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": "(([<LET>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": "((.)|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": ".*(<M0>)|([<LET>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": ".*((<M0>)|([<LET>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": "(.*<M0>.*)|(([<LET>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": "(.*(<M0>)|([<LET>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": "(\\b(<M0>)|([<LET>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": "(((<M0>)|([<LET>])){2,}){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])){2,}",
                "prediction": "((.*<M0>.*)|([<LET>])){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a numeral preceding a vowel at least thrice .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "[<NUM>].*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "([<NUM>].*[<VOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "([<VOW>].*[<NUM>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "(([<NUM>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "([<NUM>]).*(([<VOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "([<VOW>].*[<VOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "(([<NUM>]){3,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "([<NUM>].*[<VOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "([<VOW>]).*(([<VOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<VOW>].*){3,}",
                "prediction": "(.*[<NUM>].*).*(([<VOW>]){3,}).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a number before string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "(<M0>).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "((<M0>)+).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "(<M0>.*[<NUM>].*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "(<M0>).*([<NUM>].*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "((<M0>)+).*([<NUM>].*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "((<M0>.*[<NUM>].*)+).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "((<M0>).*([<NUM>]).*)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "((<M0>).*([<NUM>]).*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "((<M0>).*([<NUM>]).*)|(.*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "((<M0>).*([<NUM>]).*)|((<M1>)+)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that do no end with a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": "(.*)([<CAP>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": "(.*)(([<CAP>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": "(.*)(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": "((.*)([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": "((.*)([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": "(.*)(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": ".*(.*)([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": "(.*)([<CAP>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": "(.*)(\\b([<CAP>])*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<CAP>])*.*)",
                "prediction": "(.*)((.*[<CAP>].*)*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "items with an upper case letter preceding a vowel preceding a character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "(.*[<CAP>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "([<CAP>].*[<VOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "([<CAP>].*[<VOW>].*).*(.)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "(([<CAP>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "([<CAP>]).*([<VOW>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "([<CAP>]).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "([<CAP>].*..*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "(([<CAP>]).*([<VOW>]).*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "([<CAP>]).*(([<VOW>]).*(.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*(.)+",
                "prediction": "(([<CAP>].*..*)+).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines that have the string <M0> before a capital letter followed by a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": "(<M0>).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": "(<M0>).*([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": "(<M0>.*[<CAP>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": ".*(<M0>).*([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": "(.*<M0>.*[<CAP>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": "((<M0>)*).*([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": "((<M0>)+).*([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": "((<M0>).*([<CAP>]).*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": "(.*<M0>.*).*([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<CAP>].*[<VOW>].*).*",
                "prediction": "(<M0>).*(([<CAP>]).*([<VOW>]).*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines with words and a character or string <M0> before a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": "(\\b..*<M0>.*)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": "\\b(.)|(<M0>.*[<CAP>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": "\\b(..*[<CAP>].*)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": "\\b(..*<M0>.*)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": ".*\\b(.)|(<M0>).*\\b[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": "(\\b..*<M0>.*\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": "(\\b(.)|(<M0>).*\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": "\\b(.)|((<M0>).*([<CAP>]).*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": "\\b((.)|(<M0>)).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*",
                "prediction": "(\\b(.)|(<M0>)\\b).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "items with a letter preceding <M0> at least 5 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": "[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": "([<LET>].*<M0>.*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": "([<LET>].*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": "([<LOW>].*<M0>.*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": "(([<LET>]).*(<M0>).*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": "([<LET>]).*((<M0>){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": "(([<LET>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": ".*([<LET>].*<M0>.*){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": "(([<LET>].*<M0>.*){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){5,}).*",
                "prediction": "(.*[<LET>].*).*((<M0>){5,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines that end with a lower-case letter or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": "(.*)([<LOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": "(.*)(([<LOW>])|([<VOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": "(.*)((([<LOW>])|([<VOW>]))+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": "((.*)([<LOW>]))|([<VOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": "(.*)((([<LOW>])+)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": "(.*)((.*[<LOW>].*)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": ".*(.*)(([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": "((.*)([<LOW>]))|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": "((.*)([<LOW>]))|(.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<VOW>])|([<LOW>]))",
                "prediction": "(.*)(.*([<LOW>])|([<VOW>]).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> or a lower-case letter , twice or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": "((<M0>)|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": "((<M0>)|(([<LOW>])){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": "(\\b(<M0>)|([<LOW>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": "(.*(<M0>)|([<LOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": "(([<LOW>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": "\\b((<M0>)|([<LOW>])){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": ".*((<M0>)|([<LOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": "((<M0>)|(.*[<LOW>].*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": "(((<M0>)|([<LOW>])){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((<M0>)|([<LOW>])){2,}.*",
                "prediction": "((<M0>)|(([<LOW>]){2,}))(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing <M0> after a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": ".*[<CAP>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": "[<CAP>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": "([<CAP>]).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": "\\b[<CAP>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": "(([<CAP>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": ".*([<CAP>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": "(.*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": "\\b([<CAP>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": "((.*)([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)+",
                "prediction": "([<CAP>]).*(.*<M0>.*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines which contain 3 or more times a lowercase lettere": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": "([<LOW>]){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": "([<NUM>]){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": "(([<LOW>])+){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": ".*([<LOW>]){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": "\\b([<LOW>]){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": "(.*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": "(([<LOW>])|([<CAP>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": "(([<LOW>]){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": ".*(([<LOW>]){3,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]){3,}",
                "prediction": "(([<LOW>]){3,}).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which have a capital letter or a lower-case letter , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": "(([<LET>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": "(([<LOW>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": "(([<CAP>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": "([<CAP>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": "(.*[<CAP>].*)|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": "\\b(([<CAP>])|([<LOW>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": "(.*([<CAP>])|([<LOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": "(\\b([<CAP>])|([<LOW>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){2,}",
                "prediction": ".*(([<CAP>])|([<LOW>])){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines starting with string <M0> at least once before string <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "(((<M0>)+)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "((<M0>.*<M1>.*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "(((<M0>)+)+).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "((<M0>)+).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "((<M0>)(.*)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "(((<M0>.*<M1>.*)+)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "(((<M0>)+)(.*)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "(((<M0>)(.*))+).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "(((<M0>)+).*(<M1>).*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)+)(.*)).*(<M1>).*",
                "prediction": "((<M0>)(.*)).*((<M1>)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with words and ending with the string <M0> or a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": "\\b(.*)(<M0>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": "\\b(.*)(<M0>.*[<CAP>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": "\\b((.*)(<M0>))|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": "\\b(.*)((<M0>)|([<CAP>]))\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": "(\\b(.*)(<M0>)\\b)|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": "(\\b(.*)(<M0>)\\b)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": "\\b((.*)([<CAP>]))|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": "\\b(.*)(([<CAP>])|(<M0>))\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": ".*\\b((.*)(<M0>))|([<CAP>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)((<M0>)|([<CAP>]))\\b",
                "prediction": "(\\b(.*)(<M0>)\\b).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with words and capital letter or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": "\\b([<CAP>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": "(\\b([<CAP>])|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": "\\b(([<CAP>])|([<VOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": "\\b([<CAP>])|([<VOW>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": "\\b.*([<CAP>])|([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": "\\b([<CAP>])|([<VOW>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": "\\b([<CAP>])|([<VOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": "(\\b([<CAP>])|([<VOW>])|([<LOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": ".*\\b([<CAP>])|([<VOW>])|([<LOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])|([<VOW>])\\b)+",
                "prediction": ".*\\b([<CAP>])|([<VOW>])|([<LOW>]).*\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a letter preceding a character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "([<LET>]).*((.)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "([<LET>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "(.*[<LET>].*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "([<LET>]).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "([<LET>].*..*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "([<LET>]).*(.*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "(([<LET>])|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "(([<LET>])(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "([<LET>]).*(..*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*..*)(.*)",
                "prediction": "(([<LET>])|([<CAP>])).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "lines with 5 or more numbers before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "([<NUM>]){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "([<NUM>].*..*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "(..*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "((.){5,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "([<NUM>]).*((.){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "(([<NUM>]){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "(([<NUM>]){5,}).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "((([<NUM>]){5,})|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "(([<NUM>].*..*){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){5,}).*",
                "prediction": "(([<NUM>].*..*){5,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with zero or more lower-case letters or characters .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": "(([<LOW>])|(.))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": "(([<LOW>])*)|(.)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": "((([<LOW>])*)|(.))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": "(([<LOW>])*)|((.)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": ".*(([<LOW>])*)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": "(([<LOW>])*)|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": "\\b(([<LOW>])*)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": "(([<LOW>])*)|(.*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": ".*(([<LOW>])|(.))*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LOW>]).*)*",
                "prediction": "\\b(([<LOW>])|(.))*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines that have 4 or more uppercase letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": "([<CAP>]){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": "([<LET>]){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": "(.*[<CAP>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": ".*([<LET>]){4,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": ".*([<CAP>]){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": "(.*[<LET>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": "(([<LET>])|([<CAP>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": "\\b([<CAP>]){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": "\\b([<LET>]){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>]){4,}.*",
                "prediction": "(([<CAP>])|([<LET>])){4,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character after a capital letter or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "(.)+(([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "(([<CAP>])|([<VOW>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "([<CAP>]).*((.)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "(([<CAP>])|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "((.)|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "(([<CAP>])|([<VOW>])).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "([<CAP>]).*(([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "(([<CAP>])|([<VOW>])).*(.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "([<CAP>]).*((.)|([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])).*(.)+",
                "prediction": "(([<CAP>])|([<VOW>])).*(.*..*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "items beginning with a character which precedes an upper case letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "(.)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "((.)(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "([<CAP>].*..*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "(..*[<CAP>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "((..*..*)(.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "((..*[<CAP>].*)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "((..*[<CAP>].*)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "(([<CAP>])(.*)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "((.)(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*([<CAP>]).*",
                "prediction": "((..*[<CAP>].*)(.*))(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "line with words containing a vowel or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "\\b([<VOW>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "\\b(.)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "\\b(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "\\b(([<VOW>])|([<LOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "\\b(.*[<VOW>].*)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "\\b([<LOW>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "(\\b([<VOW>])|([<LOW>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "\\b([<VOW>])|([<LOW>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "\\b([<VOW>])|([<LOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<LOW>])\\b",
                "prediction": "\\b([<VOW>])|([<LOW>])|([<LET>])\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "items with a numeral preceding an upper case letter preceding a character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "([<NUM>]).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "([<NUM>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "([<NUM>]).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "([<NUM>]).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "([<NUM>]).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "([<NUM>].*[<CAP>].*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "([<NUM>]).*([<CAP>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "(([<NUM>])(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "([<NUM>].*[<CAP>].*).*(.)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*(.)+",
                "prediction": "([<NUM>]).*(..*[<CAP>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a number or string <M0> or <M1> before string <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": ".*([<NUM>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "([<NUM>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(([<NUM>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(.*[<NUM>].*)|((<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(.*[<NUM>].*)|((<M0>).*(<M2>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(([<NUM>])|(<M0>)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": ".*(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(.*([<NUM>])|(<M0>)|(<M1>).*).*(<M2>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines ending in zero or more of a number before capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "((.*)(.*[<NUM>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "(.*)([<NUM>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "(.*)([<NUM>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "((.*)([<NUM>].*[<CAP>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "((.*)([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "(.*)(([<NUM>].*[<CAP>].*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "(.*(.*)([<NUM>].*[<CAP>].*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "((.*)(([<NUM>])*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "(((.*)([<NUM>]))*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*[<CAP>].*))*",
                "prediction": "((.*)([<NUM>])).*(([<CAP>])*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with either <M0> , a numeral , or <M1> in front of a character .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "(([<NUM>])|(<M0>)|(<M1>)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "((<M0>)|([<NUM>])|(.)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "(([<NUM>])|(<M0>)|(.)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "((<M1>)|(<M0>)|([<NUM>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "((<M0>)|(<M1>)|([<NUM>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "((<M0>)|([<NUM>])|(.)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|([<NUM>])|(<M0>)).*(.)+",
                "prediction": "(([<NUM>])|(<M0>)|(.)).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "a letter appear before the string <M0> and preceded by a vowel in the lines": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "(.*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "([<LET>]).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "([<LET>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "([<LET>]).*(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "([<LOW>]).*(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "([<VOW>]).*(<M0>.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "([<LOW>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "([<CAP>]).*(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "(([<LET>]).*(<M0>).*)|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(<M0>.*[<VOW>].*).*",
                "prediction": "(([<LET>]).*(<M0>).*)|([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending in 2 or more of a vowel or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "(.*)(([<VOW>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "((.*)([<VOW>]))|(([<LET>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "((.*)(([<VOW>])|([<LET>]))){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "(.*)((([<VOW>])|([<LET>])){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "(.*)(([<VOW>])|(([<LET>]){2,}))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "(.*)((([<VOW>]){2,})|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "((.*)([<LET>]))|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "(.*)((([<LET>])|([<VOW>])){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "((.*)([<LET>]))|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "(((.*)([<VOW>]))|([<LET>])){2,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which begin with vowels": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": "([<VOW>])(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": ".*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": "(([<VOW>])(.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": "(([<VOW>])(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": "(([<VOW>])*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": "(.*[<VOW>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": "(([<VOW>])(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": ".*([<VOW>])(.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": "(([<VOW>])|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>])(.*)",
                "prediction": "([<VOW>].*[<VOW>].*)(.*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> after a lower-case letter followed by a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "(([<LOW>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "([<LOW>].*[<NUM>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "([<LOW>]).*(<M0>.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "([<LOW>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "([<LOW>]).*([<NUM>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "(([<LOW>].*[<NUM>].*)+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "(([<LOW>]).*(<M0>).*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "(([<LOW>]).*([<NUM>]).*)|(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines which are containing the string <M0> or a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": "\\b(<M0>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": "(.*<M0>.*)|([<LOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": ".*(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": ".*([<LOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": ".*(<M0>)|([<LOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": "(.*<M0>.*)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": ".*(<M0>)|([<LOW>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": ".*(.*<M0>.*)|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": ".*(<M0>)|([<LOW>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>]).*",
                "prediction": ".*([<CAP>])|(<M0>)|([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing the string <M0> followed by 2 or more numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": ".*<M0>.*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": "(<M0>).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": "(<M0>.*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": "(<M0>).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": "(.*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": "\\b(<M0>.*[<NUM>].*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": ".*(<M0>.*[<NUM>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": "(<M0>).*((.*[<NUM>].*){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*[<NUM>].*){2,}.*",
                "prediction": "(.*<M0>.*).*(([<NUM>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with words with a character or string <M0> , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": "\\b(.)|(<M0>){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": "\\b(.)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": ".*\\b(.)|(<M0>)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": "\\b((.)|(<M0>)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": "(\\b..*<M0>.*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": "\\b(.)|((<M0>){2,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": "(\\b(<M0>)|(.)\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": "(\\b(.)|(<M0>)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": "\\b((<M0>)|(.)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)|(<M0>)\\b){2,}",
                "prediction": ".*\\b((.)|(<M0>)){2,}\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with words having a number , capital letter , or lower case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b(.)|([<NUM>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b([<NUM>])|([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b([<NUM>])|([<CAP>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": "(\\b([<NUM>])|([<CAP>])|([<LOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": ".*([<NUM>])|([<CAP>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b([<NUM>])|([<CAP>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b([<CAP>])|([<NUM>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": "(\\b([<NUM>])|([<CAP>])|([<LOW>])\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b(([<NUM>])|([<CAP>])|([<LOW>]))|([<LOW>])\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lower-case letter before <M0> or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": "[<LOW>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": ".*([<LOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": "(([<LOW>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": "([<LOW>].*<M0>.*)|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|([<VOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": "([<LOW>]).*((<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|(.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])).*",
                "prediction": ".*([<LOW>]).*((<M0>)|([<VOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines that have a character or the string <M0> occurring at least twice": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "((<M0>)|(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "((.)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "(.)|((<M0>){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "\\b((.)|(<M0>)){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "\\b((<M0>)|(.)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "(.)|((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "(\\b(.)|(<M0>)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "(\\b(<M0>)|(.)\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "(((.)|(<M0>)){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": ".*((.)|(<M0>)){2,}.*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines with a letter or string <M0> before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": "(([<LET>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": ".*([<LET>])|(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": "([<LET>]).*((<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": "((<M0>)|([<LET>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": "(([<CAP>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": ".*(([<LET>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": ".*([<LET>])|(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": "(([<LET>])|(<M0>)|([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|(<M0>.*[<VOW>].*)",
                "prediction": "(.*[<LET>].*)|((<M0>).*([<VOW>]).*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines containing a lower-case letter before a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": "([<LOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": ".*([<LOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": "(([<LOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": "(([<LOW>])+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": "(.*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": "([<LOW>]).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": "((.*[<LOW>].*)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": "((.*)([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": "([<LOW>].*[<CAP>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<CAP>]).*",
                "prediction": ".*([<LOW>].*[<CAP>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words ending with characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": "\\b(.*)(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": "\\b(.*)(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": "\\b.*(.*)(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": "\\b((.*)(.))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": "(\\b(.*)(.)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": "(\\b(.*)(.)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": "(\\b(.*)(.)\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": "(\\b.*(.*)(.)\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": "\\b(.*)(.*..*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(.)\\b",
                "prediction": ".*\\b(.*)(.)\\b.*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1
        ]
    },
    "lines with the <U> <M0> at least zero times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": "(<M0>)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": ".*(<M0>)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": "(.*<M0>.*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": "((<M0>)*).*(.)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": ".*(<M0>)*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": "(\\b(<M0>)*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": ".*\\b(<M0>)*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": "(<M0>).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)*.*",
                "prediction": "((<M0>)*)|(.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines ending in words with lower-case letter before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": "\\b(.*)([<LOW>].*<M0>.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": "((.*)([<LOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": "(.*)(\\b[<LOW>].*<M0>.*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": ".*(.*)([<LOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": "(.*)(\\b.*[<LOW>].*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": "((.*)(\\b[<LOW>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": ".*((.*)([<LOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": "\\b((.*)([<LOW>])).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>]).*(<M0>).*\\b)",
                "prediction": "(.*)(\\b([<LOW>].*<M0>.*)+\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines with 5 or more vowels": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": "([<VOW>]){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": "(.*[<VOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": "(([<VOW>]){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": "(([<VOW>])|([<LET>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": ".*([<VOW>]){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": "(([<VOW>])(.*)){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": "(([<VOW>])|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": "(([<VOW>])|([<CAP>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": "(([<VOW>])|([<LOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){5,}",
                "prediction": "(([<VOW>]){5,})|(.*[<CAP>].*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a letter before words that contain the string dog in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": ".*[<LET>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "(.*)([<LET>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b<M0>\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": ".*([<LET>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b.*<M0>\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b(<M0>)*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b(<M0>)+\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b.*<M0>.*\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with a lower case letter after the string <M0> , a number , or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "(.)+((<M0>)|([<NUM>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "(<M0>).*(([<NUM>])|(<M1>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "(<M0>).*([<LOW>])|([<NUM>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<NUM>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "(([<NUM>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "((<M1>)|([<NUM>])|(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<LOW>]).*",
                "prediction": "(<M0>).*(([<NUM>])|(<M1>)|([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines with words ending with vowels , or a zero": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b(.*)([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b(.*)(([<VOW>])|([<LET>]))\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "(\\b(.*)([<VOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b((.*)([<VOW>]))|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b(.*)(([<VOW>])|([<NUM>]))\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b((.*)([<VOW>]))|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b(.*)(([<VOW>])|([<LET>]))*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b((.*)([<VOW>]))|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b(.*)(([<VOW>])|([<CAP>]))*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b((.*)([<VOW>]))|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items terminating with a numeral preceding an upper case letter .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "(.*)([<NUM>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "(.*)([<NUM>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "([<NUM>].*[<CAP>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "(.*)(.*[<NUM>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "((.*)([<NUM>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "((.*)([<NUM>].*[<CAP>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "((.*)([<NUM>].*[<CAP>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "(([<NUM>])(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "([<NUM>]).*((.*)([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<NUM>].*[<CAP>].*)",
                "prediction": "((.*)([<NUM>])).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with the string <M0> or with only zero or more of string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "((<M0>)|((<M1>))*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "((<M0>)|(<M1>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "((<M0>)|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "((<M0>)|([<LOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "((<M0>)|((<M1>)*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "(((<M0>)|(<M1>))*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "(\\b(<M0>)|(<M1>)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "((<M0>)|(.*<M1>.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "((<M0>)|((<M1>)(.*)))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>))*",
                "prediction": "((<M0>)|((<M1>))*).*(<M1>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more of the string <M0> before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(<M0>).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "((<M0>){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(<M0>.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(.*<M0>.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": ".*(<M0>).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "((<M0>.*[<VOW>].*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(.*<M0>.*).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "(.*(<M0>).*([<VOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "((.*<M0>.*){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*){2,}",
                "prediction": "((<M0>.*[<VOW>].*){2,}).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character or letter at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": "((.)|([<LET>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": "((.)|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": "((.)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": "(.)|(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": "(.*(.)|([<LET>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": "(((.)|([<LET>]))+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": "(.)+(([<LET>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": ".*((.)|([<LET>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": "(.*..*)|(([<LET>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>]))*",
                "prediction": "(.)|(([<LET>])|([<CAP>]))+"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> or <M1> or lower-case letter before a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "(.*<M0>.*)|((<M1>)|([<LOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|(<M0>)|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|(<M0>)|([<LOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|((<M1>)|([<LOW>])).*([<NUM>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|(<M1>)|([<LOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<LOW>])|([<LOW>])).*([<NUM>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "items with <M0> at least 2 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": "(<M0>){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": ".*(<M0>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((<M0>){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((<M0>)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((<M0>){2,})|(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((<M0>)|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((<M0>){2,})|(([<CAP>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((.*<M0>.*)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((<M0>){2,})|((.*)([<LET>]))"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a vowel , lower-case letter , or character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>).*((.)|([<LOW>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>).*([<VOW>].*[<LOW>].*)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>).*(([<VOW>])|(.)|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>).*((.)|([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>).*(([<LOW>])|([<VOW>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>.*[<VOW>].*)|((.)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>.*[<VOW>].*).*(([<LOW>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>).*([<VOW>]).*(([<LOW>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<LOW>])|(.)).*",
                "prediction": "(<M0>).*(.*([<VOW>])|([<LOW>])|(.)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines wherein 5 or more times it contains words with an uppercase letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": "([<CAP>]){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": "(\\b[<CAP>]\\b){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": "\\b([<CAP>]){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": "\\b([<LET>]){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": "(.*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": "(\\b([<CAP>])*\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": ".*\\b([<CAP>]){5,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": "(\\b.*[<CAP>].*\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": "\\b.*([<CAP>]){5,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]){5,}\\b",
                "prediction": "(\\b([<CAP>]){5,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with a capital letter or character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": "\\b([<CAP>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": "\\b(.)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": "\\b(([<CAP>])|(.))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": "\\b([<CAP>])|(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": "\\b.*([<CAP>])|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": "(\\b([<CAP>])|(.)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": "\\b(.*[<CAP>].*)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": "\\b([<CAP>])|([<LET>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": ".*\\b([<CAP>])|(.)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])|(.))+\\b",
                "prediction": "\\b(.)|([<CAP>])|([<LET>])\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines beginning with a character or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": ".*(.)|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": "((.)(.*))|([<LOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": "((.)(.*))|(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": "((.)|([<LOW>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": "(((.)(.*))|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": "((.)(.*))|(([<LOW>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": "(((.)|([<LOW>]))(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": "\\b((.)(.*))|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": "((.)(.*))|(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>]))(.*)",
                "prediction": "((.)(.*))|(([<LOW>])(.*))"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines that have words and a character followed by a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": "\\b..*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": "\\b.*..*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": "(\\b..*[<VOW>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": "\\b(.)+([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": "\\b(..*[<VOW>].*)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": "(\\b..*[<VOW>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": "\\b(..*[<VOW>].*)*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": "\\b(..*[<VOW>].*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": "\\b(..*[<VOW>].*).*([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<VOW>].*\\b",
                "prediction": ".*\\b..*[<VOW>].*\\b.*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines containing at least 2 characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": ".*..*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": "(.*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": "(.){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": "([<LET>]){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": ".*(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": "((.){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": "\\b(.){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": "(.*)(.){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": "(..*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.){2,}.*",
                "prediction": "(..*[<LET>].*){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines containing the string <M0> 2 or more times before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "(.*<M0>.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "(<M0>){2,}.*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "(<M0>).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "((<M0>){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "(.*(<M0>){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": ".*((<M0>){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "((.*<M0>.*){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "(.*<M0>.*).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "(.*(<M0>){2,}.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "((<M0>.*[<LOW>].*){2,}).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before the string <M1> , capital letter , or character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "(<M0>).*(<M1>.*<M1>.*)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "(<M0>.*<M1>.*)|((.)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<CAP>])|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "(<M0>.*<M1>.*)|(([<CAP>])|(.))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "(<M0>).*((<M1>)|(.)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "(<M0>).*(<M1>).*((<M1>)|([<CAP>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|(.)).*",
                "prediction": "(<M0>.*<M1>.*)|((.)|([<CAP>])|(.))"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines starting in a vowel or with string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "(([<VOW>])|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "((([<VOW>])|(<M0>))(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "((([<VOW>])+)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "((([<VOW>])|(<M0>))+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "((([<VOW>])(.*))|(<M0>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "(([<VOW>])|((<M0>)(.*)))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "(([<VOW>])|(.*<M0>.*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "(([<VOW>])(.*))|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "(([<VOW>])(.*))|((<M0>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "((([<VOW>])(.*))|(<M0>))(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with lower-case letter followed by character before string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": "[<LOW>].*..*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": "([<LOW>]).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": ".*[<LOW>].*..*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": "([<LOW>]).*(..*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": "([<LOW>].*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": ".*([<LOW>].*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": "(([<LOW>].*..*)+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": "(([<LOW>].*..*).*(<M0>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*).*(<M0>).*",
                "prediction": "(([<LOW>].*..*).*(<M0>).*)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines with the string <M0> followed by either a character or a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>.*[<LET>].*)|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>.*..*)|([<LET>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>).*((.)|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>).*(([<LET>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>).*(([<CAP>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>.*..*)|(.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>.*..*)|(([<LET>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>).*(((.)|([<LET>]))*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "((<M0>).*(.)|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>).*(((.)|([<LET>]))+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with words ending with a capital or character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "(\\b(.*)(.)\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "\\b(.*)(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "(\\b(.*)(.)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "(\\b(.*)([<CAP>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "\\b(.*)(([<CAP>])|(.))\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "\\b(.*)(.*[<CAP>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "\\b((.*)([<CAP>]))|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "\\b((.*)(.))|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "(\\b(.*)(.)\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])|(.))\\b",
                "prediction": "\\b(.*)((.)|([<CAP>]))\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines that have a vowel followed by a capital letter , then the word <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "([<VOW>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "([<VOW>]).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(<M0>.*[<CAP>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(<M0>).*([<VOW>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(<M0>.*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<VOW>])*).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<VOW>]).*([<CAP>]).*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "([<VOW>].*<M0>.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(.*[<VOW>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<VOW>]).*([<CAP>]).*)|(<M0>.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words ending with the string <M0> before <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": "\\b.*(.*)(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": "\\b(.*)(<M0>.*<M1>.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": "(\\b.*(.*)(<M0>).*\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": "(\\b(.*)(<M0>.*<M1>.*)\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": ".*\\b((.*)(<M0>)).*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": "(\\b.*(<M0>).*(<M1>).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": "(\\b(.*)(<M0>)\\b).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": "\\b((.*)(<M0>)).*(<M1>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": ".*\\b((.*)(<M0>)).*(<M1>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>)).*(<M1>).*\\b",
                "prediction": "\\b(.*)((<M0>).*(<M1>).*)\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines containing the word dog , followed by a number and a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "\\b(<M0>).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(.*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": ".*(<M0>).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(<M0>).*([<NUM>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(<M0>.*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "((<M0>)|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(.*[<NUM>].*[<CAP>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(.*<M0>.*[<NUM>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> or <M1> or a number before a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "((<M0>)|(<M0>)|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "((<M0>)|(<M1>)|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "((<M0>)|(<M0>)|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "((<M1>)|(<M0>)|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*",
                "prediction": "((<M0>)|((<M1>)|([<NUM>])).*([<CAP>]).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines that contain words that contain only the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": "\\b<M0>"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": ".*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": "\\b<M0>\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": ".*\\b<M0>\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": "(\\b<M0>\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>\\b.*",
                "prediction": "(\\b<M0>\\b)*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that a number after no or more capital letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": ".*([<CAP>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": "(([<CAP>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": "([<CAP>]).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": "(([<CAP>])(.*)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": "([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": "([<CAP>]).*(([<NUM>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": "([<CAP>]).*(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": "(([<CAP>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": "(([<CAP>])|([<NUM>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<NUM>]).*",
                "prediction": "(.*[<CAP>].*).*(([<NUM>]){2,}).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 5 or more of a character before letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": "(..*[<LET>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": "(..*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": "(..*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": "((.)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": "(.)+(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": "(.)+(([<CAP>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": "((.)+([<LET>]).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": ".*(..*[<LET>].*){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": "((.){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>]){5,}).*",
                "prediction": "((..*[<LET>].*){5,})(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> with the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(<M0>).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": ".*<M0>.*<M1>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(<M0>.*<M1>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": ".*(<M0>).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(<M0>).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(<M0>).*((<M1>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(.*<M0>.*)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "((<M0>)+)|(.*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(<M0>).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "((<M0>)+).*(.*<M1>.*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with lower-case letter or character , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "(([<LOW>])|(.)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "((.)|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": ".*([<LOW>])|(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "(.*([<LOW>])|(.)+){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "([<LOW>]).*((.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": ".*(([<LOW>])|(.)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "(.*[<LOW>].*)|((.){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "\\b(([<LOW>])|(.)){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "((.*[<LOW>].*)|(.)){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines with a number before string <M0> then a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "([<NUM>]).*<M0>.*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "(.*[<NUM>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "([<NUM>]).*<M0>.*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "([<NUM>].*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "([<NUM>]).*(<M0>.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "(([<NUM>])+).*(<M0>.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "(([<NUM>].*<M0>.*)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "(([<NUM>])+).*(<M0>).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "(([<NUM>]).*(<M0>).*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with 5 or more numbers before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "([<NUM>].*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "((.){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "((<M0>){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "(.*[<NUM>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "(([<NUM>]){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "(.*[<NUM>].*).*(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "([<NUM>]).*(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "(([<NUM>]){5,}).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "(([<NUM>].*[<LOW>].*){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*([<LOW>]).*",
                "prediction": "((([<NUM>]){5,})|([<LOW>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing a character , followed by the string <M0> or 0 or more capital letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "((.)|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "(.)+((<M0>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "((.)*)|(([<CAP>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "(.)+(((<M0>)|([<CAP>]))*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "((.)+(<M0>).*)|(([<CAP>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "((.)*)|((<M0>).*([<CAP>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "((.)*)|(([<CAP>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "((.)|(<M0>)).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "((.)|(<M0>)).*(([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|([<CAP>]))*",
                "prediction": "((.)|(<M0>)|([<CAP>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with vowel before letter followed by a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "[<VOW>].*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "(([<VOW>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "([<VOW>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "([<VOW>]).*([<LET>].*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "([<VOW>].*[<LET>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "([<VOW>].*..*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "([<VOW>]).*(..*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "(([<VOW>]).*([<LET>]).*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "(([<VOW>])(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*..*).*",
                "prediction": "([<VOW>]).*(([<LET>]).*(.)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines with a vowel , <M0> , or <M1> occuring before <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(.*[<VOW>].*)|((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "((.)|([<VOW>])|(<M0>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(.*([<VOW>])|(<M0>)|(<M1>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": ".*(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(\\b([<VOW>])|(<M0>)|(<M1>)\\b).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "((([<VOW>])|(<M0>)|(<M1>))*).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "((([<VOW>])|(<M0>)|(<M1>))|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*",
                "prediction": "(.*([<VOW>])|(<M0>)|(<M1>).*).*(<M2>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a lowercase letter preceded by either the string <M0> or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "(([<LOW>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "(([<NUM>])|(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "([<LOW>]).*((<M0>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "(([<CAP>])|(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "((<M0>)(.*))|([<NUM>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "(([<LET>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "(([<LOW>])|(<M0>)|([<NUM>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LOW>]).*",
                "prediction": "((<M0>).*([<LOW>]).*)|(([<NUM>])+)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with ending with the string <M0> , occurring 3 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": "\\b(.*)(<M0>.*<M0>.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": "\\b((.*)(<M0>)){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": "\\b(.*)((<M0>){3,})\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": "(\\b(.*)(<M0>)\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": "\\b(.*)(<M0>.*[<LET>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": "\\b((.*)([<LET>])){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": "\\b(((.*)(<M0>)){3,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": ".*\\b((.*)(<M0>)){3,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": "(\\b((.*)(<M0>)){3,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){3,}",
                "prediction": "(\\b((.*)(<M0>)){3,}\\b){3,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing number before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": ".*[<NUM>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "([<NUM>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": ".*([<NUM>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(([<NUM>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(([<NUM>])*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(.*[<NUM>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "([<NUM>]).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "((.*)([<NUM>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": ".*(.*[<NUM>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "([<NUM>].*[<LOW>].*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines containing the string <M0> , 5 or more times or beginning with a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": "((<M0>)|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": "((.*<M0>.*){5,})|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": "(.*<M0>.*)|(([<VOW>]){5,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": "((<M0>){5,})|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": ".*((<M0>){5,})|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": "((<M0>){5,})|(.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": "((<M0>){5,})|((.*)([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": "(((<M0>){5,})|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": "((.*<M0>.*)|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,})|(([<VOW>])(.*))",
                "prediction": "(.*(<M0>){5,})|(([<VOW>]){5,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending in zero or more of the string <M0> or character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "(.*)((<M0>)|(.))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "((.*)((<M0>)|(.)))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "(.*)(((<M0>)|(.))*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "((.*)(<M0>))|((.)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "((.*)(<M0>))|((.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "(((.*)(<M0>))|(.))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "(.*)(((<M0>)|(.)))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "((.*)(<M0>))|((.){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "((.*)(<M0>))|((.){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(.)))*",
                "prediction": "((.*)(<M0>))|((.){4,})"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines ending with the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": "(.*)((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": "((.*)(<M0>))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": "(.*)(.*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": "((.*)(.*<M0>.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": "(.*)(\\b(<M0>)*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": "(.*)((.*<M0>.*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": "(.*)(\\b(<M0>)+\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": "((.*)(.*<M0>.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(<M0>))+.*",
                "prediction": "(.*)((.*<M0>.*)*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter or the strings <M0> before <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "((<M0>)|([<CAP>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": ".*(([<CAP>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>)).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>).*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(.*[<CAP>].*)|((<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<CAP>].*<M0>.*)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": ".*(([<CAP>])|(<M0>)|(<M1>)).*(<M1>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with the string <M0> and then a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": "(.*)(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": "((.*)(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": "(.*)(.*<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": "((.*)(<M0>.*[<VOW>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": "(.*)((<M0>.*[<VOW>].*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": ".*(.*)(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": "(.*)(\\b<M0>.*[<VOW>].*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": "(.*)((<M0>).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": "((.*)(<M0>)).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<VOW>]).*",
                "prediction": "((.*)(<M0>)).*(.*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines ending with a number before a vowel before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "((.*)([<NUM>])).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "((.*)([<NUM>])).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "((.*)([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "(((.*)([<NUM>])).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "((.*)([<NUM>])).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "((.*)([<NUM>])).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "(((.*)([<NUM>])).*([<VOW>]).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "((.*)([<NUM>].*[<VOW>].*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*([<VOW>].*<M0>.*).*",
                "prediction": "((.*)([<NUM>].*<M0>.*)).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with a lower-case letter or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": "(([<LOW>])|([<VOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": ".*([<LOW>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": "([<LOW>])|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": "(([<LOW>])|([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": "(.*[<LOW>].*)|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": "\\b([<LOW>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": "(.*[<LOW>].*)|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": "(.*[<LOW>].*)|(([<VOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": "(.*[<LOW>].*)|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<LOW>].*)|([<VOW>]))+",
                "prediction": "((.*[<LOW>].*)|([<VOW>]))+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines containing a character preceded by the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": "(<M0>).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": "(<M0>).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": ".*<M0>.*..*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": "\\b<M0>.*..*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": "(.*<M0>.*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": "\\b(<M0>).*(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": "(.*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": "(<M0>.*..*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": "(<M0>).*(..*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*..*",
                "prediction": "(..*<M0>.*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number after a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": ".*[<CAP>].*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": "[<CAP>].*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": "([<CAP>].*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": ".*([<CAP>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": "([<CAP>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": "\\b([<CAP>]).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": "\\b[<CAP>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": "(([<CAP>])+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": "(.*[<CAP>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<NUM>].*",
                "prediction": "([<CAP>].*[<NUM>].*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines ending with <M0> <U> by a vowel 3 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "((.*)(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "((.*)([<VOW>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "((.*)(.*[<VOW>].*)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "((.*)(<M0>.*[<VOW>].*)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "((.*)([<VOW>].*<M0>.*)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "((.*)([<VOW>])).*((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "(.*)(([<VOW>].*<M0>.*){3,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "(.*)((<M0>.*[<VOW>].*){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "((.*)(([<VOW>]){3,})).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<VOW>].*){3,})",
                "prediction": "((.*)(<M0>)).*(([<VOW>]){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with string <M0> before lower case , <M1> , or number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*((<M0>)|(<M1>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*((<M1>)|([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*((.)|([<NUM>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*((<M1>)|([<VOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|(<M1>)|([<NUM>])).*",
                "prediction": "(<M0>).*(<M1>).*(([<LOW>])|([<NUM>])|([<NUM>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a vowel or a character , 4 or more times in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "((.)|([<VOW>])){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "(([<VOW>])|(.)){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "(([<LOW>])|(.)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "(.)|(([<VOW>]){4,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "\\b(([<VOW>])|(.)){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "(\\b([<VOW>])|(.)\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "(.*([<VOW>])|(.){4,}).*("
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "(.*[<VOW>].*)|((.){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "((([<VOW>])|(.)){4,}){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){4,}",
                "prediction": "((([<VOW>])|(.)){4,})(.*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines starting in capital letter before string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "([<CAP>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "(([<CAP>].*<M0>.*)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "((.)([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "(([<CAP>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "((([<CAP>])(.*)).*(<M0>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "(([<CAP>].*<M0>.*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "((([<CAP>])(.*)).*(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "((.*[<CAP>].*)(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "((([<CAP>])(.*))+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*)(.*)",
                "prediction": "((([<CAP>])+)(.*)).*(<M0>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with words with only the string <M0> before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": "\\b.*<M0>.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": "\\b<M0>.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": "(\\b<M0>.*[<LOW>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": "(\\b<M0>.*[<LOW>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": "(\\b<M0>).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": "\\b(<M0>).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": "(\\b<M0>.*[<LOW>].*\\b).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": "(\\b<M0>\\b.*[<LOW>].*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": ".*\\b<M0>.*[<LOW>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*([<LOW>]).*\\b",
                "prediction": "(\\b<M0>\\b).*([<LOW>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with string <M0> before character or capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "(\\b<M0>.*..*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "(\\b<M0>.*..*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "\\b(<M0>).*(.)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "\\b(<M0>.*..*)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "(\\b<M0>.*..*\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "\\b(<M0>).*((.)+)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "(\\b(<M0>).*(.)|([<CAP>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "\\b(<M0>).*((.)|([<CAP>])).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "(\\b<M0>).*((.)|([<CAP>])).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.)|([<CAP>])).*\\b",
                "prediction": "(\\b(<M0>).*(.)+\\b).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with a number , vowel , or string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": "\\b([<NUM>])|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": ".*([<NUM>])|(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": ".*([<NUM>])|([<VOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": ".*(<M0>)|([<NUM>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": "\\b([<NUM>])|(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": "(.*[<NUM>].*)|(([<VOW>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": "([<NUM>]).*(([<NUM>])|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(<M0>).*",
                "prediction": "(.*[<NUM>]).*(([<NUM>])|([<VOW>])|(<M0>)).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with <M0> before <M1> once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "((<M0>.*<M1>.*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "((<M0>.*<M1>.*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "((<M0>)(.*)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "(((<M0>)(.*))+).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "(((<M0>.*<M1>.*)+)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "((<M0>)(.*)).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "(((<M0>)(.*)).*(<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "(((<M0>)(.*)).*(<M1>).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "((<M0>)(.*)).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)+).*",
                "prediction": "((<M0>)(.*)).*((.*)(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines ending with the string <M0> and followed by a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "(.*)(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "(.*)(.*<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "(.*)((<M0>.*[<VOW>].*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "((.*)(<M0>.*[<VOW>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "((.*)(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "(.*)(\\b<M0>.*[<VOW>].*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "((.*)(<M0>)).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "((.*)(<M0>)).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "((.*)(<M0>.*[<VOW>].*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(<M0>.*[<VOW>].*)\\b",
                "prediction": "((.*)(<M0>)).*([<VOW>].*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines where the string <M0> appears 2 or more times followed by either the string <M1> , a vowel , or a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>).*(<M1>)|([<VOW>])|([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<VOW>])|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>){2,})|((<M1>)|([<VOW>])|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<LET>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>)+).*((<M1>)|([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<LET>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<VOW>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<LET>])|([<VOW>])|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "prediction": "((<M0>).*(<M1>).*)|((<M1>)|([<VOW>])|([<LET>]))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which are starting with the string <M0> or ending with the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>)|(.*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>)+)|((.*)(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>)|((.*)(<M1>)))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>)+)|(((.*)(<M1>)))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>)(.*))|((.*)(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>)|((.*)(<M1>)))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>)(.*))|((.*)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>)(.*))|((.*)(.))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>)(.*))|(((.*)(<M1>)))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|((.*)(<M1>))",
                "prediction": "((<M0>).*((.*)(<M1>))|(.))*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a number or a vowel , at least 3 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "(([<NUM>])|([<VOW>])){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "(([<VOW>])|([<NUM>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "(([<CAP>])|([<VOW>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "([<NUM>]).*(([<NUM>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "(([<LET>])|([<NUM>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "(\\b([<NUM>])|([<VOW>])\\b){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "\\b(([<NUM>])|([<VOW>])){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "([<NUM>]).*(([<NUM>])|([<VOW>])){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "(.*([<NUM>])|([<VOW>]).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){3,}",
                "prediction": "((([<NUM>])|([<VOW>])){3,}).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines ending with <M0> 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": "((.*)(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": "(.*)((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": "((.*)([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": "((.*)([<CAP>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": "((.*)(.*<M0>.*)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": "(.*)((.*<M0>.*){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": ".*((.*)(<M0>)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": "(.*)(.*(<M0>){2,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)(<M0>).*){2,}",
                "prediction": "((.*)((<M0>){2,})){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines with words and capital letter or character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": "\\b([<CAP>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": "\\b(.)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": "\\b([<CAP>])|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": "\\b(([<CAP>])|(.))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": "\\b.*([<CAP>])|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": "(\\b([<CAP>])|(.)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": ".*\\b([<CAP>])|(.)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": "\\b(.*[<CAP>].*)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": ".*\\b([<CAP>])|(.)+\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|([<LET>])|(.)\\b",
                "prediction": "\\b(.)|([<CAP>])|([<LET>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines that start with 5 or more numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "([<NUM>])(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "(\\b[<NUM>]\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "([<NUM>]){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "(.*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "((.){5,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "(([<NUM>]){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "(([<NUM>])(.*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "([<NUM>].*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "(\\b([<NUM>])(.*)\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,})(.*)",
                "prediction": "(\\b([<NUM>]){5,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have 3 or more words that end in a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": "\\b(.*)([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": "\\b(.*)(.*[<LET>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": "(\\b(.*)([<LET>])\\b){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": "\\b((.*)([<LET>])){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": "(\\b.*[<LET>].*\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": ".*\\b((.*)([<LET>])).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": "\\b.*((.*)([<LET>])){3,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": "\\b(.*)(([<LET>]){3,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)([<LET>])){3,}\\b",
                "prediction": "\\b.*((.*)([<LET>])).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with words containing a letter preceding a character .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "\\b[<LET>].*..*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "\\b.*[<LET>].*..*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "\\b([<LET>]).*(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "\\b([<LET>]).*(.)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "\\b(.)+([<LET>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "\\b([<LET>].*..*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "(\\b[<LET>].*..*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "\\b([<LET>]).*(.).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "\\b(.*[<LET>].*).*(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(.)+\\b",
                "prediction": "(\\b[<LET>].*..*\\b).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines ending in words with a capital letter or character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": ".*(.*)(.)|([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": ".*(.*)([<CAP>])|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": "((.*)(.))|(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": "(.*)(\\b([<CAP>])|(.)\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": "(.*)(\\b(.)|([<CAP>])\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": ".*(.*)(([<CAP>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": "(.*)(\\b([<CAP>])(.*)\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": "\\b(.*)(([<CAP>])|(.))\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": "((.*)([<CAP>]))|(.*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>])|(.)\\b)",
                "prediction": ".*(.*)(\\b([<CAP>])|(.)\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines containing words having either a letter , a capital letter , or the string <M0> or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "(\\b([<LET>])|(<M0>)|(<M1>)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "\\b([<CAP>])|(<M0>)|(<M1>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "\\b([<LET>])|(<M0>)|(<M1>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "\\b([<LET>])|([<CAP>])|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "\\b([<LET>])|(<M0>)|([<CAP>])|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "(\\b([<LET>])|([<CAP>])|(<M0>)|(<M1>)\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "\\b([<LET>])|(([<CAP>])|(<M0>)|(<M1>))\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "\\b(([<LET>])|([<CAP>])|(<M1>))|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>])|([<CAP>])|(<M0>))|(<M1>)\\b",
                "prediction": "(\\b([<LET>])|([<CAP>])|(<M0>)|(<M1>)\\b)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines with 5 or more of a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": "([<LET>]){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": "(([<LET>])|([<LOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": ".*([<LET>]){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": "(.*[<LET>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": "(([<LET>])|([<CAP>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": "([<LET>]).*(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": "([<LET>]).*(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": "([<LET>]).*(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": "(([<LET>]){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<LET>])){5,}",
                "prediction": "([<LET>]).*(([<CAP>]){5,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number before a vowel or string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": "([<NUM>].*[<VOW>].*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": "([<NUM>]).*((.)|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": "([<NUM>]).*((<M0>)|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<NUM>]).*([<VOW>]).*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": "([<NUM>]).*((([<VOW>])|(<M0>)|(<M1>)))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": ".*([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": "([<NUM>]).*((([<VOW>])|(<M0>)|(<M1>))).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": "(.*[<NUM>].*).*(([<VOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<NUM>])+).*(([<VOW>])|(<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines with a vowel before the string <M0> or <M1> or a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": "(.)+(([<VOW>])|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": "([<VOW>].*<M0>.*)|((.)|(<M1>))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": "([<VOW>]).*((<M0>)|(<M1>)|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|((.)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|((<M1>)|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|((.)|(.))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(.)|(<M1>)).*",
                "prediction": ".*([<VOW>]).*((<M0>)|(<M1>)|(.)).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a vowel <M0> at least once .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "(([<VOW>])|(<M0>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "(.*[<VOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "((<M0>)+)|(([<VOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "(([<VOW>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "([<VOW>]).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "(<M0>).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "((<M0>)+)|(.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "((.*[<VOW>].*)|(<M0>))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "(([<VOW>])+).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)+).*",
                "prediction": "((<M0>)+).*(([<VOW>])+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a letter , number , then a vowel .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": "([<LET>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": ".*([<LET>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": ".*([<LET>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": "(.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": "([<LET>]).*([<NUM>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": "(.*[<LET>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": "([<LET>].*[<NUM>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": "([<LET>]).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": "(([<LET>])|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<NUM>].*[<VOW>].*)).*",
                "prediction": "(([<LET>])|([<NUM>])|([<VOW>])).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a character before the string <M0> a letter , or <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "(.)+((<M0>)|(<M1>)|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "(.)+((<M1>)|([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "(.)+((<M0>)|([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "(.)+(([<LET>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "((.)+(<M0>).*)|(([<LET>])|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "(..*<M0>.*).*(([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "((.)+(<M1>).*)|((<M0>)|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "(..*<M0>.*).*((<M1>)|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "((.)+).*((<M0>)|([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "((.)+(<M0>).*)|((<M1>)|([<LET>]))"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing a vowel followed by ending with a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": ".*[<VOW>].*.*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": ".*[<VOW>].*..*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": "([<VOW>]).*(.*(.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": "([<VOW>].*[<LOW>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": "([<VOW>]).*((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": "([<VOW>].*..*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": "([<VOW>].*.*).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": "(.*[<VOW>].*).*((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": "([<VOW>]).*(.*(.*)([<LOW>]).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<LOW>])).*",
                "prediction": "([<VOW>].*.*).*((.*)([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines with 5 or more small letter words": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "([<LOW>]){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "\\b([<LET>]){5,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "\\b([<LOW>]){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "(\\b[<LOW>]\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "(([<LOW>])|([<LET>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "(.*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "\\b(.*[<LOW>].*){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "(\\b([<LOW>])|([<LET>])\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "\\b(([<LOW>]){5,})|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]){5,}\\b",
                "prediction": "(\\b([<LOW>]){5,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with either the string <M0> , a capital letter , or a letter in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": "\\b(<M0>)|([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": "\\b(<M0>)|([<CAP>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": "\\b([<CAP>])|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": "\\b(<M0>)|([<CAP>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": "\\b(.)|([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": "\\b([<LOW>])|(<M0>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": ".*\\b(<M0>)|([<CAP>])|([<LET>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": "\\b.*(<M0>)|([<CAP>])|([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|([<LET>])\\b",
                "prediction": "\\b.*(<M0>)|([<CAP>])|([<CAP>]).*\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a letter followed by a character or a number at least once in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "(([<LET>].*..*)|([<NUM>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "(([<LET>]).*(.)|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "(([<LET>])|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "(([<CAP>]).*(.)|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "(([<LET>]).*((.)+)|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "(([<LET>]).*(.)|(([<NUM>])+))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "(([<LET>]).*(.)|(.*[<NUM>].*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "(([<LET>])|(.)).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "(([<LET>])|((.)+)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*..*)|([<NUM>]))+",
                "prediction": "([<LET>]).*(((.)|([<NUM>]))+).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with either string <M0> , vowel , or string <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": "\\b([<VOW>])|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": "\\b(<M0>)|(<M1>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": "\\b(<M0>)|([<VOW>])|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": "\\b(.)|(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": "\\b(<M1>)|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": "\\b(<M1>)|(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": "(\\b(<M0>)|([<VOW>])|(<M1>)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": "(\\b(<M0>)|([<VOW>])|(<M1>)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": ".*\\b(<M0>)|([<VOW>])|(<M1>)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<VOW>])|(<M1>)\\b",
                "prediction": "\\b.*(<M0>)|([<VOW>])|(<M1>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with either a letter , a capital , or vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|([<VOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": "\\b([<VOW>])|([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": "\\b([<CAP>])|([<VOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": "\\b([<CAP>])|([<LET>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": "\\b([<CAP>])|([<VOW>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": "(\\b([<LET>])|([<CAP>])|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": "\\b([<CAP>])|([<VOW>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": ".*\\b([<LET>])|([<CAP>])|([<VOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<VOW>])\\b",
                "prediction": "\\b.*([<LET>])|([<CAP>])|([<VOW>]).*\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with 5 or more capital letters before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": "([<CAP>].*[<LET>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": "(([<CAP>]){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": "((.){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": ".*(([<CAP>]){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": "([<CAP>]).*(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": "(.*[<CAP>].*).*(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": "(([<CAP>]){5,}).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": "((([<CAP>]){5,})|([<LET>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": "(([<CAP>].*[<LET>].*){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LET>]).*",
                "prediction": "((([<CAP>]){5,})|([<CAP>])).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words and string <M0> or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "\\b([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "\\b(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "\\b((<M0>)+)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "(\\b(<M0>)|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "\\b((<M0>)|([<VOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "(\\b(<M0>)|([<VOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "\\b.*(<M0>)|([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": ".*\\b(<M0>)|([<VOW>]).*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": ".*\\b(<M0>)|([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "\\b(.*<M0>.*)|([<VOW>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character before vowel or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": "(.)+(([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": "((.)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": "(..*[<VOW>].*)|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": "((.)+([<VOW>]).*)|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": "(..*[<VOW>].*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": "((.)+)|([<LOW>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": "((..*[<VOW>].*)|([<LOW>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": ".*(.)+(([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": "((.)+([<VOW>]).*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|([<LOW>])).*",
                "prediction": "((.)+).*(([<VOW>])|([<LOW>])).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines containing at least 1 instance <U> the string <M0> , or the string <M1> preceding the string <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "((<M2>)+)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "((<M2>)+)|((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "((<M0>)+)|(<M1>.*<M2>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "(\\b(<M0>)|(<M1>)|(<M1>)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "\\b((<M0>)|(<M1>)).*(<M2>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "(((<M0>)+)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "((<M0>)+)|((<M1>).*(<M2>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "(\\b(<M0>)|(<M1>)\\b).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "\\b((<M0>)|(<M1>)|(<M1>)).*(<M2>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "(\\b(<M0>)|(<M1>)|(<M2>)\\b).*(<M2>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing a capital letter and followed by 2 or more numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "([<CAP>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "([<CAP>].*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "([<CAP>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "([<CAP>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": ".*([<CAP>].*[<NUM>].*){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "\\b([<CAP>].*[<NUM>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "(([<CAP>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "(.*[<CAP>].*).*(([<NUM>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "line where 1 of 3 <U> comes after the string <U> the string <M1> , a capital letter , or the string <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": ".*(<M1>)|([<CAP>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "(.)+((<M1>)|([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": ".*(<M0>)|([<CAP>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "(.)+((<M0>)|([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "((<M1>)|([<CAP>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "((<M0>)|([<CAP>])|(<M2>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "((<M0>)|([<CAP>])|([<NUM>])).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with string <M0> followed by number , zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "((<M0>.*[<NUM>].*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "(<M0>.*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "((<M0>.*[<NUM>].*)*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "(\\b<M0>.*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "(([<NUM>].*<M0>.*)*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "((<M0>.*[<NUM>].*)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "(\\b(<M0>).*([<NUM>]).*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "(((<M0>.*[<NUM>].*)*)(.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "(\\b(<M0>.*[<NUM>].*)*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<NUM>].*)*)(.*)",
                "prediction": "((<M0>)(.*)).*(([<NUM>])*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with a letter before a number , or at least 1 <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "([<LET>]).*(([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "([<LET>]).*(([<NUM>])|(<M0>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "([<LET>]).*(([<NUM>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "(([<LET>])+).*(([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "(([<LET>])+).*(([<NUM>])|(<M0>))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "(([<LET>]).*([<NUM>]).*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "([<LET>]).*(([<NUM>])|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "([<LET>]).*(([<NUM>])|([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "(([<LET>])+).*(([<NUM>])|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LET>]).*([<NUM>]).*)|(<M0>))+",
                "prediction": "([<LET>]).*((([<NUM>])|([<NUM>])|(<M0>))+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a character or the string <M0> at least zero times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": "((<M0>)|(.))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": "((.)|(<M0>))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": "(((.)|(<M0>))*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": "(.)|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": "(\\b(.)|(<M0>)\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": "(.*..*)|((<M0>)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": "(.*(.)|(<M0>).*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": "\\b((.)|(<M0>))*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": ".*((.)|(<M0>))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>))*",
                "prediction": "(.*(.)|(<M0>)).*(<M1>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lines with lower-case letter before either character , vowel , or string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": "[<LOW>]).*((.)|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": "([<LOW>]).*(..*[<VOW>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": "([<LOW>]).*(.)|(([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": "([<LOW>]).*(([<VOW>])|(.)|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": "([<LOW>]).*((.)|(<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": ".*([<LOW>]).*(.)|([<VOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": ".*([<LOW>]).*((.)|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": "(([<LOW>]).*(.)|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.)|([<VOW>])|(<M0>)).*",
                "prediction": "(.*[<LOW>].*).*((.)|([<VOW>])|(<M0>)).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have at least 3 combinations of a character followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": "((.)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": "(..*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": "((.){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": "(.)+(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": "(\\b..*[<LOW>].*\\b){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": "\\b(..*[<LOW>].*){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": "((..*[<LOW>].*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": "((..*[<LOW>].*){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": ".*(..*[<LOW>].*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*){3,}",
                "prediction": "((..*[<LOW>].*){3,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines that have words with the word <M0> preceding an ending with a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "\\b<M0>.*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "\\b<M0>.*.*.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "\\b<M0>.*(.*)([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "\\b(<M0>.*.*).*(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "\\b(<M0>.*[<LOW>].*)(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "(\\b<M0>.*[<LOW>].*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "(\\b<M0>.*.*\\b).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "\\b(<M0>.*.*).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "\\b(<M0>).*((.*)([<LOW>])).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>).*((.*)([<LOW>])).*\\b",
                "prediction": "\\b<M0>.*..*(.*)([<LOW>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines containing a lowercase letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": ".*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": "([<LOW>])+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": ".*[<LET>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": "(.*[<LOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": ".*([<LOW>])+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": "\\b([<LOW>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": "\\b([<LOW>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": "(.*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": "(.*[<LET>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LOW>]).*",
                "prediction": ".*([<LOW>])|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing words with letter followed by string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": "\\b.*[<LET>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": "\\b[<LET>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": "\\b([<LET>].*<M0>.*)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": ".*\\b[<LET>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": ".*\\b[<LET>]\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": "\\b([<LET>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": "\\b([<LET>].*<M0>.*)(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": ".*\\b([<LET>]).*(<M0>).*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": "(\\b[<LET>].*<M0>.*\\b).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>].*<M0>.*\\b.*",
                "prediction": "(\\b[<LET>].*<M0>.*\\b).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines having a character , lower-case , or <M0> before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(.)|(([<LOW>])|(<M0>)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(.)|((<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(.)+((<M0>)|([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(.)|((<M0>)|([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "((.)|(<M0>)|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "((.)|(<M0>)|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "((.)|(<M0>)|([<LOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "((.)|(<M0>)|([<NUM>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(.)|((<M0>)|([<LOW>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "a vowel must come before a lower case letter and must have string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>].*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>].*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>]).*([<LOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(([<VOW>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(([<VOW>]).*([<LOW>]).*)|(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(([<VOW>]){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "(([<VOW>]).*([<LOW>]).*)|(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with 3 or more words with a character .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": "((.*)(.)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": "(.*)(\\b(.)+\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": "(.*)(\\b(.)*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": "((.*)(.)){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": ".*(.*)(.){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": "(.*)(\\b..*..*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": "(.*)(\\b(.){3,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": "((.*)(\\b)){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": "(\\b(.*)(.)\\b){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){3,}\\b)",
                "prediction": "\\b((.*)(.)){3,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines containing words with the string <M0> followed by a vowel in it": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": "\\b[<LET>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": "\\b<M0>.*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": "\\b.*<M0>.*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": "\\b[<VOW>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": "(\\b<M0>.*[<VOW>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": "(\\b<M0>.*[<VOW>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": "\\b(<M0>).*([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": ".*\\b<M0>.*[<VOW>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": "\\b(<M0>.*[<VOW>].*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b<M0>.*[<VOW>].*\\b.*",
                "prediction": "(\\b<M0>.*[<VOW>].*\\b).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing 1 lower-case letter before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": "([<LOW>].*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": ".*[<LOW>].*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": "([<LOW>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": ".*([<LOW>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": "(([<LOW>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": ".*([<LOW>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": "([<LOW>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": "([<LOW>]).*((.*)([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": "(.*[<LOW>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>]).*([<VOW>]).*)+",
                "prediction": "([<LOW>]).*(.*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines that end with the string <M0> followed by the string <M1> , at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)(<M0>.*<M1>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)((<M0>.*<M1>.*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "((.*)(<M0>.*<M1>.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)((<M1>.*<M1>.*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)((<M1>.*<M0>.*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "((.*)(<M1>.*<M0>.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)(.*(<M0>.*<M1>.*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)(((<M0>.*<M1>.*){2,}))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)(((<M0>.*<M1>.*){2,}))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)(\\b(<M0>.*<M1>.*){2,}\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which have a capital letter before ending with a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": "[<CAP>].*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": "([<CAP>].*[<LET>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": "([<CAP>]).*((.*)([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": "([<CAP>]).*(.*(.*)([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": "(.*[<CAP>].*).*((.*)([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": ".*([<CAP>]).*((.*)([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": "([<CAP>].*[<LET>].*).*(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": "([<CAP>]).*((.*)(.*[<LET>].*)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": "(([<CAP>])+).*((.*)([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((.*)([<LET>])).*",
                "prediction": "([<CAP>].*[<LET>].*).*(.*)([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines starting with zero or more of a lower-case letter with a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>])(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>].*[<LET>].*)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "((([<LOW>])*)|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>].*[<LET>].*)*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>].*[<LOW>].*)*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>])(.*))|(([<LET>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>])(.*)).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "((([<LOW>])(.*))*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "((([<LOW>])*)(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>])(.*)).*(([<CAP>])*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines that have a combination of a lower-case letter followed by the word <M0> , then the word <M1> , 1 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "([<LOW>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*[<LOW>].*<M0>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "([<LOW>].*<M0>.*).*((<M1>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "(([<LOW>].*<M0>.*)|(<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*([<LOW>].*<M0>.*)|(<M1>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*[<LOW>].*<M0>.*).*((<M1>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*([<LOW>].*<M0>.*)+).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more of a lower-case letter before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": "([<LOW>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": ".*([<LOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": "(([<LOW>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": "([<LOW>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": ".*(([<LOW>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": "(.*[<LOW>].*).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": "(.*[<LOW>].*).*(<M0>){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": ".*([<LOW>].*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": "(([<LOW>].*<M0>.*){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*<M0>.*){2,}",
                "prediction": "\\b(([<LOW>]){2,}).*(<M0>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with words a lower-case letter before containing a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": "\\b[<LOW>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": "\\b.*[<LOW>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": "(\\b[<LOW>].*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": "\\b([<LOW>].*[<NUM>].*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": "\\b([<LOW>]).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": "(\\b([<LOW>]).*([<NUM>]).*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": "(\\b[<LOW>].*[<NUM>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": ".*\\b[<LOW>].*[<NUM>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": "(\\b[<LOW>].*[<NUM>].*\\b).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b",
                "prediction": "\\b([<LOW>]).*(.*[<NUM>].*).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines that have either a letter or a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": ".*([<CAP>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": "\\b([<LET>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": "\\b([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": ".*([<LET>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": "(.*[<LET>].*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": ".*([<LET>])|([<CAP>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": ".*([<LET>])|([<CAP>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": ".*([<CAP>])|([<LET>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": ".*([<CAP>])|([<LOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<CAP>]).*",
                "prediction": "\\b([<CAP>])|([<LET>])|([<LOW>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have a letter after a character at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(..*[<LET>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(.)+((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(.)+(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(.)+(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "((.)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(.)+((.*)([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(.)+(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(..*[<LET>].*).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "([<LET>]).*((.)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with letter before string <M0> , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": "[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": "([<LET>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": ".*([<LET>]).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": "([<LET>]).*(<M0>){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": "([<LET>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": "(([<LET>]).*(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": ".*([<LET>]).*(<M0>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": "(([<LET>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": "(.*[<LET>].*).*(<M0>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){2,}).*",
                "prediction": "(([<LET>]).*(<M0>).*)|((<M1>){2,})"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with vowel or character , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "((.)|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(([<VOW>])|(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "\\b(([<VOW>])|(.)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(.*[<VOW>].*)|((.){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(.*([<VOW>])|(.)+){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(\\b([<VOW>])|(.)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(([<VOW>])(.*))|(.){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": ".*(([<VOW>])|(.)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "((([<VOW>])|(.)){2,}){2,}"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words with either a letter , a capital letter , or a number in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": "\\b(.)|([<LET>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": "\\b(.)|([<CAP>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": "\\b([<CAP>])|([<LET>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": "\\b([<CAP>])|([<CAP>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": "\\b([<LET>])|([<NUM>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": "\\b([<CAP>])|([<NUM>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": "(\\b([<LET>])|([<CAP>])|([<NUM>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": "\\b.*([<LET>])|([<CAP>])|([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|([<NUM>])\\b",
                "prediction": ".*\\b([<LET>])|([<CAP>])|([<NUM>])\\b.*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "before a character your lines should have a vowel , a letter , or <M0> string": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "(.*([<VOW>])|([<LET>])|(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "([<VOW>]).*(([<LET>])|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "(([<LET>])|([<VOW>])|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "((<M0>)|([<VOW>])|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "(.)+(([<VOW>])|([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "(<M0>).*(([<VOW>])|([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "(.)+(([<LET>])|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "([<VOW>]).*(([<LET>])|(<M0>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])|(<M0>)).*(.)+",
                "prediction": "([<VOW>]).*(([<VOW>])|([<LET>])|(<M0>)).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and a lower-case letter , number , or a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": "\\b([<LOW>])|([<NUM>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": "\\b(.*[<LOW>].*)|(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": "\\b([<LOW>])|(.)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": "\\b(.)|([<LOW>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": "\\b.*([<LOW>])|([<NUM>])|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": "\\b([<LOW>])|(([<NUM>])|(.))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": "\\b(([<LOW>])|([<NUM>])|(.))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": "(\\b([<LOW>])|([<NUM>])|(.)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": "\\b(.)+([<LOW>])|([<NUM>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<NUM>])|(.)\\b",
                "prediction": ".*\\b([<LOW>])|([<NUM>])|(.)\\b.*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with zero or more of a lower-case letter or string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": "((.*[<LOW>].*)|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": "(.*[<LOW>].*)|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": "(.*([<LOW>])|(<M0>)|(<M1>).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": "((([<LOW>])|(<M0>)|(<M1>)))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LOW>])|(<M0>)|(<M1>).*)*",
                "prediction": ".*(([<LOW>])|(<M0>)|(<M1>)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with vowel before capital letter or letter at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "([<VOW>]).*(([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "(([<VOW>])+).*(([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "([<VOW>].*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "(([<VOW>]).*([<CAP>]).*)|(([<LET>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "(([<VOW>]).*([<CAP>]).*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "([<VOW>]).*((([<CAP>])+)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "([<VOW>]).*((([<CAP>])|([<LET>]))+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "([<VOW>]).*((([<CAP>])|([<CAP>]))+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "(([<VOW>])(.*)).*(([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "(([<VOW>]).*(([<CAP>])+)|([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character , vowel , or string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": "(.*..*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": ".*(.)|([<VOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": "\\b(.)|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": ".*(.)|(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": "(.)|(([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": ".*([<VOW>])|(.)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": "(.)+((.)|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": ".*((.)|([<VOW>])|(<M0>))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": "((.)|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<VOW>])|(<M0>).*",
                "prediction": "(.)+(([<VOW>])|(<M0>)|(<M0>)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines that have a vowel before the <U> <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "([<VOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "([<VOW>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "([<VOW>]).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "([<VOW>]).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "([<VOW>]).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "(([<VOW>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "(.*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "([<VOW>]).*(\\b<M0>\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "([<VOW>]).*(\\b(<M0>)+\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*).*(<M0>).*",
                "prediction": "([<VOW>]).*(\\b.*<M0>.*\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words that contain number , zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "(\\b[<NUM>]\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "\\b([<NUM>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "(\\b([<NUM>])*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "\\b(([<NUM>])*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "(\\b.*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": ".*\\b([<NUM>])*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "\\b.*([<NUM>])*.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "\\b(.*[<NUM>].*)*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with a letter or number , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": "(([<LET>])|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": "(([<NUM>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": ".*([<LET>])|([<NUM>]){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": "\\b(([<LET>])|([<NUM>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": ".*(([<LET>])|([<NUM>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": "(\\b([<LET>])|([<NUM>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": "(.*([<LET>])|([<NUM>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": "((([<LET>])|([<NUM>])){2,}){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": "(.*[<LET>].*)|(([<NUM>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){2,}",
                "prediction": "((([<LET>])|([<NUM>])){2,})(.*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with number at least once or ending with string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": "([<NUM>])+)|((.*)(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": "([<NUM>])+)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": "(([<NUM>])+)|((.*)(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": "(.*[<NUM>].*)|((.*)(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": "([<NUM>])+)|(((.*)(<M0>))+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": "(([<NUM>])+)|(((.*)(<M0>)))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": "(([<NUM>])+)|(.*(.*)(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": "(([<NUM>])+)|(((.*)(<M0>)))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": "(([<NUM>])+)|((.*)(.*<M0>.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])+)|((.*)(<M0>))",
                "prediction": ".*(([<NUM>])+)|((.*)(<M0>)).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines with the string <M0> or <M1> or a number before a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|(<M1>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<VOW>])|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|(<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M1>)|(<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(.*<M0>.*)|((<M1>)|([<NUM>]).*[<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|((<M1>)|([<NUM>])).*([<VOW>]).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines ending in a character before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "(.*)(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "(.*)(.*..*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "(.*)(..*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "((.*)(..*[<LOW>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "((.*)(.)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "(.*)((.)+([<LOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "((.*)(.*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "(.*)(.*(.)+([<LOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "((.*)(.*..*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LOW>])+).*",
                "prediction": "(.*)((.)+).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines with 4 vowels or more followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "([<LET>].*[<LOW>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "([<VOW>].*[<LOW>].*){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "(([<VOW>]){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "(([<LET>]){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "(([<LOW>]){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "(([<NUM>]){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "(([<VOW>].*[<LOW>].*){4,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "(([<VOW>].*[<LOW>].*){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LOW>]).*",
                "prediction": "(([<VOW>].*[<LOW>].*){4,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a letter after a vowel at least twice": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "([<VOW>].*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "([<VOW>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "([<VOW>]).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "(.*[<VOW>].*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "([<VOW>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "(([<VOW>]){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "([<VOW>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "([<LET>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "([<VOW>]).*([<LET>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LET>]){2,}).*",
                "prediction": "(.*[<VOW>].*).*(([<LET>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing either string <M0> , lower-case letter , or a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": ".*(<M0>)|([<LOW>])|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": ".*([<LOW>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": ".*(.)|([<LOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": ".*(.)|(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": "\\b(<M0>)|([<LOW>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": ".*(<M0>)|([<LOW>])|(.).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": ".*(.)|([<LOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": ".*(<M0>)|(.)|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": ".*.*(<M0>)|([<LOW>])|(.)+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<LOW>])|(.)+",
                "prediction": ".*((<M0>)|([<LOW>])|(.)).*(.)+"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines starting with string <M0> or a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "(([<LET>])|(<M0>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "((<M0>)|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "(((<M0>)(.*))|([<LET>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "(((<M0>)|([<LET>]))(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "(((<M0>)|([<LET>]))+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "(((<M0>)+)|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "((<M0>)(.*))|(([<LET>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "((<M0>)|(([<LET>])(.*)))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "((<M0>)(.*))|(([<LET>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>]))(.*)",
                "prediction": "((<M0>)|(.*[<LET>].*))(.*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines with words which contain the string <M0> , a capital letter , or a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": "\\b(<M0>)|([<CAP>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": "\\b([<CAP>])|(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": "\\b(<M0>)|(.)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": "\\b(.)|([<CAP>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": "\\b(<M1>)|([<CAP>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": "\\b([<CAP>])|(.)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": "\\b.*(<M0>)|([<CAP>])|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": "\\b.*(<M0>)|([<CAP>])|(.)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])|(.)\\b",
                "prediction": ".*\\b(<M0>)|([<CAP>])|(.)\\b.*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a vowel with a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "([<VOW>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": ".*([<VOW>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "(.*[<VOW>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "(([<VOW>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "(.*[<VOW>].*)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "(.*[<VOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "([<VOW>]).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "(([<VOW>])|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "(([<VOW>])(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "((.*)(.)).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel , the string <M0> , and a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "([<VOW>].*<M0>.*)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": ".*([<VOW>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "\\b([<VOW>])|(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "([<VOW>]).*(([<VOW>])|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(.)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "([<VOW>]).*((<M0>)|([<LET>])|(.)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that contain a lower-case letter followed by a character , zero times or more": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "([<LOW>].*..*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "(.*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "(([<LOW>])*).*(.)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "(.*[<LOW>].*.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "(([<LOW>].*..*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "([<LOW>]).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": ".*([<LOW>].*..*)*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "(.*[<LOW>].*).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "(([<LOW>]).*(.)*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "line with letters starting with the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(.*[<LET>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "([<LET>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(([<LET>])(.*))|(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(([<LET>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(([<CAP>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "([<LET>]).*((<M0>)(.*)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(([<LET>])(.*))|((<M0>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "\\b((<M0>)(.*))|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "((<M0>)(.*))|(([<LET>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(([<VOW>])(.*)).*((<M0>)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with words containing just <M0> at least 5 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b([<LET>]){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b(<M0>){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b([<LOW>]){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b(.*<M0>.*){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b((.*)(<M0>)){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b(.*[<LET>].*){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b(([<LET>]){5,})|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "(\\b([<LET>])|(<M0>)\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b((<M0>){5,})|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b((<M0>){5,})|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with words that contain 5 or more of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": ".*\\b<M0>\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": "(\\b<M0>\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": "\\b(<M0>){5,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": "(\\b.*<M0>.*\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": ".*\\b(<M0>){5,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": "\\b(.*<M0>.*){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": "\\b.*(<M0>){5,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": "\\b((<M0>){5,})|(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*<M0>.*\\b){5,}",
                "prediction": "(\\b(<M0>){5,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing character or vowel , zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": "((.)|([<VOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": "(.)|(([<VOW>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": "(.)|(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": ".*(.)|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": "(.*..*)|(([<VOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": "(.*..*)|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": "((.*..*)|([<VOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": "(.*(.)|([<VOW>]).*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": ".*((.)|([<VOW>]))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(([<VOW>])*)",
                "prediction": "(\\b(.)|([<VOW>])\\b)*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines with 5 or more of a character before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": "(..*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": "(..*[<LET>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": "((.){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": "(.)+(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": "((.)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": "((.)+([<LET>]).*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": "((..*[<LET>].*){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": ".*((.){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": "((..*[<LET>].*){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*){5,}",
                "prediction": ".*(..*[<LET>].*){5,}.*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines that end with only a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": ".*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": "(.*)(.)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": "(.*)(\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": "(.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": "((.*)(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": "((.*)(.))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": "((.*)(.))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": "(.*)(.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": "(.*)(\\b.*..*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b.\\b)",
                "prediction": "(.*)(\\b.*..*\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel or <M0> before a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "((<M0>)|([<VOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(([<VOW>])|(<M0>).*([<NUM>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(.*[<VOW>].*)|(<M0>.*[<NUM>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": ".*(([<VOW>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<NUM>]).*",
                "prediction": "(([<VOW>])|(<M0>)|([<NUM>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with a lower-case letter before words starting with a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": "([<LOW>].*[<CAP>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": "(.*)([<LOW>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": "([<LOW>].*[<CAP>].*)(\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": ".*([<LOW>]).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": "([<LOW>]).*(([<CAP>])(.*)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": ".*([<LOW>]).*(([<CAP>])(.*)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": "(.*[<LOW>].*).*(([<CAP>])(.*)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": "(([<LOW>])(.*)).*(\\b([<CAP>]).*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(\\b([<CAP>])(.*)\\b).*",
                "prediction": "(.*[<LOW>].*).*(\\b([<CAP>])(.*)\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "items with a letter preceding an upper case letter preceding a numeral .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "([<LET>]).*([<CAP>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "(([<LET>])(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "([<LET>].*[<CAP>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "([<CAP>].*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "([<CAP>]).*([<LET>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "([<LET>].*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "([<LET>]).*([<NUM>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "(([<LET>])+).*([<CAP>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "(([<LET>]).*([<CAP>]).*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*[<NUM>].*).*",
                "prediction": "(([<LET>])(.*)).*([<CAP>].*[<NUM>].*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    "lines that have a letter , no times or all times , all of which appear prior to the <M0> string": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "(([<LET>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "(([<LET>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "(([<LET>].*<M0>.*)*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "(([<LET>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "(([<LET>]){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "(([<LET>]){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "(([<LET>])*).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "((([<LET>]){5,})|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "((([<LET>]){5,})|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(<M0>).*",
                "prediction": "((([<LET>]){5,})|(<M0>)).*(<M1>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with string <M0> followed by a character , 4 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": ".*<M0>.*..*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": "(<M0>.*..*){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": "((<M0>).*(.)+){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": "(<M0>).*((.){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": "(<M0>.*[<LET>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": ".*(<M0>.*..*){4,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": "((<M0>.*..*){4,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": "(<M0>).*(..*[<LET>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": "(.*<M0>.*).*((.){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){4,}",
                "prediction": "((<M0>.*..*){4,}).*(<M1>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines starting with string <M0> or either a number , character , or letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "((<M0>)|([<NUM>])|(.))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "((<M0>)|(.)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "((<M0>)|([<NUM>])|(.)|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "((<M0>)|(([<NUM>])|(.)|(.)))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "(((<M0>)|([<NUM>])|(.))|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "((<M0>)|([<NUM>])|(.))|(([<LET>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "((<M0>)(.*))|(([<NUM>])|(.)|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "((<M0>)(.*)|(([<NUM>])|(.))|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])|(.)|([<LET>])))(.*)",
                "prediction": "((<M0>)|([<NUM>])|(.)|([<LET>])).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "2 or more lines starting with a number .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "([<NUM>])(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "([<NUM>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "(.*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "(([<NUM>])(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "([<NUM>])(.*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "(([<NUM>]){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "((.*)([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "([<NUM>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "(([<NUM>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,})(.*)",
                "prediction": "\\b(([<NUM>])(.*)){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(([<NUM>])|([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(([<NUM>])|([<VOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": ".*([<NUM>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "\\b([<NUM>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(.*[<NUM>].*)|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(.*[<NUM>].*)|(([<VOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(.*[<NUM>].*)|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(.*([<NUM>])|([<VOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "((.*[<NUM>].*)|([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(([<NUM>])|([<VOW>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have a vowel that is followed by the string <M0> 5 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "([<VOW>].*<M0>.*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(.*[<VOW>].*<M0>.*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "([<VOW>]).*((<M0>){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>]).*(<M0>).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(<M0>).*(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>].*<M0>.*){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>])(.*)).*(<M0>){5,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines which are containing the string <M0> before ending with the string <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": "(.*)(<M0>.*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": ".*(<M0>.*)(.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": "(<M0>.*).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": "((<M0>)+).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": "((<M0>)*).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": ".*(<M0>).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": "(.*<M0>.*).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*((.*)((<M1>)+)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((.*)(<M1>)).*",
                "prediction": "(<M0>).*((.*)(.*<M1>.*)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines with a character before a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": ".*..*[<LET>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": "(.)+([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": ".*(.)+([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": "(..*[<LET>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": "(.)+(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": "(.)+(([<LET>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": "((.)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": "(..*[<LET>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": "(.)+(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+).*([<LET>]).*",
                "prediction": "(..*[<LET>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines ending with number before string <M0> , zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "(.*)(([<NUM>].*<M0>.*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "(.*)(([<NUM>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "(.*)(([<NUM>]).*(<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "((.*)([<NUM>].*<M0>.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "((.*)([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "(.*)((([<NUM>])*)|(<M0>))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "((.*)([<NUM>])).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "((.*)(([<NUM>]).*(<M0>).*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "((.*)(([<NUM>])*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*((<M0>)*).*",
                "prediction": "(.*)((([<NUM>])*).*(<M0>).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines that have the string <M0> or <M1> 2 or more times .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "((<M0>)|(<M1>)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "((<M1>)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "((<M0>)|(.)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": ".*(<M0>)|(<M1>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "(\\b(<M0>)|(<M1>)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "(.*<M0>.*)|((<M1>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": ".*((<M0>)|(<M1>)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "((.*<M0>.*)|(<M1>)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "\\b((<M0>)|(<M1>)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "(.*<M1>.*)|((<M0>){2,})"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "items with a numeral or a vowel at least 1 time .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "((.)|([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "(([<VOW>])|(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "(([<NUM>])|([<VOW>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "(([<VOW>])|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "(([<VOW>])|([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "(([<VOW>])|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "(([<VOW>])|([<LET>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "((([<NUM>])|([<VOW>]))+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "((([<VOW>])|([<NUM>]))+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))+",
                "prediction": "(\\b([<VOW>])|([<NUM>])\\b)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines ending with letter , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": "(.*)(([<LET>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": "((.*)([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": "(.*)(([<CAP>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": ".*(.*)(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": "(.*)(\\b([<LET>]){2,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": "(.*)((.*[<LET>].*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": "(.*)((([<LET>]){2,})){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": "(.*)(.*([<LET>]){2,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": ".*((.*)([<LET>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){2,}",
                "prediction": "((.*)(.*[<LET>].*)){2,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character , zero or more times or either the string <M0> , the string <M1> , or the string <M2> in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "((.)*)|((<M0>)|(<M2>)|(<M2>))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "((.)*)|((<M0>)|(<M1>)|(<M2>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "((.)*)|((<M1>)|(<M0>)|(<M2>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "((.)+)|((<M0>)|(<M1>)|(<M2>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "((.)*)|((<M0>)|(<M1>)|(<M3>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "(((.)*)|(<M0>)|(<M2>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "(.)*)|((<M0>)|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "((.)*)|((<M0>)|(<M2>)|(<M3>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "(((.)*)|(<M0>)|(<M2>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*)|((<M0>)|(<M1>)|(<M2>))",
                "prediction": "(((.)*)|(<M0>)|(<M1>)).*(<M2>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines with the string <M0> or <M1> or a character before string <M2>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|(.)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|(.)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": "((<M1>)|(<M0>)|(.)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|(.)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|(.)).*(<M3>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": "(.*<M0>.*)|((<M1>).*(<M2>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|((<M1>)|(.)).*(<M2>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": ".*((<M0>)|(<M1>)|(.)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|([<LOW>])|(.)).*(<M1>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines that have a vowel or capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "(([<VOW>])|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "(([<VOW>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "\\b([<VOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "\\b([<CAP>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": ".*([<CAP>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": ".*([<VOW>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "(.*[<VOW>].*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "(.*[<VOW>].*)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "(.*[<VOW>].*)|(([<CAP>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "(.*([<VOW>])|([<CAP>]).*)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 5 or more capital letters before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "([<CAP>].*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "((.){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "((<M0>){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "(([<CAP>]){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "([<CAP>]).*(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "(([<CAP>]){5,}).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "(.*[<CAP>].*).*(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "\\b(([<CAP>]){5,}).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "(([<CAP>].*[<LOW>].*){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<LOW>]).*",
                "prediction": "((([<CAP>]){5,})|([<LOW>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines starting with the string <M0> zero or more times followed by a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "(((<M0>)*)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "((<M0>.*..*)*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "(((<M0>)*)|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "((<M0>)(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "(((<M0>)(.*))*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "(((<M0>)*)(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "(((<M0>)*).*(.)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "(((<M0>.*..*)*)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "((<M0>)(.*)).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "(((<M0>)(.*)).*(.)+)*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with 2 or more capital letters before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": "([<CAP>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": "((.){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": "(([<CAP>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": "([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": ".*(([<CAP>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": "\\b(([<CAP>]){2,}).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": "(.*[<CAP>].*).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": "(.*([<CAP>]){2,}.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": "((([<CAP>]){2,})|([<NUM>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<NUM>]).*",
                "prediction": "(([<CAP>].*[<NUM>].*){2,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> followed by the string <M1> occurring 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": "(<M0>.*<M1>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": "(<M1>.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": "(<M0>).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": "(.*<M0>.*<M1>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": ".*(<M0>.*<M1>.*){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": "((<M0>).*(<M1>).*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": "\\b(<M0>.*<M1>.*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": "((<M0>.*<M1>.*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": "(<M0>).*((<M1>.*<M1>.*){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){2,}",
                "prediction": "((<M0>.*<M1>.*){2,}).*(<M0>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines with words with number before character , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "(\\b[<NUM>].*..*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "\\b([<NUM>]).*(.){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "(\\b[<NUM>]).*(\\b){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "\\b([<NUM>].*..*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "(\\b([<NUM>]).*(.)+\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "(\\b([<NUM>]).*(.)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "\\b(([<NUM>]).*(.)+){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "\\b([<NUM>]).*((.){2,}).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "(\\b([<NUM>]).*(.).*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(.)+\\b){2,}",
                "prediction": "(\\b([<NUM>]).*(.){2,}\\b){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines starting with the string <M0> and number , zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "((<M0>)|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "((<M0>)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "((<M0>)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "(\\b(<M0>)(.*)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "((<M0>)(.*))|(([<NUM>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "((<M0>)|(([<NUM>])*))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "((<M0>.*[<NUM>].*)*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "((<M0>)|(([<NUM>])(.*)))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "((<M0>)(.*)).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<NUM>]))*)(.*)",
                "prediction": "(((<M0>)(.*))*)|([<NUM>])"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines concluding with the <M0> string or concluding with a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "((<M0>)|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "((<M0>)|([<LET>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": ".*(<M0>)|([<LET>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "(.*<M0>.*)|(([<LET>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": ".*(<M0>)|([<LET>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": ".*(<M0>)|([<LET>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "((<M0>)|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "((<M0>)|([<LET>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "((<M0>)|([<LET>]))|(.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "(.*<M0>.*)|(([<LET>]).*([<LET>]).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words containing the string <M0> , a character , or a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": "\\b(<M0>)|(.)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": "\\b(.)|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": "\\b(.)|([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": "\\b([<LOW>])|(.)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": "\\b(<M1>)|(.)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": "\\b((<M0>)|(.)|([<LET>]))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": "\\b((<M0>)|(.)|([<LET>]))|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": ".*\\b(<M0>)|(.)|([<LET>])\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": "\\b((<M0>)|(.)|([<LET>]))|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|(.)|([<LET>])\\b",
                "prediction": "\\b.*(<M0>)|(.)|([<LET>]).*\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines starting in zero or more of a character before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "(..*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "((.)((.*)(.*)))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "((..*<M0>.*)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "((..*<M0>.*)*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "((.)(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "(((..*<M0>.*)*)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "(((..*<M0>.*)*)(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "(((.)(.*))*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "((.)(.*)).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.)(.*))*).*(<M0>).*",
                "prediction": "(((.)(.*)).*(<M0>).*)*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines starting in 2 or more of a number before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "(([<NUM>])(.*)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "([<NUM>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "(([<NUM>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "(([<NUM>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "(([<NUM>].*<M0>.*){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "(([<NUM>].*<M0>.*)(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "((([<NUM>]){2,})(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "((([<NUM>].*<M0>.*){2,})(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "((([<NUM>])(.*)){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*<M0>.*){2,})(.*)",
                "prediction": "(([<NUM>])(.*)).*((<M0>){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "items beginning with <M0> at least 2 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "((<M0>){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "((<M0>)(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "((.*)(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "(([<NUM>])(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "((.*<M0>.*)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "(([<NUM>]){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "(((<M0>)(.*)){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "((.*<M0>.*)|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})(.*)",
                "prediction": "(((<M0>)(.*)){2,}){2,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with string <M0> followed by vowel , at least zero times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": "(<M0>.*<M1>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": "(.*<M0>.*[<VOW>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": "(<M0>.*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": "(<M0>).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": "((<M0>.*[<VOW>].*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": ".*(<M0>.*[<VOW>].*)*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": "((<M0>)*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": "\\b(<M0>.*[<VOW>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": "(<M0>).*((.*[<VOW>].*)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<VOW>].*)*",
                "prediction": "(<M0>).*(.*([<VOW>])*.*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with number before a capital followed by letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "([<NUM>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "(([<NUM>])+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "([<NUM>]).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "(.*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "(([<NUM>])(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "([<NUM>]).*([<CAP>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "([<NUM>].*[<CAP>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "([<NUM>]).*([<CAP>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "([<NUM>]).*([<CAP>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<CAP>].*[<LET>].*).*",
                "prediction": "(([<NUM>])+).*([<CAP>].*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines ending with a letter before a character 1 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "(.*)(([<LET>]).*(.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "((.*)(([<LET>]).*(.)+))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "((.*)([<LET>].*..*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "(.*)(([<LET>].*..*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "(.*)((([<LET>]).*(.)+))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "(.*)((([<LET>])+).*(.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "(((.*)([<LET>])).*(.)+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "((.*)(([<LET>])+)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "((.*)([<LET>])).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>].*..*)+)",
                "prediction": "(.*)(([<LET>]).*((.)+)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines ending with a capital , 4 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": "(.*)((.){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": "(.*)((.*[<CAP>].*){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": "(.*)(([<CAP>]){4,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": "((.*)([<CAP>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": "((.*)(.*[<CAP>].*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": "(.*)(.*([<CAP>]){4,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": ".*(.*)(([<CAP>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": "(.*)(\\b([<CAP>]){4,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": "(.*)((([<CAP>]){4,})){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<CAP>])){4,}",
                "prediction": "(.*)((([<CAP>]){4,}))(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "<M0> <U> is <U> to do": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "((<M0>)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(.*<M0>.*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with a number or letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": "(.*)(([<NUM>])|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": "((.*)([<NUM>]))|([<LET>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": "(.*)((([<NUM>])+)|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": "((.*)([<NUM>]))|(([<LET>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": "(.*)((([<NUM>])|([<LET>]))+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": "(.*)(([<NUM>])|(([<LET>])+))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": "((.*)(([<NUM>])|([<LET>])))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": ".*(.*)(([<NUM>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": "((.*)([<NUM>]))|(.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<NUM>])|([<LET>]))",
                "prediction": "(.*)((.*[<NUM>].*)|([<LET>]))"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with string <M0> before a number or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": "(<M0>.*[<NUM>].*)|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": "(<M0>.*[<NUM>].*)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": "(<M0>).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": "(<M0>.*[<NUM>].*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": "((<M0>).*([<NUM>]).*)|([<LOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": "(<M0>).*(([<NUM>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": ".*(<M0>).*(([<NUM>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": "(<M0>.*[<NUM>].*)|(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": "((<M0>).*([<NUM>]).*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])|([<LOW>])).*",
                "prediction": "((<M0>)+).*(([<NUM>])|([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "items with a letter preceding a terminating vowel .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "[<LET>].*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "([<LET>].*[<VOW>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "([<LET>].*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "([<LET>].*[<VOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "([<LET>].*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "([<CAP>]).*((.*)([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "([<LET>]).*((.*)([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "([<LET>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "([<LET>].*[<VOW>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.*)([<VOW>])).*",
                "prediction": "([<LET>]).*(.*(.*)([<VOW>]).*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines containing a letter or string <M0> , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": "(([<LET>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": "((.)|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": "((<M0>)|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": ".*(([<LET>])|(<M0>)){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": "(.*([<LET>])|(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": "((.*[<LET>].*)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": "(.*[<LET>].*)|((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": "(\\b([<LET>])|(<M0>)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": "((([<LET>])|(<M0>)){2,}){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|(<M0>).*){2,}",
                "prediction": "\\b(([<LET>])|(<M0>)){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and only a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": "\\b[<CAP>]\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": "\\b[<CAP>]"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": "(\\b[<CAP>]\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": "\\b([<CAP>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": "\\b([<CAP>])*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": "\\b.*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": ".*\\b[<CAP>]\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": "\\b[<CAP>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": ".*\\b([<CAP>])+\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<CAP>].*\\b",
                "prediction": "(\\b.*[<CAP>].*\\b)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines ending with a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "(.*)([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "(.*)(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "(.*)(.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": ".*(.*)([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "((.*)(.*[<NUM>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "(.*)(\\b([<NUM>])+\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "(.*)(\\b([<NUM>])*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "(.*)([<NUM>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "((.*)([<NUM>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with words with letter , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b[<LET>]\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "\\b([<LET>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b[<LET>]\\b){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b.*[<LET>].*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b([<LET>])(.*)\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b([<LET>]){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "\\b(([<LET>])(.*)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "\\b(([<LET>]){2,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b([<LET>]){2,}\\b)((.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b\\b([<LET>]){2,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with a number before string <M0> then string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": "(.*[<NUM>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": "([<NUM>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": "([<NUM>]).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": "(.*[<NUM>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": ".*([<NUM>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": "(([<NUM>])+).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": "(([<NUM>].*<M0>.*)+).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": "(([<NUM>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": "(([<NUM>]).*(<M0>).*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*).*(.*<M1>.*).*",
                "prediction": "(([<NUM>]).*(<M0>).*)|(.*<M1>.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines with a lower case letter followed by capital letter , zero or more time": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "([<LOW>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "(.*[<LOW>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "(([<LOW>].*[<CAP>].*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "(([<LOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "(([<LOW>]).*([<CAP>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "([<LOW>]).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "(([<LOW>].*[<CAP>].*)*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "(([<LOW>])*).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "(([<LOW>].*[<CAP>].*)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)*",
                "prediction": "(([<LOW>])(.*)).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with string <M0> or letter at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": "\\b(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": "\\b(<M0>)|([<LET>])+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": "\\b((<M0>)|([<LET>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": "(\\b(<M0>)|([<LET>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": "\\b(<M0>)|(([<LET>])+)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": "\\b((<M0>)+)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": "(\\b(<M0>)|([<CAP>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": ".*\\b(<M0>)|([<LET>])|([<CAP>]).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": ".*\\b(<M0>)|([<LET>])+\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))+\\b",
                "prediction": ".*\\b(<M0>)|([<LET>]).*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines beginning with a letter that's lower-case and followed by a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "(([<LOW>].*[<CAP>].*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "(([<LOW>].*[<CAP>].*)+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "(([<LOW>])(.*)).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "(([<LOW>])(.*)).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "([<LOW>].*[<CAP>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "(([<LOW>].*[<CAP>].*)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "(([<LOW>])(.*)).*([<CAP>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "(([<LOW>].*[<CAP>].*)(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "(([<LOW>])(.*)).*([<CAP>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*)(.*)",
                "prediction": "(([<LOW>].*[<CAP>].*)(.*)).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a number followed by a letter or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": ".*([<NUM>])|([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": "\\b([<NUM>])|([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": "([<NUM>]).*(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": "(([<NUM>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": "(([<NUM>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": ".*([<NUM>])|(<M0>).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": "([<NUM>]).*((<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": "(.*[<NUM>].*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": "(.*[<NUM>].*)|((<M0>).*([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>])|(<M0>)).*",
                "prediction": "(.*[<NUM>].*)|(([<LET>]).*(<M0>).*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more of a vowel or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": "(([<VOW>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": "([<VOW>])|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": "(([<LOW>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": ".*(([<VOW>])|([<LOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": ".*([<VOW>])|([<LOW>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": "(.*[<VOW>].*)|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": "\\b(([<VOW>])|([<LOW>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": "(.*([<VOW>])|([<LOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": "((.*[<VOW>].*)|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){2,}",
                "prediction": "((([<VOW>])|([<LOW>])){2,}){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with 5 or more of a lower-case letter before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": "([<LOW>].*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": "([<LOW>].*[<LET>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": "([<LOW>]).*(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": "(([<LOW>]){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": ".*([<LOW>].*[<LET>].*){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": "([<LOW>]).*(([<CAP>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": "([<LOW>]).*((([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": ".*([<LOW>]).*(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": "(.*[<LOW>].*).*(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,}).*([<LET>]).*",
                "prediction": "(([<LOW>].*[<LET>].*){5,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a small letter present that also precedes a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": ".*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>].*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": ".*[<LOW>].*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": "\\b[<LOW>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": "\\b([<LOW>]).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": "(.*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>]).*((.*)([<NUM>])).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "lines finishing with a letter followed by a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": "([<LET>].*[<VOW>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": "(.*)([<LET>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": ".*([<LET>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": "(.*)(.*[<LET>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": ".*([<LET>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": "(.*[<LET>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": "((.*)([<LET>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": ".*(.*)([<LET>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": "(.*.*[<LET>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<LET>]).*([<VOW>]).*)",
                "prediction": ".*([<LET>].*[<VOW>].*).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lines with words with the string <M0> , 2 or more times or a vowel in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "(\\b(<M0>){2,}\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "\\b(<M0>){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "(\\b(<M0>){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "\\b(<M0>)|([<VOW>]){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "\\b((<M0>){2,})|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "\\b(<M0>){2,}|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "(\\b(<M0>){2,}\\b)|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "(\\b(<M0>)|([<VOW>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "\\b(<M0>){2,}|([<VOW>]){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>){2,})|([<VOW>])\\b",
                "prediction": "(\\b(<M0>){2,}\\b)|([<VOW>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines having capital letters followed by a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": "[<CAP>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": ".*[<CAP>].*..*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": "([<CAP>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": "([<CAP>].*..*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": "([<CAP>].*..*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": "\\b[<CAP>].*..*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": "([<CAP>].*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": "([<CAP>].*..*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": "([<CAP>].*..*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*..*",
                "prediction": "([<CAP>].*..*).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines with <M0> , a letter , or <M1> before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(<M0>)|(([<LET>])|(<M1>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|(<M1>)|([<LET>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(<M0>).*(([<LET>])|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M1>)|([<LET>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(<M0>).*(([<LET>])|([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": ".*((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(<M0>)|(([<LET>])|(<M1>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(<M0>)|(([<LET>])|(<M1>)|([<VOW>])).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "lines with character followed by vowel , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "(.*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": ".*(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "(..*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "(.)+(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "(.*..*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "\\b(..*[<VOW>].*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": ".*(..*[<VOW>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "((.){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "((..*[<VOW>].*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "(.*..*).*(([<VOW>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines where the string <M0> is not followed by the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "<M0>.*<M1>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(<M0>.*<M1>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": ".*<M0>.*<M1>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "<M1>.*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(<M0>).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(<M0>.*<M1>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(<M0>).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "\\b<M0>.*<M1>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(.*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(<M0>.*<M1>.*).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with a vowel before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": "\\b[<VOW>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": "\\b.*[<VOW>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": "(\\b[<VOW>].*<M0>.*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": "\\b([<VOW>].*<M0>.*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": "\\b([<VOW>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": "(\\b[<VOW>].*<M0>.*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": "\\b.*([<VOW>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": "(\\b([<VOW>]).*(<M0>).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": ".*\\b([<VOW>]).*(<M0>).*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<VOW>].*).*(<M0>).*\\b",
                "prediction": "\\b(([<VOW>]).*(<M0>).*)|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more of a vowel before capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": "([<VOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": "([<CAP>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": "([<VOW>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": ".*([<VOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": "(.*[<VOW>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": "(([<VOW>]){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": "([<VOW>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": ".*([<VOW>].*[<CAP>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": ".*([<VOW>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*[<CAP>].*){2,}",
                "prediction": "(.*[<VOW>].*).*(([<CAP>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines that have a character followed by a vowel with 2 or more occurrences": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "(..*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "([<VOW>].*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "(.){2,}.*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "(.)+(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "((.){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "((.)+([<VOW>]).*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "((..*[<VOW>].*){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": ".*(..*[<VOW>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "((..*[<VOW>].*){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<VOW>].*){2,}",
                "prediction": "((..*[<VOW>].*)|([<LET>])){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines that have a vowel before a <M0> string at least 4 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "([<VOW>].*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "(([<VOW>]){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "([<VOW>]).*((<M0>){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "(([<VOW>]).*(<M0>).*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "(.*[<VOW>].*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "(<M0>).*(([<VOW>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "(.*([<VOW>]).*(<M0>).*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "(([<VOW>].*<M0>.*){4,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "(.*([<VOW>].*<M0>.*){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){4,}).*",
                "prediction": "(([<VOW>].*<M0>.*){4,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> , number , or letter before a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": "((<M0>)|(<M0>)|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<NUM>])|([<CAP>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": "(<M0>)|(([<NUM>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<CAP>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": ".*((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": "((<M0>)|(([<NUM>])|([<LET>])).*([<CAP>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])|([<LET>])).*([<CAP>]).*",
                "prediction": "(((<M0>)|([<NUM>])|([<LET>]))).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "items with a numeral or small letter at least 2 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "([<LOW>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "\\b([<LOW>]){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "(([<NUM>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "(([<LOW>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "(([<LOW>])|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "(([<LOW>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "(([<LET>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "(([<LOW>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "([<LOW>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])){2,}",
                "prediction": "([<NUM>]).*(([<LOW>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> , 2 or more times followed by a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": "(.*<M0>.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": "(<M0>){2,}.*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": "(.*(<M0>){2,}.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": "((<M0>){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": "(<M0>).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": ".*((<M0>){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": "((.*<M0>.*){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": "\\b((<M0>){2,}).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<LET>]).*",
                "prediction": "(.*[<LET>].*).*((<M0>){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a character or letter before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": "(.)|(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": "((.)|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": "((.)|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": ".*((.)|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": ".*((.)|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": "((.)|(([<LET>]).*(<M0>).*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": "(((.)|([<LET>])).*(<M0>).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": "(((.)|([<LET>]))+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": "\\b((.)|([<LET>])).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>])|([<LET>])).*(<M0>).*",
                "prediction": "((.)|([<LET>])|([<LOW>])).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines ending in zero or more of a character or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "((.*)(..*[<VOW>].*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "((.*)(.)|([<VOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "((.*)((.)|([<VOW>])))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "(.*)(((.)|([<VOW>]))*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "(((.*)(.))|([<VOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "((.*)(.))|(([<VOW>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "((.*)((.))|([<VOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "((.*)(.*..*))|(([<VOW>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "(.*)((.)|(([<VOW>])*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))|([<VOW>]))*",
                "prediction": "((.*)(.)|(([<VOW>]))*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines where 2 or more times there is a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": "([<VOW>]){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": "\\b([<VOW>]){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": "\\b(([<VOW>]){2,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": ".*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": ".*([<VOW>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": "(.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": "\\b(([<VOW>]){2,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": "\\b(.*[<VOW>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": "([<VOW>]).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]){2,}",
                "prediction": "(([<VOW>]){2,}).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number , vowel , or character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": ".*([<NUM>])|([<VOW>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": "([<NUM>])|([<VOW>])|(.)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": "(([<NUM>])|([<VOW>])|(.))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": "\\b([<NUM>])|([<VOW>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": "(.*[<NUM>].*)|(.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": ".*([<NUM>])|(.)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": "(.*[<NUM>].*)|(([<VOW>])|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": "(([<NUM>])|([<VOW>])|(.)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": "(.*[<NUM>]).*(([<NUM>])|(.)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<VOW>])|(.)+",
                "prediction": "(.*[<NUM>]).*(([<NUM>])|(.)|(.)).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with zero or more capital letters before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": "([<CAP>].*..*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": "(([<CAP>])*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": "([<CAP>]).*((.)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": "(([<CAP>])*).*(.).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": "(([<CAP>])*).*((.)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": ".*(([<CAP>])*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": "\\b(([<CAP>])*).*(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": "(([<CAP>])*).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": "(([<CAP>].*..*)*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*(.)+",
                "prediction": "((([<CAP>])*)|([<CAP>])).*(.)+"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "a line starting with a number that is repeated 3 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "(([<NUM>]){3,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "(([<NUM>])(.*)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "(\\b([<NUM>])(.*)\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "((([<NUM>]){3,})(.*)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "(([<NUM>].*..*){3,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "((([<NUM>])(.*)){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "(([<NUM>].*[<NUM>].*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "(([<NUM>].*[<CAP>].*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "(([<NUM>].*[<CAP>].*)(.*)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)){3,}",
                "prediction": "(([<NUM>].*[<NUM>].*)(.*)){3,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": "([<LET>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": ".*([<LET>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": "(([<LET>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": "((.*)([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": "(([<CAP>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": "(([<LOW>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": "(([<LET>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": "(([<LOW>]){2,})|(.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LET>].*){2,}\\b",
                "prediction": "(([<LET>]){2,}).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words and a number , capital letter , or string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": "\\b(.)|([<CAP>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": "\\b([<CAP>])|([<NUM>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": "\\b([<NUM>])|(<M0>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": "\\b([<CAP>])|(<M0>)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": "(\\b[<NUM>])|([<CAP>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": "(\\b([<NUM>])|([<CAP>])|(<M0>)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": "(\\b([<NUM>])|([<CAP>])|(<M0>)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": ".*\\b([<NUM>])|([<CAP>])|(<M0>)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<CAP>])|(<M0>)\\b",
                "prediction": "\\b.*([<NUM>])|([<CAP>])|(<M0>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a number or which are ending with a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "(<M0>).*(([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "(<M0>).*(([<NUM>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "(<M0>.*[<NUM>].*)|(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "(<M0>).*(([<NUM>])|(.*)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "(<M0>.*[<NUM>].*)|((.*)([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "(<M0>).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "((<M0>)+).*(([<NUM>])|(.*)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "(<M0>).*(([<NUM>])|([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<NUM>]).*)|((.*)([<VOW>]))",
                "prediction": "(<M0>).*(([<NUM>])|((.*)([<VOW>]))).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines that begin with a number , followed by a letter and the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "(([<NUM>])*).*([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "([<NUM>].*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "(([<NUM>].*[<LET>].*)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "(([<NUM>])+).*([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "(([<NUM>].*[<LET>].*).*(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "(([<NUM>])(.*)).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "(([<NUM>]).*([<LET>]).*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "(([<NUM>].*[<LET>].*).*(<M0>).*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*([<LET>].*<M0>.*).*",
                "prediction": "(([<NUM>].*[<LET>].*)(.*)).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines ending in zero or more of a letter and string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": "(.*)(([<LET>].*<M0>.*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": "((.*)([<LET>].*<M0>.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": "((.*)(([<LET>])|(<M0>)))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": "(.*)((([<LET>])*)|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": "(((.*)([<LET>]))|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": ".*((.*)([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": "((.*)([<LET>])).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": "((.*)(([<LET>]).*(<M0>).*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": "(((.*)([<LET>]))|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])*)|(<M0>))",
                "prediction": "(((.*)([<LET>]))|([<LOW>])).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending in lower-case letter or vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": "(.*)(([<LOW>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": "((.*)([<LOW>]))|([<VOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": "(.*)((([<LOW>])|([<VOW>]))+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": "((.*)([<LOW>]))|(([<VOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": "(.*)((([<LOW>])+)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": ".*(.*)(([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": ".*((.*)([<LOW>]))|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": "(.*)(([<LOW>])|(([<VOW>])+))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": "(.*)((.*[<LOW>].*)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LOW>])|([<VOW>])))+",
                "prediction": "((.*)([<LOW>]))|(.*[<VOW>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines that have a character or <U> letter 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "((.)|(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "((.)|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "(.)|(([<LET>]){2,}))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "((.)|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "(.)|(([<LET>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "((.)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "\\b((.)|([<LET>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "(.)|(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "(\\b(.)|([<LET>])\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)){2,}",
                "prediction": "(((.)|([<LET>])){2,})(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines having words beginning with a lower-case letter coming twice or more": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "\\b([<LOW>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "\\b([<LOW>])(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "\\b(([<LOW>])(.*))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "\\b([<LOW>].*..*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "(\\b([<LOW>])(.*)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "\\b(([<LOW>])(.*)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "\\b([<LOW>].*[<NUM>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "\\b([<LOW>]).*(([<LOW>]){2,}).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "\\b([<LOW>].*[<CAP>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])(.*)\\b){2,}",
                "prediction": "\\b(([<LOW>]){2,})(.*)\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": "([<NUM>].*[<VOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": ".*([<NUM>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": "([<NUM>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": "(([<NUM>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": "(([<NUM>])*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": "([<NUM>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": "(.*[<NUM>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": "(([<NUM>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": "([<NUM>]).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*(([<VOW>])*).*\\b",
                "prediction": "(([<NUM>])+).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": "([<NUM>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": "([<NUM>].*[<VOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": ".*([<NUM>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": "(([<NUM>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": "(([<NUM>])*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": "(.*[<NUM>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": "([<NUM>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": "([<NUM>]).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": "(([<NUM>])+).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(.*[<VOW>].*).*",
                "prediction": "(([<NUM>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": "([<NUM>].*[<VOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": "([<NUM>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": "(([<NUM>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": ".*([<NUM>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": "(.*[<NUM>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": "(([<NUM>])*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": "([<NUM>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": "([<NUM>]).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": "(([<NUM>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*[<VOW>].*",
                "prediction": "(([<NUM>])+).*(.*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter followed by a character , at least 5 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "(.*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "([<CAP>].*..*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "(.)+([<CAP>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "(..*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "(.)+(([<CAP>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "(.)+([<CAP>].*..*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "([<CAP>]).*((.){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "(([<CAP>]){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "(([<CAP>].*..*){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*){5,}",
                "prediction": "(.*..*).*(([<CAP>]){5,}).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with capital letter followed by lower-case letter before vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": ".*[<CAP>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": ".*[<CAP>].*[<LOW>].*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": "([<CAP>]).*([<LOW>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": "([<CAP>].*[<LOW>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": ".*([<CAP>].*[<LOW>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*[<LOW>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": "(([<CAP>].*[<LOW>].*)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": "(([<CAP>].*[<LOW>].*).*([<VOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*).*([<LOW>].*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines that have the word <M0> preceding a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": "<M0>.*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": "(<M0>.*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": ".*<M0>.*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": "(<M0>).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": "(<M0>.*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": "\\b<M0>.*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": "(<M0>.*[<NUM>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": "(.*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": "(<M0>).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>])+).*",
                "prediction": "\\b(<M0>).*([<NUM>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines ending in a character before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "(.*)(..*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "(.*)(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "((.*)(..*[<LET>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "((.*)(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "(.*)((.)+([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "((.*)(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "(.*)(.*(.)+([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "((.*)(.)).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "((.*)(.*..*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "(.*)(.*([<LET>]).*([<LET>]).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 3 or more of a vowel or letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": "(([<VOW>])|([<LET>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": "([<VOW>])|(([<LOW>]){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": "([<VOW>])|(([<LET>]){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": "(([<VOW>])|([<LOW>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": "(([<VOW>])|([<CAP>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": ".*([<VOW>])|([<LET>]){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": "(.*[<VOW>].*)|(([<LET>]){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": ".*(([<VOW>])|([<LET>])){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": "(.*([<VOW>])|([<LET>]).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])){3,}",
                "prediction": "(.*([<VOW>])|([<LOW>]).*){3,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "the lines with a lower - case letter at least once before a vowel .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "((<M0>)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "(([<LOW>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "(([<LOW>])*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "((([<LOW>])+)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "((.*[<LOW>].*)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "(([<LOW>])+).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "((([<LOW>])+)|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "((.)+([<LOW>]).*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "((([<LOW>])+)|([<VOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*([<VOW>]).*",
                "prediction": "(([<LOW>].*[<VOW>].*)+).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with 5 or more characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "((.)(.)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "(..*..*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "((.){5,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "((.)(.*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "(\\b(.)(.*)\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "(\\b(.)(.)\\b){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "(\\b(.){5,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "((..*..*)(.*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "((..*..*){5,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,})(.*)",
                "prediction": "(((.)(.*)){5,})(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "items with <M0> at least 5 times preceding a small letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "(([<LET>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "((<M0>){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "(([<LOW>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "((.){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "(([<NUM>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "((<M1>){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "(([<LET>]){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "(([<NUM>]){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "(((<M0>){5,})|([<LOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){5,}).*([<LOW>]).*",
                "prediction": "(((<M0>){5,}).*([<LOW>]).*)+"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with 3 or more instances of a character before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "([<LOW>].*..*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "(..*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "((.)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "(.)+(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "((.){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "((.)+([<LOW>]).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "((..*[<LOW>].*)|(<M0>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "((..*[<LOW>].*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "((..*[<LOW>].*){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>]){3,}).*",
                "prediction": "((..*[<LOW>].*){3,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with at least 2 capital letters before another letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "(([<CAP>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "(([<CAP>]){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "(([<CAP>]){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "(([<CAP>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "((([<CAP>]){2,})|([<LET>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "((([<CAP>]){2,})|([<CAP>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "((([<CAP>]){2,})|([<LOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "((([<CAP>]){2,})|([<CAP>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "((([<CAP>]){2,})|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<LET>]).*",
                "prediction": "((([<CAP>]){2,})|([<VOW>])).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting in the string <M0> before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "((.*)(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "((<M0>.*[<VOW>].*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "((<M0>)(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "((<M0>.*[<VOW>].*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "(((<M0>)(.*))+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "((<M0>)(.*)).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "(((<M0>)(.*)).*([<VOW>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "((<M0>)(.*)).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "((.*<M0>.*)(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(.*[<VOW>].*).*",
                "prediction": "(((<M0>)(.*))|([<VOW>])).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines with a character preceded by a number 5 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "([<NUM>].*..*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "((.){5,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "([<NUM>].*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "(([<NUM>]){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "(..*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "([<NUM>]).*((.){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "(([<NUM>]){5,}).*((.*)(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "(([<NUM>].*..*){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "(([<NUM>]){5,}).*((.*)(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){5,}).*(.)+",
                "prediction": "(([<NUM>]){5,}).*((.*)([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a number ending in only a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": ".*([<NUM>])+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": "([<NUM>])+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": "(.*)([<CAP>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": "(.*)(([<CAP>])|([<NUM>]))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": "([<NUM>]).*((.*)([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": "((.*)([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": "(.*[<NUM>].*).*((.*)([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": "(([<NUM>])+)|((.*)([<CAP>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": "(([<NUM>])+).*(.*)([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.*)([<CAP>])).*",
                "prediction": ".*([<NUM>]).*((.*)([<CAP>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with 2 or more of a capital letter before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "(..*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": ".*([<CAP>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "([<CAP>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "(([<CAP>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": "(.*[<CAP>].*).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": ".*([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": ".*([<CAP>].*[<NUM>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){2,}",
                "prediction": ".*(([<CAP>]){2,}).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with the string <M0> with string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*))|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*))|(.*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*))|((.*)(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*))|((<M1>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "(((<M0>)(.*))|(<M1>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*)).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*)).*((<M1>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*)).*((.*)(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing capital letter or letter , zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": "(.*[<CAP>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": ".*([<CAP>])*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": "(([<CAP>])|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": ".*([<CAP>])|([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": ".*([<CAP>])|([<LET>])*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": ".*(([<CAP>])|([<LET>]))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": "((.*[<CAP>].*)|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": "(.*([<CAP>])|([<LET>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": "(.*([<CAP>])|([<LOW>]).*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(([<LET>])*).*",
                "prediction": ".*(([<CAP>])*)|([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines containing 5 or more of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "(.*<M0>.*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "(<M0>){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "\\b(<M0>){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "((.*)(<M0>)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": ".*(<M0>){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "((<M0>){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "\\b((<M0>){5,})|(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "((<M0>){5,})|((.*)(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "((<M0>){5,})|(.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "((<M0>){5,})|(.*[<LET>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number before lower-case or capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": "([<NUM>].*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": "(([<NUM>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": "(.*[<NUM>].*).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": "(([<NUM>]).*([<LOW>]).*)|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": "([<NUM>]).*(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": "(([<NUM>])|([<CAP>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": ".*([<NUM>]).*(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": "(([<NUM>])+).*(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<LOW>]).*)|(([<CAP>])+)",
                "prediction": "(.*[<NUM>].*).*(([<LOW>])|([<CAP>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing the string <M0> once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": "(<M0>)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": "(.*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": ".*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": "(.*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": ".*(<M0>)+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": "((.*)(<M0>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": ".*(<M0>)*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": "((.*)(.*<M0>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": "((<M0>)+)|(.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": ".*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "([<NUM>])+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "(.*[<NUM>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "(.*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": ".*([<NUM>])+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": ".*([<NUM>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "(([<NUM>])+)|(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "([<NUM>]).*((.*)([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "([<NUM>]).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "([<NUM>])+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "(.*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": ".*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": ".*([<NUM>])+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "(.*[<NUM>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "(([<NUM>])+)|(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": ".*([<NUM>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "([<NUM>]).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "([<NUM>]).*((.*)([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number or ending in lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "(.*)(([<NUM>])|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "(([<NUM>])|(.*[<LOW>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "([<NUM>]).*((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": ".*([<NUM>])|(.*)([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": ".*([<NUM>])|((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "(([<NUM>])|((.*)([<LOW>])))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "(.*[<NUM>].*)|((.*)([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "(.*)(([<NUM>])|((.*)([<LOW>])))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "\\b([<NUM>])|((.*)([<LOW>]))\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "(([<NUM>])|(.*)).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with letter or lower-case letter , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "(.*)(([<LET>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "(.*)((([<LET>])|([<LOW>])){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "(.*)(([<LET>])|(([<LOW>]){2,}))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "((.*)([<LET>]))|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "(.*)((([<LOW>])|([<LET>])){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "(.*)((([<LOW>])|([<LOW>])){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "((.*)(([<LET>])|([<LOW>]))){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "(.*)(([<LOW>])|(([<LOW>]){2,}))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "((.*)([<LOW>]))|(([<LET>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LET>])|([<LOW>])){2,})",
                "prediction": "(.*)(([<LOW>])|(([<LET>]){2,}))"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 4 or more vowels before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": "([<VOW>].*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": "((.){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": "(([<VOW>]){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": "([<VOW>]).*((<M0>){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": "((<M0>){4,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": ".*(([<VOW>]){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": "((([<VOW>]){4,}).*(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": "((([<VOW>]){4,})|(<M0>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": "(([<VOW>].*<M0>.*){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*(<M0>).*",
                "prediction": "((([<VOW>]){4,})|([<VOW>])).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": "(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": ".*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": "(.*..*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": "\\b(.)*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": "(.*..*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": ".*(.)+(.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": "\\b(.)+(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": ".*(.)+([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": "\\b(.)+([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.)(.*).*\\b",
                "prediction": ".*(.)+([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter before string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>].*<M0>.*)|(<M1>))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": ".*([<LOW>].*<M0>.*)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": ".*([<LOW>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|(.*<M1>.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that contain a lower-case letter or the string <M0> , at least 3 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": "((<M0>)|([<LOW>])){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": "(([<LOW>])|(<M0>)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": "\\b(([<LOW>])|(<M0>)){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": ".*(([<LOW>])|(<M0>)){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": "(\\b([<LOW>])|(<M0>)\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": "(\\b(<M0>)|([<LOW>])\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": "((.*[<LOW>].*)|(<M0>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": "(.*([<LOW>])|(<M0>).*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": "\\b((<M0>)|([<LOW>])){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)){3,}",
                "prediction": ".*(([<LOW>])|(<M0>)|([<LET>])).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a number followed by 2 or more strings of <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": "[<NUM>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": ".*[<NUM>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": "\\b[<NUM>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": "[<NUM>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": "([<NUM>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": "([<NUM>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": ".*([<NUM>].*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": "\\b([<NUM>].*<M0>.*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": "(([<NUM>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*){2,}",
                "prediction": "(.*[<NUM>].*).*(<M0>){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing a character followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": "..*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": ".*..*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": "(.)+([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": "(..*[<LOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": "\\b..*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": "(..*[<LOW>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": "(.)+(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": "(..*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": "(..*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*[<LOW>].*)+",
                "prediction": "(..*[<LOW>].*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a letter following a vowel or <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": "(([<VOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": "(([<LET>])|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": "(([<LET>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": "([<LET>]).*(([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": "([<VOW>]).*(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": ".*([<LET>]).*(([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)).*([<LET>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*(([<LET>])*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a character before the string <M0> or ending in the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "(.)+((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "(..*<M0>.*)|((.*)(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "(.)+((<M0>)|(.*)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "((..*<M0>.*)|(<M1>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "((.)+).*((<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "((..*<M0>.*)|(<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "((.)+).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "((.)+).*((<M0>)|(.*)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "((.)+(<M0>).*)|((.*)(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)|((.*)(<M1>))",
                "prediction": "(.)+((<M0>)|((.*)(<M1>))).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a lower-case letter before capital letter or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": "([<LOW>].*[<CAP>].*)|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": "(([<LOW>])+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": "([<LOW>]).*(([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": ".*([<LOW>]).*(([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": "([<LOW>].*[<CAP>].*)|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": "(([<LOW>])+).*([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": "(([<LOW>]).*([<CAP>]).*)|(([<VOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": "(([<LOW>])+).*(([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": "([<LOW>]).*((([<CAP>])|([<VOW>]))+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])|([<VOW>])).*",
                "prediction": "(.*[<LOW>].*).*(([<CAP>])|([<VOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with 3 or more letters before characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "([<LET>].*..*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "(([<CAP>]){3,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "(.*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "(([<LET>]){3,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "([<LET>]).*((.){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "(([<LET>]){3,}).*(.){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "(([<LET>]){3,}).*(.){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "(([<LET>]){3,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "(([<LET>].*..*){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){3,}).*",
                "prediction": "(([<LET>]){3,}).*((.){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and 2 or more letter or with a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b([<CAP>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b([<CAP>]){2,}|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b([<LET>]){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b(([<LET>]){2,})|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b(([<CAP>]){2,})|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "(\\b([<LET>])|([<CAP>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b(([<CAP>]){2,})|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "(\\b([<CAP>])|([<CAP>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b(([<LOW>]){2,})|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b(([<LET>])|([<CAP>])){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> after a character , the string <M1> , or the string <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "((.)|(<M1>)|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "((.)|(<M1>))|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "((.)|(<M1>)|(<M2>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "(<M1>).*((.)|(<M0>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "(.)|((<M0>)|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "((.)|(<M1>)|(<M0>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "((.)|(<M1>)|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "((.)|(<M1>)|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "((.)|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M1>)|(<M2>)).*(<M0>).*",
                "prediction": "((<M0>)|(.)|(<M1>)).*(<M2>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with <M0> before number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "(.*)(<M0>.*[<NUM>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "((.*)(<M0>.*[<NUM>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "(.*)(.*<M0>.*[<NUM>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "(.*)(<M0>).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "(.*)((<M0>).*([<NUM>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "((.*)(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "(((.*)(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "((.*)(<M0>)).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "((.*)(<M0>)).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*([<NUM>]).*",
                "prediction": "((.*)(<M0>)).*(.*[<NUM>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines containing a number after a vowel 5 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "([<VOW>]){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "([<VOW>].*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "([<VOW>]){5,}.*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "([<VOW>]).*(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "(([<VOW>]){5,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "(.*[<VOW>].*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "(([<NUM>]){5,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "([<NUM>]).*(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "(.*([<VOW>]).*([<NUM>]).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<NUM>]){5,}).*",
                "prediction": "(.*[<VOW>].*).*(([<NUM>]){5,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have a capital letter followed by a lower-case letter , then a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": ".*[<CAP>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": "([<CAP>].*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": "(.)+([<CAP>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": "(..*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": "([<CAP>]).*([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": ".*([<CAP>].*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": "(.*[<CAP>].*).*([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": "(([<CAP>])*).*([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<NUM>].*).*",
                "prediction": "(([<CAP>]).*([<LOW>]).*).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with lower-case letter followed by capital": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": ".*[<LOW>].*[<CAP>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": "[<LOW>].*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": "([<LOW>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": "([<LOW>].*[<CAP>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": "([<LOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": "\\b[<LOW>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": "([<LOW>].*[<CAP>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": "(.*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": "([<LOW>].*[<CAP>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<LOW>].*[<CAP>].*",
                "prediction": "([<LOW>]).*(.*[<CAP>].*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines <U> a vowel which precedes a letter no less than 3 times and all <U>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "([<LET>].*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "([<VOW>].*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "([<LOW>].*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "([<LET>].*[<VOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "([<VOW>].*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "(([<VOW>]){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "([<VOW>]).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "(([<LET>]){3,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "(([<LET>]){3,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){3,}).*([<LET>]).*",
                "prediction": "(([<LOW>]){3,}).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and 4 or more of the string <M0> or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "\\b(<M0>)|([<LOW>]){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "(\\b<M0>.*<M0>.*\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "\\b((<M0>)|([<LOW>])){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "(\\b<M0>.*[<LOW>].*\\b){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "(\\b(<M0>)|([<LOW>])\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "\\b((<M0>){4,})|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "\\b(<M0>)|(([<LOW>]){4,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "\\b(<M0>)|(([<LOW>]){4,}).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "(\\b(<M0>)|([<LOW>])|([<LOW>])\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LOW>])\\b){4,}",
                "prediction": "\\b((<M0>)|([<LOW>])|([<LOW>])){4,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words starting with string <M0> or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": "\\b((<M0>)+)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": ".*\\b(<M0>)|([<NUM>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": "(\\b(<M0>)(.*)\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": "\\b(<M0>)(.*)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": "\\b((<M0>)(.*))|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": "\\b((<M0>)|([<NUM>]))(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": "(\\b(<M0>)|([<NUM>])\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": "(\\b(<M0>)(.*)\\b)|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": "\\b(<M0>)|(([<NUM>])(.*))\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<NUM>]))(.*)\\b",
                "prediction": "\\b(<M0>)(.*)|(([<NUM>])(.*))\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with characters or the string <M0> followed by the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "((.)|(<M0>.*<M1>.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "((.)|(<M0>.*<M1>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "(.)+((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "(.)|((<M0>.*<M1>.*)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "((.)|(<M0>.*<M1>.*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "((.)|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "(.)|((<M0>.*<M1>.*)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "\\b((.)|(<M0>)).*(<M1>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "(.*..*)|((<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*)|(<M0>.*<M1>.*)",
                "prediction": "(\\b(.)|(<M0>)\\b).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing a letter , a character , or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": "\\b([<LET>])|(.)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": ".*([<LET>])|(.)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": "\\b(.)|([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": ".*(.)|([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": "\\b(.)|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": ".*(.)|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": "\\b(<M0>)|(.)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": "(.*[<LET>].*)|(.*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": "(.*[<LET>].*)|((.)|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(.)|(<M0>)\\b",
                "prediction": "\\b.*([<LET>])|(.)|(<M0>).*\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines which are ending with the string <M0> or a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": "(.*)((<M0>)|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": "(.*)(((<M0>)|([<CAP>]))+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": "(.*)(((<M0>)*)|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": "(.*)(((<M0>)+)|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": "((.*)((<M0>)|([<CAP>])))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": "(.*)(((<M0>)|([<CAP>]))*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": "(.*)((.*<M0>.*)|([<CAP>]))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": ".*(.*)((<M0>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": "((.*)(<M0>))|(([<CAP>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((<M0>)|([<CAP>])).*",
                "prediction": ".*((.*)(<M0>))|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines that have words and end with the string <M0> 1 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": "(\\b(<M0>)+\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": "\\b((.*)(<M0>))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": "\\b(.*)((<M0>)+)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": "(\\b(.*)(<M0>)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": "(\\b(<M0>)+\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": "\\b((<M0>)+)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": "(\\b(.*)(<M0>)\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": "(\\b((.*)(<M0>))+\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": "(\\b(.*)(.*<M0>.*)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.*)(<M0>))+\\b",
                "prediction": ".*\\b((.*)(<M0>))+\\b.*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a vowel before lower-case letter before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "(([<VOW>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "([<VOW>]).*([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "([<VOW>].*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "(([<VOW>])*).*([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "(.*[<VOW>].*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "(([<VOW>])+).*([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "([<VOW>]).*(([<LOW>]).*([<NUM>]).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "(([<VOW>]).*([<LOW>]).*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "(([<VOW>])(.*)).*([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*).*([<NUM>]).*",
                "prediction": "(.*[<VOW>].*).*([<LOW>].*[<NUM>].*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "the lines starting with words that contain a number coming before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "\\b([<NUM>].*<M0>.*)(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "(\\b([<NUM>].*<M0>.*)+\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "(\\b([<NUM>].*<M0>.*)(.*)\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "(\\b([<NUM>].*<M0>.*)(.*)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "(\\b([<NUM>].*<M0>.*)*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "(\\b([<NUM>].*<M0>.*).*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "\\b(([<NUM>])(.*)).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)(.*)",
                "prediction": "\\b(([<NUM>]).*(<M0>).*)(.*)\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a character followed by the string <M0> , at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(..*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.*..*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.)+((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": ".*(..*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "\\b(..*<M0>.*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.)+(<M0>.*<M1>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.)+(<M0>.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.*..*).*(<M0>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.)+(<M0>.*<M0>.*){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines that end with a capital letter , at least 1 time": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": "(.*)(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": "((.*)([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": "(.*)((.*[<CAP>].*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": "(.*)(\\b([<CAP>])+\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": "(.*)((([<CAP>])+)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": "((.*)(.*[<CAP>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": "(.*)(.*([<CAP>])+.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": ".*((.*)([<CAP>]))+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": "(.*)((([<CAP>])+)|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<CAP>])+)\\b",
                "prediction": ".*(.*)(([<CAP>])+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with 2 or more of a number before string <M0> or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "([<NUM>]).*((<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "(([<NUM>].*<M0>.*)|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "(([<NUM>])+).*((<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "([<NUM>].*<M0>.*)|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "([<NUM>]).*((<M0>)|([<LOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "(([<NUM>]){2,}).*(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "(([<NUM>]){2,}).*(<M0>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "(([<NUM>]).*(<M0>).*)|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "(([<NUM>]){2,}).*(<M0>.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(((<M0>)|([<LOW>])){2,}).*",
                "prediction": "(([<NUM>]){2,}).*((<M0>)|([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing words with vowels or <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": "(\\b([<VOW>])|(<M0>)\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": "\\b([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": "\\b(([<VOW>])|(<M0>))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": "\\b(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": "\\b(.*[<VOW>].*)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": "(\\b([<VOW>])|(<M0>)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": ".*\\b([<VOW>])|(<M0>)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": ".*\\b(<M0>)|([<VOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": ".*\\b([<VOW>])|(<M0>)|([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)\\b",
                "prediction": ".*\\b([<VOW>])|(<M0>).*\\b.*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> or number before a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": "(<M0>.*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<CAP>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": "(<M0>)|(([<NUM>]).*([<CAP>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": "((<M0>)|(([<NUM>]).*([<CAP>]).*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": ".*(<M0>)|(([<NUM>]).*([<CAP>]).*)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": "((<M0>)|(([<NUM>])+)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": "((<M0>)+)|(([<NUM>]).*([<CAP>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<CAP>]).*",
                "prediction": "(<M0>)|(([<NUM>])|([<CAP>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with character or letter before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": ".*(.)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": "(.)|([<LET>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": "(.)|([<LET>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": "(.)|(([<LET>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": "(.)|([<LET>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": "((.)|([<LET>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": "(([<LET>])|(.)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": "(.)|(([<LET>]).*([<LOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": "((.)|([<LOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LET>])).*([<LOW>]).*",
                "prediction": ".*((.)|([<LET>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with a vowel before a letter before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "(.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "(([<VOW>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "(([<VOW>])(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "([<VOW>].*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "([<VOW>]).*([<LET>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "(.*[<VOW>].*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "(([<VOW>].*[<LET>].*)+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "(([<VOW>])+).*([<LET>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "(([<VOW>])(.*)).*([<LET>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*[<NUM>].*).*",
                "prediction": "(([<VOW>]).*([<LET>]).*).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines with lower-case letter , 2 or more times before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": "([<LOW>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": "(([<LOW>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": "(([<LOW>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": ".*(([<LOW>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": "((([<LOW>]){2,})|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": "\\b(([<LOW>]){2,}).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": "((([<LOW>]){2,})(.*)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*([<NUM>]).*",
                "prediction": "((.*[<LOW>].*){2,}).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines starting with either <M0> , a vowel or a capital letter or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "(([<VOW>])|(<M0>)|([<CAP>]))|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "((<M0>)|([<VOW>])|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "(([<VOW>])|(<M0>)|([<CAP>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "((<M0>)|([<VOW>])|([<CAP>]))|((<M1>)(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "((<M0>)|([<VOW>])|(([<CAP>])|(<M1>)))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "((<M0>)|(([<VOW>])|([<CAP>])|(<M1>)))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "((<M0>)|([<VOW>])|([<CAP>])).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "((<M0>)|([<VOW>])|([<CAP>])).*(([<LOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|([<VOW>])|([<CAP>]))|(<M1>))(.*)",
                "prediction": "((<M0>)|([<VOW>])|([<CAP>])).*(([<LOW>])|(<M1>)|(<M0>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter followed by a letter <U> zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": "([<CAP>].*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": "(.*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": "([<CAP>].*[<LOW>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": "(([<CAP>].*[<LET>].*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": "(([<CAP>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": "([<CAP>]).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": ".*([<CAP>].*[<LET>].*)*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": "\\b([<CAP>].*[<LET>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": "(.*[<CAP>].*).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*)*",
                "prediction": "(([<CAP>]).*([<LET>]).*)*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "items with a numeral preceding a vowel at least once .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "([<NUM>]).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "([<NUM>].*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "([<NUM>].*[<VOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "([<NUM>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "(([<NUM>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "(([<NUM>])*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "(([<NUM>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "(([<NUM>]).*([<VOW>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "(.*[<NUM>].*).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "([<NUM>]).*((.*[<VOW>].*)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "items with a letter preceding a capital letter preceding <M0> .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "([<LET>]).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "([<LET>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(.*[<LET>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "([<CAP>]).*([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "([<CAP>]).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "([<CAP>].*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<LET>].*[<CAP>].*).*(<M0>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<LET>])+).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<LET>]).*([<CAP>]).*).*(<M0>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines ending zero or more times with a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": "(.*)(([<LOW>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": "((.*)([<LOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": ".*((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": "(.*)(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": "((.*)(.*[<LOW>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": "((.*)([<LOW>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": "(.*)((.*[<LOW>].*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": ".*((.*)([<LOW>]))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": "((.*)([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>]))*",
                "prediction": "(.*)((([<LOW>])*)|([<LET>]))"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> followed by a vowel , a capital letter , or a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "(<M0>).*([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "(<M0>).*([<VOW>].*[<CAP>].*)|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "(<M0>).*(([<CAP>])|([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "(<M0>.*[<VOW>].*)|(([<CAP>])|([<LOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "((<M0>)|([<CAP>])|([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "(<M0>).*(([<CAP>])|([<CAP>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "(<M0>.*[<VOW>].*)|(([<CAP>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "((<M0>)|([<VOW>])|([<CAP>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|([<LOW>])).*",
                "prediction": "((<M0>)|([<CAP>])|([<VOW>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a character before capital letter or string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": ".*(..*[<CAP>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "(.)+(([<CAP>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "(..*[<CAP>].*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "(..*[<CAP>].*)|((<M1>)|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": ".*((.)+([<CAP>]).*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "(.)+((([<CAP>])|(<M0>)|(<M1>)))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "((.)+([<CAP>]).*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "(.)+((([<CAP>])|(<M0>)|(<M1>))).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "((.)+([<CAP>]).*)|((<M1>)|(<M0>))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words and the string <M0> before 3 or more vowels": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": "(\\b.*<M0>.*\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": "\\b(<M0>.*[<VOW>].*){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": "(\\b<M0>.*[<VOW>].*\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": ".*\\b(<M0>).*([<VOW>]).*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": "(\\b<M0>\\b.*[<VOW>].*\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": "\\b(<M0>).*(([<VOW>]){3,}).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": "(\\b(<M0>).*([<VOW>]).*\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": "\\b((<M0>).*([<VOW>]).*){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": "\\b((<M0>).*([<VOW>]).*)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>).*([<VOW>]).*\\b){3,}",
                "prediction": "\\b((<M0>).*([<VOW>]).*)|([<NUM>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words and 3 or more of a capital letter before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": "\\b[<CAP>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": "\\b([<CAP>].*<M0>.*){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": ".*\\b([<CAP>]).*(<M0>).*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": "\\b(([<CAP>]){3,}).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": "(\\b[<CAP>].*<M0>.*\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": "(\\b([<CAP>]).*(<M0>).*\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": "\\b(([<CAP>]).*(<M0>).*){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": "\\b([<CAP>]).*((<M0>){3,}).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": "\\b(([<CAP>]).*(<M0>).*)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>]).*((<M0>){3,}).*\\b",
                "prediction": ".*\\b([<CAP>].*<M0>.*\\b){3,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with character or string <M0> , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": ".*(.)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": "(..*<M0>.*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": "((.)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": "(.)|((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": ".*(.)|(<M0>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": "(.)|((<M0>){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": ".*((.)|(<M0>)){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": "(.*(.)|(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": "(.*..*)|((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)){2,}",
                "prediction": "(\\b(.)|(<M0>)\\b){2,}"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines that have the word <M0> before the word <M1> , which is then followed by the word <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(.*<M1>.*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M0>).*(<M1>.*<M2>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(.*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M1>.*<M2>.*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M1>.*<M0>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M1>).*(<M0>.*<M2>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M1>.*<M2>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M2>.*<M1>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M2>.*<M1>.*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with letter or string <M0> , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "((<M0>)|([<LET>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "(([<LET>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "((.*[<LET>].*)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": ".*([<LET>])|(<M0>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": ".*(([<LET>])|(<M0>)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "(\\b([<LET>])|(<M0>)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "(.*([<LET>])|(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "((([<LET>])|(<M0>)){2,}){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "\\b(([<LET>])|(<M0>)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "(.*[<LET>].*)|((<M0>){2,})"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "2 or more lines containing a letter or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "(([<CAP>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "(([<LET>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "(([<VOW>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "(([<LOW>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "([<LET>]).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "(([<LET>]){2,})|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "(.*([<LET>])|([<VOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "(.*[<LET>].*)|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "((.*[<LET>].*)|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<LET>])|([<VOW>]).*){2,}",
                "prediction": "\\b(([<LET>])|([<VOW>])){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "items with a letter or a character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": "((.)|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": ".*([<LET>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": "(([<LET>])|(.))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": ".*(.)|([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": "\\b(.)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": "\\b([<LET>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": ".*([<LET>])|(.)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": "(.*[<LET>].*)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": ".*([<CAP>])|(.)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])\\b",
                "prediction": ".*([<LET>])|(.)|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines that use the string <M0> twice or more , after a character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "((.)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "(..*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "((.){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "(.)+((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "((.)(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "\\b((.){2,}).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "(\\b(.)|(<M0>)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "(\\b..*<M0>.*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "((.)|(<M0>)).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)(.*)){2,}",
                "prediction": "((.)|(<M0>)).*(([<NUM>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 4 lower-case letters before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "([<LOW>].*[<NUM>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "(.*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "(([<LOW>]){4,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "([<LOW>].*[<NUM>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "([<LOW>]).*([<NUM>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){4,}).*([<NUM>]).*",
                "prediction": "(([<LOW>]){4,}).*(.*[<NUM>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines with a character after a letter at least 5 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": "(..*[<LET>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": "(([<LET>]){5,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": "([<LET>]).*(.){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": "([<LET>].*..*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": "(.){5,}.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": "(.)+(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": "((.){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": "([<LET>]).*((.){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": ".*([<LET>]).*(.){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((.){5,}).*",
                "prediction": "([<LET>]).*(..*<M0>.*){5,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with words with a letter before string <M0> of <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": "\\b[<LET>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": "\\b.*[<LET>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": "\\b([<LET>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": ".*\\b[<LET>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": "\\b([<LET>].*<M0>.*)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": "(\\b([<LET>]).*(<M0>).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": ".*\\b([<LET>]).*(<M0>).*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": "(\\b[<LET>].*<M0>.*\\b).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": "\\b([<LET>]).*(<M0>.*<M1>.*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "prediction": "\\b([<LET>].*<M0>.*).*(<M1>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with lower-case letters before 2 of the strings <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": "[<LOW>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": "([<LOW>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": ".*([<LOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": "([<LOW>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": "([<LOW>]).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": "(([<LOW>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": "([<LOW>]).*(<M0>.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": ".*([<LOW>].*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){2,}",
                "prediction": "\\b([<LOW>]).*((<M0>){2,}).*\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with lower-case letters before a number or character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "(([<LOW>]).*([<NUM>]).*)|(.)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "([<LOW>].*[<NUM>].*)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "(([<LOW>])|([<NUM>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "([<LOW>]).*(([<NUM>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "([<LOW>]).*((.)|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "(([<LOW>])+).*(([<NUM>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "(([<LOW>]).*([<NUM>]).*)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "(([<LOW>])*).*(([<NUM>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "(([<LOW>]).*([<NUM>]).*)|((.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])+).*(([<NUM>])|(.)).*",
                "prediction": "(([<LOW>])(.*)).*(([<NUM>])|(.)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with words with starting with a number before a capital letter in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "\\b([<NUM>]).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "\\b([<NUM>].*[<CAP>].*)(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "(\\b[<NUM>].*[<CAP>].*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "(\\b([<NUM>].*[<CAP>].*)(.*)\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "(\\b([<NUM>])(.*)\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "(\\b([<NUM>])([<CAP>])\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "(\\b([<NUM>]).*([<CAP>]).*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "(\\b([<NUM>])(.*)\\b).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])(.*)).*([<CAP>]).*\\b",
                "prediction": "\\b([<NUM>]).*([<CAP>].*[<CAP>].*).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines ending with a number after a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": "(.*)([<VOW>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": "(.*)([<NUM>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": "(.*)(.*[<NUM>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": "(.*)(.*[<VOW>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": "((.*)([<VOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": "(.*)(([<VOW>]).*([<NUM>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": ".*(.*)([<VOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": "((.*)([<VOW>])).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": "((.*)([<VOW>])).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.*)([<NUM>])).*",
                "prediction": "\\b((.*)([<VOW>])).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*)([<VOW>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*)([<NUM>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*)(.*[<NUM>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*)(.*[<VOW>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*)(([<VOW>]).*([<NUM>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": "((.*)([<VOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": "((.*)([<VOW>])).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": ".*(.*)([<VOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": "\\b((.*)([<VOW>])).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*([<NUM>]).*",
                "prediction": "((.*)([<VOW>])).*(([<NUM>])*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lines with number followed by capital letter before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "([<NUM>].*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(.*[<NUM>].*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(..*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "([<NUM>]).*([<CAP>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": ".*([<NUM>].*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(([<NUM>].*[<CAP>].*)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(([<NUM>].*[<CAP>].*)*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(([<NUM>])+).*([<CAP>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(([<NUM>].*[<CAP>].*)(.*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(([<NUM>])(.*)).*([<CAP>].*[<LOW>].*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines with with a letter followed by 2 or more of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": "([<LET>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": "\\b[<LET>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": "([<LET>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": "\\b([<LET>].*<M0>.*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": "(([<LET>]).*(<M0>).*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": "(([<LET>].*<M0>.*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": ".*([<LET>].*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": "(\\b[<LET>].*<M0>.*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": "(([<LET>]).*(<M0>).*)|(([<LET>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*){2,}",
                "prediction": "(.*[<LET>].*).*((<M0>){2,}).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing string <M0> at least once before string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": "((<M0>)+).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": "(.*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": ".*((<M0>)+).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": "(((<M0>)+)+).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": "(((<M0>)+).*(<M1>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": "((<M0>)+).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": "((<M0>)+).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": "((.*<M0>.*)+).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": "((<M0>)+).*(<M1>.*<M1>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*<M0>.*)+).*(<M1>).*",
                "prediction": "(.*<M0>.*).*((<M1>)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines containing words having the string <M0> or a letter followed by a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": "\\b(<M0>)|([<LET>].*[<NUM>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": "\\b(<M0>)|([<LET>].*[<NUM>].*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": "\\b(<M0>)|([<LET>]).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": ".*((<M0>)|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": "\\b(([<LET>])|(<M0>)).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": "(\\b(<M0>)|([<LET>])\\b).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": "(\\b<M0>.*[<LET>].*\\b).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": "(\\b(<M0>)|([<LET>]).*\\b).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>])).*([<NUM>]).*\\b",
                "prediction": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with <M0> , a letter , or a number before <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>.*[<LET>].*)|([<NUM>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": "(([<LET>])|([<NUM>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|([<NUM>])|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|([<CAP>])|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": ".*((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|(([<LET>])|([<NUM>])).*(<M1>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<NUM>])).*(<M1>).*",
                "prediction": "(((<M0>)|([<LET>])|([<NUM>]))|([<NUM>])).*(<M1>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines ending with words with a character 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": "\\b(.*)(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": "((.*)(.)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": "(.*)(\\b.*..*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": ".*(.*)(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": "(.*)(\\b..*..*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": "\\b(.*)(.*..*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": "(.*)(\\b(.){2,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": "(\\b(.*)(.)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": "(.*)(\\b.\\b){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(.){2,}\\b)",
                "prediction": "((.*)(.*..*)){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines with a number or the string <M0> before the string <M1> , 5 or more times in it": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "((([<NUM>])+)|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])+)|((<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>)|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>).*(<M1>).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>).*)|((<M1>){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "((<M0>)|([<NUM>])).*((<M1>){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>)).*((<M1>){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>).*).*((<M1>){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>).*)).*((<M1>){5,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> , a lower-case letter , or a letter after a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": "((.)+)|([<LOW>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": ".*([<LOW>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": ".*(<M0>)|([<LOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": "(.)+(([<LOW>])|([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": "(.)+((<M0>)|([<LOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": "(.)+(([<LOW>])|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": "((<M0>)|([<LOW>])|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": "(([<LOW>])|(<M0>)|(.)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": "((.)|([<LOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|([<LOW>])|([<LET>])).*",
                "prediction": "(([<LOW>])|(<M0>)|(.)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with a vowel after a lower-case letter , the string <M0> , or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(<M0>).*(([<LOW>])|(<M1>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(<M1>).*(([<LOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|(<M1>)|([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<VOW>])|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M1>)|(<M0>)|([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(<M0>)|(<M1>)).*([<VOW>]).*",
                "prediction": "(.*[<VOW>].*).*(([<LOW>])|(<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines containing a letter which then have the <M0> string prior to a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(.*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": ".*[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": "([<LET>]).*(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": "([<LET>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": "([<LOW>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": "([<LET>].*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(<M0>.*[<LET>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(<M0>).*([<LET>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": "(.*[<LET>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<VOW>]).*",
                "prediction": ".*([<LET>].*<M0>.*).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number before 2 or more of a character or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "([<NUM>].*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "([<NUM>]).*((.)|([<VOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "([<NUM>]).*((.)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "(([<NUM>]).*(.)|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "(([<NUM>]).*(.)|([<VOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "([<NUM>]).*((.)|([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "([<NUM>]).*(((.){2,})|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "([<NUM>]).*(((.)|([<VOW>])){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "([<NUM>]).*((.)|(([<VOW>]){2,})).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "prediction": "(([<NUM>]).*(.)|(([<VOW>]){2,})).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a lower-case letter or a capital letter , followed by a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LOW>])+)|([<CAP>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LOW>])*)|([<CAP>].*[<NUM>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LOW>])|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(.*[<LOW>].*)|(([<CAP>].*[<NUM>].*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(([<CAP>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": ".*(([<LOW>])|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(.*[<LOW>].*)|(([<CAP>]).*([<NUM>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LOW>])|([<CAP>])|([<NUM>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LOW>])|([<CAP>])|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": ".*(([<LOW>])|([<CAP>])|([<NUM>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with lower-case letter or number , 4 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": "([<LOW>])|(([<NUM>]){4,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": "(([<LOW>])|([<NUM>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": "(.*[<LOW>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": "([<LOW>]).*(([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": ".*(([<LOW>])|([<NUM>])){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": "(.*[<LOW>].*)|(([<NUM>]){4,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": "\\b(([<LOW>])|([<NUM>])){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": "(.*([<LOW>])|([<NUM>]).*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": "((([<LOW>])|([<NUM>])){4,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])){4,}",
                "prediction": "((.*[<LOW>].*)|([<NUM>])){4,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines which are containing either the string <M0> , a character , or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": ".*([<NUM>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": ".*.*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": ".*(<M0>)|([<NUM>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": ".*([<LOW>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": ".*(<M0>)|([<LET>])|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": ".*(<M0>)|(.)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": ".*(.)|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": ".*([<NUM>])|(.)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": "\\b(<M0>)|(.)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)|([<NUM>]).*",
                "prediction": ".*\\b(<M0>)|(.)|([<NUM>])\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with no or multiple vowels followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "([<VOW>].*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])*)|([<LOW>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "([<VOW>]).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])|([<LOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])|([<LOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])|([<CAP>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])|([<LET>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])*)|([<LOW>]).*([<LOW>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing more than 1 number before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": ".*([<NUM>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "([<NUM>].*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "([<NUM>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": ".*([<NUM>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "(([<NUM>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "(([<NUM>])*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "([<NUM>]).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "(.*[<NUM>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "(([<NUM>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "((.*[<NUM>].*)+).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines that contain a character , letter , or 0 or more instances of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "((.)|([<LET>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "((.)|([<LET>]))*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "(.*..*)|((<M0>)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "((.)|([<LET>])|(<M0>))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "(.*(.)|([<LET>]).*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "(.*(.)|([<LET>])|(<M0>).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "(\\b(.)|([<LET>])|(<M0>)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "((.)|([<LET>])|(<M0>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "((.)|([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)|([<LET>])|(<M0>).*)*",
                "prediction": "((.)|([<LET>])|(<M0>)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines that start with a vowel or <M0> before <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "(([<VOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "(([<VOW>].*<M0>.*)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "(([<VOW>])|(<M0>)).*((<M1>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "(([<VOW>])|(<M0>)).*((<M1>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "((([<VOW>])|(<M0>))(.*)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "(([<VOW>].*[<VOW>].*)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "(([<VOW>])|(<M0>)).*((<M1>)(.*)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "((([<VOW>])(.*))|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])(.*))|((<M0>).*(<M1>).*)",
                "prediction": "((<M0>)(.*))|(([<VOW>]).*(<M1>).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with words with either lower-case letter , vowel , or string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b.*[<LOW>].*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b([<LOW>])|(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b.*[<LOW>].*|([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b([<VOW>])|([<LOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b.*[<LOW>])|([<VOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": ".*\\b([<LOW>])|([<VOW>])|(<M0>)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b.*([<LOW>])|([<VOW>])|(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b.*([<LOW>])|(<M0>)|([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<VOW>])|(<M0>)\\b",
                "prediction": "\\b.*[<LOW>].*|([<VOW>])|(<M0>).*\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and the string <M0> before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": "\\b<M0>.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": "\\b.*<M0>.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": "(\\b<M0>.*[<LOW>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": "(\\b<M0>.*[<LOW>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": "\\b(<M0>.*[<LOW>].*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": "\\b(<M0>.*[<LOW>].*)*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": "\\b(<M0>).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": ".*\\b<M0>.*[<LOW>].*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": "\\b(<M0>.*[<LOW>].*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<LOW>].*)+\\b",
                "prediction": "(\\b(<M0>).*([<LOW>]).*\\b)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines with 5 or more characters or lower-case letters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "((.)|([<LOW>])){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "(([<LET>])|(.)){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "(([<CAP>])|(.)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "((.){5,})|([<LOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "(.*(.)|([<LOW>]).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "(.)|(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "(((.)|([<LOW>])){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "(((.){5,})|([<LOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "(((.)|([<LOW>])){5,}){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){5,}",
                "prediction": "(((.){5,})|([<LOW>])){5,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter , <U> at least twice , before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "([<CAP>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "([<CAP>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "(([<CAP>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "(([<CAP>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "((([<CAP>]){2,})|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "(([<CAP>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "(\\b([<CAP>]){2,}\\b).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "\\b(([<CAP>]){2,}).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "((([<CAP>]){2,})(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "((([<CAP>]){2,})|(<M0>)).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with a lower-case letter before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "(.*)(.*[<LOW>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "(.*)([<LOW>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "((.*)([<LOW>].*[<VOW>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "(.*)(([<LOW>].*[<VOW>].*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "((.*)([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "((.*)([<LOW>])).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "(.*)(([<LOW>]).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "(.*)(.*([<LOW>]).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "((.*)(.*[<LOW>].*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "((.*)([<LOW>])).*(.*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that at least 3 times have have a capital letter preceding a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": "([<CAP>]){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": "([<CAP>].*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": "\\b([<CAP>]).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": ".*([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": "(([<CAP>]){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": "([<CAP>]).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": ".*([<CAP>].*[<LOW>].*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": "(.*[<CAP>].*).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){3,}).*",
                "prediction": "\\b([<CAP>].*[<LOW>].*){3,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines which are containing words that contain only a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": "\\b[<LET>]"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": "\\b[<LET>]\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": ".*[<LET>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": "\\b([<LET>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": "\\b([<LET>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": "(\\b[<LET>]\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": "(.*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": "\\b.*[<LET>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b[<LET>]\\b.*",
                "prediction": ".*\\b[<LET>]\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines ending with string <M0> , 4 or more times or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "((.*)(<M0>))|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "((.*)(<M0>))|(([<LOW>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "(.*)((<M0>){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "(.*)((<M0>){4,})|([<LOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "(.*)(((<M0>){4,})|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "((.*)((<M0>)|([<LOW>]))){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "(.*)((<M0>)|(([<LOW>]){4,}))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "((.*)(<M0>))|([<LOW>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "((.*)((<M0>){4,}))|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>){4,})|([<LOW>]))",
                "prediction": "((.*)((<M0>)){4,})|([<LOW>])"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with a capital letter preceding a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": "(.*)([<CAP>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": "(.*)(.*[<CAP>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": "(.*)(([<CAP>].*[<VOW>].*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": "(.*)(\\b[<CAP>].*[<VOW>].*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": "((.*)([<CAP>].*[<VOW>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": "((.*)([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": "(.*)(([<CAP>]).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": ".*(.*)([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": "((.*)([<CAP>])).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)",
                "prediction": "(.*)(\\b([<CAP>]).*([<VOW>]).*\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with only a vowel before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "([<VOW>].*<M0>.*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "([<VOW>].*<M0>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "([<VOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "(([<VOW>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "([<VOW>]).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "(([<VOW>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "([<VOW>]).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "([<VOW>]).*(\\b<M0>\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])+).*(<M0>).*",
                "prediction": "(.*[<VOW>].*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "items with a letter at least 2 times prior to <M0> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "([<LET>].*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "(([<LET>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "(([<LET>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "(([<LOW>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "(([<LET>].*<M0>.*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "((([<LET>]){2,})|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "(([<CAP>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*(<M0>).*",
                "prediction": "((([<LET>]){2,})|(<M0>))(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a numeral or an upper case letter at least 5 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "([<CAP>]){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "(([<CAP>])|([<NUM>])){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "(([<NUM>])|([<CAP>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "(([<CAP>])|([<CAP>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "(([<CAP>])|([<LET>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "(([<CAP>])|([<LOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "(\\b([<CAP>])|([<CAP>])\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "(([<CAP>])|([<NUM>]))55,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "(([<CAP>]){5,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<NUM>])){5,}",
                "prediction": "([<CAP>]).*(([<NUM>]){5,}).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with at least 2 vowels before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "([<VOW>].*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<CAP>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<VOW>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<LET>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<LOW>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<NUM>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "((([<VOW>]){2,})(.*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "([<VOW>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "((([<VOW>]){2,})|([<LOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "((([<VOW>]){2,})|([<LET>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a vowel or number , zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": "(([<VOW>])|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": "((.)|([<VOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": "((([<VOW>])|([<NUM>]))*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": "(([<NUM>])|([<VOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": "\\b(([<VOW>])|([<NUM>]))*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": "(\\b([<VOW>])|([<NUM>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": "(.*([<VOW>])|([<NUM>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": ".*(([<VOW>])|([<NUM>]))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": "((.*[<VOW>].*)|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<NUM>]))*",
                "prediction": "(\\b([<VOW>])|([<NUM>])|([<NUM>])\\b)*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> followed by either the string <M1> , a letter , or a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>).*(<M1>)|([<LET>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "(.*<M0>.*<M1>.*)|([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>).*(<M1>.*[<LET>].*)|([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "((<M0>)|(<M1>)|([<CAP>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "((<M0>)|(<M1>)|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "((<M0>)|(<M1>)|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<LET>])|([<CAP>])).*",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> or <M1> or letter before string <M2>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M1>)|(<M0>)|([<LET>])).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "(<M0>)|((<M1>)|([<LET>])).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|([<LOW>])).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": ".*((<M0>)|(<M1>)|([<LET>])).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|((<M1>)|([<LET>])).*(<M2>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "(((<M0>)|(<M1>)|([<LET>]))).*(<M2>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with a letter or the strings <M0> before <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "((<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(.*[<LET>].*)|(<M0>.*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(.*[<LET>].*)|((<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)).*((<M1>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)).*((<M1>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": ".*(([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*",
                "prediction": "(([<LET>].*<M0>.*)|(<M1>)).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing string <M0> or a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": ".*(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": "\\b(.)|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": ".*(.)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": "(.*<M0>.*)|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": "\\b(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": "(.*<M0>.*)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": "\\b((<M0>)|(.))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": ".*((<M0>)|(.))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": ".*((<M0>)|(.))*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|(.)+",
                "prediction": ".*(<M0>)|((.)+).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "lines with a lower-case letter or a vowel before a character in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "(([<LOW>])|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "(([<LOW>])|([<VOW>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "([<LOW>]).*(([<LOW>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "([<LOW>]).*(([<VOW>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "([<LOW>]).*(([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "([<LOW>]).*((.)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "(.*[<LOW>].*)|(([<VOW>]).*(.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "(([<LOW>])+)|(([<VOW>]).*(.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "(([<LOW>])|([<VOW>])|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*(.)+",
                "prediction": "(([<LOW>])|([<VOW>])).*((.)+).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines with <M0> a letter before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LET>])+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "((<M0>)+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LET>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "(<M0>).*([<LET>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "((<M0>)(.*)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "(<M0>.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "([<LET>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LET>])|(<M0>)).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have a letter in lower-case followed by a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": ".*[<LOW>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": ".*[<LET>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>].*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LET>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": "(([<LOW>])+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>].*[<NUM>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>]).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": "(.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*([<NUM>]).*",
                "prediction": "([<LOW>].*[<NUM>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that begin with a capital and end with a lowercase": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "([<CAP>])(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "((.*)([<LOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "([<CAP>].*..*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "(([<CAP>])(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "([<CAP>]).*((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "(([<CAP>])(.*)).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "(([<CAP>])(.*))|(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "(([<CAP>])(.*)).*((.*)(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "(([<CAP>])(.*)).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "(([<CAP>])(.*)).*((.*)([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the words with the string <M0> at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": "\\b(<M0>){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": "(\\b<M0>\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": ".*\\b(<M0>){2,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": "\\b.*(<M0>){2,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": "(\\b.*<M0>.*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": "\\b(.*<M0>.*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": "\\b((<M0>){2,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>){2,}\\b",
                "prediction": "(\\b(<M0>){2,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that end with a capital letter or <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": "(.*)(([<CAP>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": "((.*)([<CAP>]))|(<M0>)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": "(.*)((<M0>)|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": "((.*)([<CAP>]))|((<M0>)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": "(.*)((([<CAP>])|(<M0>))+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": ".*((.*)([<CAP>]))|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": "(.*)((.*[<CAP>].*)|(<M0>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": "((.*)(([<CAP>])|(<M0>)))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": ".*(.*)(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])|(<M0>))",
                "prediction": "((.*)([<CAP>]))|(.*<M0>.*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "items with an upper case letter , at least 4 times preceding a character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "([<CAP>]){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "([<CAP>].*..*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "((.){4,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "(([<CAP>]){4,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "(([<LET>]){4,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "(([<LOW>]){4,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "((([<CAP>]){4,})(.)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "((([<CAP>]){4,})|(.))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "((([<CAP>]){4,})(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){4,}).*(.)+",
                "prediction": "((([<CAP>]){4,})|(.)).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with zero or more characters before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": "(.*..*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": "(..*[<VOW>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": "((.)*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": "(.*(.)*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": "((.)*).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": ".*((.)*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": "(.)*((.)*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": "(.*..*).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": "((..*[<VOW>].*)*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)*).*([<VOW>]).*",
                "prediction": "((.)*).*(.*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines ending in 3 or more characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": "(.*)(.*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": "(.*)((.){3,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": "(.*)(\\b(.){3,}\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": "((.*)(.)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": ".*((.*)(.)){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": "(.*)(.*(.){3,}.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": "(.*)(((.){3,}))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": "(.*)(.*(.){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": ".*(.*)((.){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){3,})",
                "prediction": "\\b((.*)(.)){3,}\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a vowel <U> before a letter followed by <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "(.)+([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "([<VOW>]).*([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "([<VOW>]).*(..*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "([<VOW>].*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "(([<VOW>])+).*([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "(.*[<VOW>].*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "(([<VOW>]).*([<LET>]).*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "(([<VOW>].*[<LET>].*).*(<M0>).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "(([<VOW>])(.*)).*([<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*([<LET>].*<M0>.*).*",
                "prediction": "([<VOW>]).*(([<LET>]).*(<M0>).*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines that start with a character 2 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "(.){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "((.){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "(.*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "((.)(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "((.){2,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "\\b((.){2,})(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "(\\b(.){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "(((.)(.*)){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "(([<LET>])(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})(.*)",
                "prediction": "(\\b(.)(.*)\\b){2,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines where 2 or more times there is a letter or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "((<M0>)|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "((.)|([<LET>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "(([<LET>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "(([<CAP>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "\\b(([<LET>])|(<M0>)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": ".*(([<LET>])|(<M0>)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "((([<LET>])|(<M0>)){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "(.*([<LET>])|(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "((([<LET>])|(<M0>)){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){2,}",
                "prediction": "((([<LET>])|(<M0>)){2,}){2,}"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with an upper case letter and a vowel at least 5 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": "([<CAP>]){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": ".*([<CAP>]){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": "\\b([<CAP>]){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": "(.*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": "(([<CAP>])(.*)){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": "(([<CAP>])|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": "([<VOW>]).*(([<CAP>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": "(([<CAP>]){5,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": "([<CAP>]).*(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){5,}",
                "prediction": "([<CAP>].*[<VOW>].*){5,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel or 2 or more capital letters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": "(([<VOW>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": "([<VOW>])|(([<CAP>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": "([<CAP>])|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": "([<VOW>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": "(\\b([<VOW>])|([<CAP>])\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": "\\b(([<VOW>])|([<CAP>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": ".*(([<VOW>])|([<CAP>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": "(.*[<VOW>].*)|(([<CAP>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": "([<CAP>]).*(([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])){2,}",
                "prediction": "(.*([<VOW>])|([<CAP>]).*){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with a capital letter before string <M0> then letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": "\\b[<CAP>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": "\\b[<CAP>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": "\\b[<CAP>].*<M0>.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": "\\b.*[<CAP>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": ".*\\b[<CAP>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": "\\b[<CAP>].*<M0>.*[<LET>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": "(\\b[<CAP>].*<M0>.*\\b).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": "\\b([<CAP>]).*(<M0>.*[<LET>].*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*([<LET>]).*\\b",
                "prediction": "(\\b([<CAP>]).*(<M0>).*\\b).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines with capital letters after a lower case letter .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": "([<LOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": "[<LOW>].*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": "(([<LOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": "([<LOW>]).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": ".*([<LOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": "(([<LOW>])+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": "([<LOW>]).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": "(.*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": "(([<LOW>])(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*([<CAP>]).*",
                "prediction": "([<LOW>].*[<CAP>].*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines with the string <M0> , a vowel , or the string <M1> before the string <M2>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|([<VOW>])|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|([<VOW>])).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M1>)|(<M0>)|([<VOW>])).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M1>)|([<VOW>])|(<M0>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M1>)|([<VOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "\\b((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "(((<M0>)|([<VOW>])|(<M1>))|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])|(<M1>)).*(<M2>).*",
                "prediction": "(\\b(<M0>)|([<VOW>])|(<M1>)\\b).*(<M2>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines with or without lower-case letter or upper case letter before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])*)|([<CAP>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])*)|([<LET>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])*)|(([<CAP>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])*)|(([<LET>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])*)|(([<CAP>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])|([<CAP>])|(<M0>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "((([<LOW>])*)|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])|([<CAP>])|([<LET>])).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which are containing a character before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": "(.)+([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": ".*..*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": ".*(.)+([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": "(..*[<LOW>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": "(.)+(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": "\\b(.)+([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": "(..*[<LOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": "(.*..*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": ".*(..*[<LOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)+([<LOW>]).*",
                "prediction": ".*(..*[<LOW>].*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "items with a character preceding a vowel or <M0> .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "(..*[<VOW>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "(.)+((<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "(.)+(([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "((.)+([<VOW>]).*)|(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "(..*[<VOW>].*)|((<M0>)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "(..*[<VOW>].*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "((..*[<VOW>].*)|(<M0>))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "((.)+([<VOW>]).*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "((.)+([<VOW>]).*)|((<M0>)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<VOW>])|(<M0>)).*",
                "prediction": "((.)+([<VOW>]).*)|((<M0>).*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "items with words containing a letter or <M0> .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|(<M0>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b(<M0>)|([<LET>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b(.*[<LET>].*)|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|(<M0>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|([<LOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|(<M0>)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<LOW>])|(<M0>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b(<M0>)|([<LET>])|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with a character or 2 or more vowels": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "((.)|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": ".*(.)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(..*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(([<VOW>])|(.)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(.)|(([<VOW>]){2,})).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(.*..*)|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(.)|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(.)|(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "\\b((.)|([<VOW>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(\\b(.)|([<VOW>])\\b){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lower-case letter before a character 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "([<LOW>].*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "[<LOW>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "<LOW>].*(.){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "([<LOW>]).*(.){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "([<LOW>]).*(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "(([<LOW>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "([<LOW>]).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "([<LOW>]).*(((.){2,}).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){2,}).*(.)+",
                "prediction": "(([<LOW>]).*(.)+){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing words with at least 1 <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": "\\b([<LET>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": "\\b([<VOW>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": "\\b((<M0>)+)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": "\\b.*(<M0>)+\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": "\\b(.*<M0>.*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": "\\b.*(<M0>)+.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": ".*\\b(<M0>)+\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b(<M0>)+\\b.*",
                "prediction": "\\b(.*[<LET>].*)+\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing a character , 2 or more times or the string <M0> followed by a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "(.){2,}(<M0>)|([<VOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "((.){2,})|(<M0><M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "((.){2,})|(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "((.){2,})|(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "(([<VOW>]){2,})|(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "((..*[<VOW>].*){2,})|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "(([<LET>]){2,})|(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "(((.){2,})|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "((.){2,})|((<M0>).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,})|((<M0>).*([<VOW>]).*)",
                "prediction": "((.){2,})|((<M0>.*[<VOW>].*)){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "items terminating with a numeral preceding <M0> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": "([<NUM>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": "(.*)([<NUM>].*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": "(.*)(.*[<NUM>].*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": "((.*)([<NUM>].*<M0>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": "((.*)([<NUM>].*<M0>.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": "(.*)(([<NUM>].*<M0>.*)*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": "((.*)([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": "([<NUM>]).*((.*)(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": ".*(.*)([<NUM>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(<M0>).*",
                "prediction": "(([<NUM>])(.*)).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines that have a lower-case letter at the beginning 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": ".*([<LOW>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": "(.*)(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": "((.*)([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": "(([<LOW>]){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": "(([<LOW>])(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": "\\b(([<LOW>]){2,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": "(\\b([<LOW>])(.*)\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": "\\b(([<LOW>])(.*)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)){2,}",
                "prediction": "(\\b([<LOW>]){2,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines which have a number or a vowel before a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<NUM>])|([<VOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": ".*([<NUM>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(.*[<NUM>].*)|([<VOW>].*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<NUM>])|([<CAP>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<NUM>])|([<LET>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<CAP>])|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<NUM>])|([<LET>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": ".*(([<NUM>])|([<VOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<NUM>])|([<CAP>])|([<VOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LET>]).*",
                "prediction": "(([<NUM>])|([<VOW>])|([<LET>])).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and stating with the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": "\\b(<M0>)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": "\\b(.*<M0>.*)(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": "\\b((<M0>)(.*))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": "\\b.*(<M0>)(.*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": "\\b.*(<M0>)+.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": "(\\b.*<M0>.*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": ".*\\b(<M0>)(.*)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": "\\b.*(<M0>).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b)+",
                "prediction": "\\b(<M0>).*((.*)([<LET>])).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with an upper case letter preceding <M0> or <M1> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": "([<CAP>].*<M0>.*)|((<M1>)*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": "([<CAP>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": "([<CAP>]).*((<M1>)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": ".*([<CAP>].*<M0>.*)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": "([<CAP>]).*((.)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": "(<M0>).*(([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": ".*([<CAP>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": "(([<CAP>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": "([<CAP>].*<M0>.*)|((<M1>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|(<M1>)).*",
                "prediction": "(.*[<CAP>].*).*((<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "line with a lower-case letter , 4 times before <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "(([<LOW>]){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "((.){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "([<LOW>].*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "\\b(([<LOW>]){4,}).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": ".*(([<LOW>]){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "(([<LOW>].*[<LET>].*){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": ".*([<LOW>].*<M0>.*){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "([<LOW>]).*((<M0>){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "(([<LOW>].*<M0>.*){4,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "all lines": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "(.*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "((.*)([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "((.*)([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "((.*)([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "(.*[<CAP>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "((.*)(.*[<LOW>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "((.*)(.*[<LET>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "((.*)([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "(.*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "((.*)([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "((.*)([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "(.*[<CAP>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "((.*)(.*[<LOW>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "((.*)(.*[<LET>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "(.*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "((.*)([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "((.*)([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "((.*)([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "((.*)(.*[<LET>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "(.*[<CAP>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "((.*)(.*[<LOW>].*))+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words ending with a character at least 5 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "\\b(.*)(.*..*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "\\b(.*)(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "\\b(.*)(.){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "\\b(.*)(..*..*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "\\b((.*)(.)){5,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "(\\b(.*)(.)\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "\\b(.*)((.){5,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "\\b(.*)(..*[<LET>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "\\b(.*)(..*[<VOW>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(.)\\b){5,}",
                "prediction": "\\b(.*)(..*[<LET>].*){5,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing <M0> or at least 1 capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": "(([<CAP>])|(<M0>))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": "((<M0>)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": "((<M0>)+)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": "(.*(<M0>)|([<CAP>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": "((.*<M0>.*)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": ".*(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": ".*((<M0>)|([<CAP>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": "(.*<M0>.*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": "((<M0>)+)|(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>]))+",
                "prediction": ".*((<M0>)+)|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character followed by string <M0> or string <M1> at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "(..*<M0>.*)|((<M1>)+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "((..*<M0>.*)|(<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "((.)|(<M0>.*<M1>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "(.)+((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "((.)+(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "((.)+(<M0>.*)|(<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "((.)|(<M0>)).*((<M1>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "(.)+(((<M0>)|(<M1>))+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "((.)|((<M0>).*(<M1>).*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((..*<M0>.*)|(<M1>))+",
                "prediction": "((.)+(<M0>)|(<M1>)).*((<M2>)+).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the strings <M0> and <M1> , or before the string <M2> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "(.*<M0>.*<M1>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": ".*(<M0>)|(<M1>)|(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "(.*<M0>.*<M1>.*)|(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "((<M0>)|(<M1>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "((<M0>)|(<M1>)|(<M2>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "(.*<M0>.*)|((<M1>).*(<M2>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": ".*((<M0>)|(<M1>)|(<M2>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "(\\b(<M0>)|(<M1>)|(<M2>)\\b).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "(.*(<M0>)|(<M1>)|(<M2>).*).*(<M2>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines followed by a character letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": "..*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": "[<LET>].*..*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": ".*..*[<LET>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": "(..*[<LET>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": "(..*[<LET>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": "([<LET>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": "([<LET>].*..*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": "([<LET>].*..*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": "(..*[<LET>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<LET>].*",
                "prediction": "([<LET>].*..*).*(<M0>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with vowel , zero , or more times before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": "(([<VOW>])*)*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": "(([<VOW>])*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": "((.)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": "(([<VOW>])*)*.*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": "(([<VOW>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": "([<VOW>]).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": "((([<VOW>])*)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": ".*(([<VOW>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": "((([<VOW>])*)|([<LET>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<LET>]).*",
                "prediction": "(([<VOW>])*)|(([<LET>]).*([<LET>]).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines with a letter , a number , or a vowel .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": ".*([<LET>])|([<NUM>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": "(([<LET>])|([<NUM>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": ".*([<NUM>])|([<LET>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": "(.*[<LET>].*)|(([<NUM>])|([<VOW>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": "(.*([<LET>])|([<NUM>])|([<VOW>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": "(([<LET>])|([<NUM>])|([<VOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": "([<LET>]).*(([<NUM>])|([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": "(.*[<LET>].*)|(([<NUM>])|([<VOW>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b",
                "prediction": "(([<LET>])|([<NUM>])|([<VOW>])).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a number then capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(<M0>.*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(<M0>).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(.*<M0>.*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "(<M0>).*([<NUM>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": ".*(<M0>.*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "((<M0>)+).*([<NUM>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "((<M0>.*[<NUM>].*)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "((<M0>).*([<NUM>]).*)|([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "((<M0>).*([<NUM>]).*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<CAP>]).*",
                "prediction": "((<M0>)(.*)).*([<NUM>].*[<CAP>].*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with a capital letter before words with string <M0> before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "([<CAP>]).*(\\b(<M0>)*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "([<CAP>]).*(\\b(<M0>).*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "([<CAP>].*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "([<CAP>]).*(\\b(<M0>)+\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "(([<CAP>])+).*(<M0>.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "([<CAP>]).*(\\b(<M0>).*\\b).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "([<CAP>]).*\\b(<M0>.*[<LOW>].*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "([<CAP>]).*(\\b(<M0>).*[<LOW>].*\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(\\b<M0>.*[<LOW>].*\\b).*",
                "prediction": "([<CAP>]).*(\\b(<M0>).*([<LOW>]).*\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a capital letter and stating with a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": ".*[<CAP>].*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": ".*([<CAP>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "([<CAP>].*[<VOW>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "([<CAP>]).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "([<CAP>]).*(([<VOW>])(.*)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "([<CAP>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "([<CAP>]).*((.*)([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "(([<CAP>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "(.*[<CAP>].*).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "([<CAP>]).*(([<VOW>])|([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines staring in words with string <M0> or <M1> or a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": "\\b(<M0>)|(<M1>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": "(.*)((<M0>)|(<M1>)|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": ".*(<M0>)|(<M1>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": "(.*)(\\b(<M0>)|(<M1>)\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": ".*(<M0>)|((<M1>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": "(.*)(\\b(<M0>)|(<M1>)|([<CAP>])\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<CAP>])\\b)(.*)",
                "prediction": "\\b((<M0>)|(<M1>)|([<CAP>]))|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "items with <M0> preceding <M1> , <M2> , or a vowel .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(<M3>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*((<M1>)|(<M3>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*((<M1>)|([<VOW>])|(<M2>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*((<M1>)|(<M1>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>).*(<M1>).*)|((<M2>)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<VOW>])|(<M2>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*((<M1>)|([<VOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*",
                "prediction": "(.*<M0>.*).*((<M1>)|(<M2>)|([<VOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter after the string <M0> , a lower-case letter , or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": "(.)+((<M0>)|([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": ".*(<M0>)|([<LOW>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<LOW>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<LOW>])|([<NUM>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<LOW>])|([<CAP>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<LOW>])|([<NUM>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<LOW>])|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|(<M0>)|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|([<NUM>])).*([<CAP>]).*",
                "prediction": "([<CAP>]).*((<M0>)|([<LOW>])|([<NUM>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words with at least 1 character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": "\\b(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": "(\\b.\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": "\\b.*..*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": "\\b.*\\b.\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": "\\b([<LET>])+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": "\\b.*(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": "\\b.*(.)+\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": "(\\b.*..*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|([<LET>])\\b",
                "prediction": ".*\\b(.)+\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines with the string <M0> and 0 or more lower-case letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": ".*(<M0>)*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": "((<M0>)|([<LOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": "(<M0>.*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": ".*(<M0>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": "((<M0>)*)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": ".*(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": "(<M0>).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": "((<M0>)*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": "(<M0>).*(([<LOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])*).*",
                "prediction": "((<M0>)|([<LOW>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> with a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": ".*(<M0>)+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": ".*(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": ".*<M0>.*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": ".*(<M0>).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": "(.*<M0>.*)|([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": "(.*<M0>.*)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": ".*(<M0>)+.*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": "(.*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": "\\b(<M0>).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": "(<M0>).*((.*)([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing at least 1 occurrence of a capital or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": "(([<CAP>])|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": "((.)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": "(([<CAP>])+)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": ".*([<CAP>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": "\\b(([<CAP>])|([<LOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": ".*(([<CAP>])|([<LOW>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": "(.*[<CAP>].*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": "(.*([<CAP>])|([<LOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>]))+",
                "prediction": "((.*[<CAP>].*)|([<LOW>]))+"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel , 2 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "([<VOW>]){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "(([<VOW>])+){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "(.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": ".*([<VOW>]){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "\\b([<VOW>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "(([<VOW>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "(([<VOW>]){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "(([<VOW>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "(([<VOW>])(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){2,}\\b",
                "prediction": "(([<VOW>]){2,})|(.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words starting with string <M0> before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "(\\b<M0>.*[<NUM>].*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "\\b(<M0>).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "\\b(<M0>.*[<NUM>].*)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "\\b(<M0>)(.*)\\b([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "\\b(<M0>)(.*)\\b([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "\\b((<M0>)(.*)).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "(\\b(<M0>).*([<NUM>]).*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "(\\b(<M0>)(.*)).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)(.*)\\b).*([<NUM>]).*",
                "prediction": "\\b(<M0>).*(([<NUM>])(.*)).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter before a lower-case letter followed by a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "([<CAP>].*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "(.)+([<CAP>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "([<CAP>]).*([<LOW>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "([<CAP>]).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "([<CAP>]).*(..*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "(([<CAP>]).*([<LOW>]).*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "([<CAP>].*[<LOW>].*).*(.).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "(([<CAP>])+).*([<LOW>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "(.*[<CAP>].*).*([<LOW>].*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*).*(.)+",
                "prediction": "(([<CAP>])(.*)).*([<LOW>].*..*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "lines that contain words with a number or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": "\\b([<NUM>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": "\\b([<VOW>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": "(\\b([<NUM>])|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": "\\b(([<NUM>])+)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": ".*\\b([<NUM>])|([<VOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": "\\b(.*[<NUM>].*)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": "\\b.*([<NUM>])|([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": "\\b([<NUM>])|(.*[<VOW>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|([<NUM>])\\b",
                "prediction": ".*\\b([<NUM>])|([<VOW>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines having words ending with a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": "\\b(.*)([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": "(\\b(.*)([<CAP>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": "\\b((.*)([<CAP>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": "(\\b(.*)([<CAP>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": "\\b.*(.*)([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": ".*\\b(.*)([<CAP>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": "(.*)(\\b([<CAP>])*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": "\\b(.*)(.*[<CAP>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": "(\\b.*(.*)([<CAP>]).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)([<CAP>])\\b",
                "prediction": "(\\b.*(.*)([<CAP>])\\b).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": ".*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": "([<VOW>])+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": ".*([<VOW>])+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": "(.*[<VOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": "(.*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": "((.*)([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": "([<VOW>]).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": ".*([<VOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": "(.*[<VOW>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<VOW>].*",
                "prediction": "(.*[<VOW>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with string <M0> or string <M1> followed by number , 3 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "((<M0>)|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "((<M0>)|(<M1>).*([<NUM>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "(((<M0>)|(<M1>)){3,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "((<M0>)|(<M1>)).*(([<NUM>]){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "((<M0>)|(<M1>.*[<NUM>].*)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "((<M0>)|(<M1>).*([<NUM>]).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "((<M0>)|(<M1>).*)).*([<NUM>]){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "((<M0>)|((<M1>).*([<NUM>]).*)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "((<M0>.*[<NUM>].*)|(<M1>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*[<NUM>].*)){3,}",
                "prediction": "((<M0>)|(<M1>).*)).*(([<NUM>]){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines having either a capital letter or string <M0> or letter before <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": "(.*[<CAP>].*)|((<M0>)|([<LET>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>)|([<LOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": "((<M0>)|([<CAP>])|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": "(([<CAP>])|([<CAP>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": "(([<CAP>])|([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": ".*(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<LET>])).*(<M1>).*",
                "prediction": "(.*([<CAP>])|(<M0>)|([<LET>]).*).*(<M1>).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a capital letter , number , or string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": "\\b([<CAP>])|([<NUM>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": ".*([<CAP>])|([<NUM>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": ".*([<CAP>])|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": "(.*[<CAP>].*)|((<M0>)|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": ".*([<NUM>])|([<CAP>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": ".*(<M0>)|([<CAP>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": "(.*[<CAP>].*)|(([<NUM>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": "(.*[<CAP>].*)|(([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": "(([<CAP>])|([<NUM>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|([<NUM>])|(<M0>).*",
                "prediction": "(([<CAP>])|([<NUM>])|(<M0>)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing words that have a character preceding a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": "\\b..*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": "\\b.*..*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": "\\b(.)+([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": "(\\b..*[<VOW>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": "(\\b..*[<VOW>].*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": "\\b(..*[<VOW>].*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": "\\b.*(.)+([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": "\\b(.)+(.*[<VOW>].*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": ".*\\b..*[<VOW>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<VOW>]).*\\b",
                "prediction": "(\\b.*..*\\b).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lines that end with a number after a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": "(.*)((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": "(.*)((.)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": "(.*)([<NUM>].*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": "(.*)(..*[<NUM>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": "((.*)(..*[<NUM>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": "((.*)(..*[<NUM>].*))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": "((.*)(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": "(.*)(\\b..*[<NUM>].*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": "\\b(.*)(..*[<NUM>].*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*([<NUM>]).*",
                "prediction": ".*(.*)(..*[<NUM>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines containing a lower-case letter after a number at least 1 time": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "([<NUM>].*[<LOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "(.)+(([<NUM>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "([<NUM>]).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "([<NUM>])+.*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "(([<NUM>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "([<NUM>])+.*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "(.*[<NUM>].*).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "\\b([<NUM>]).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "([<NUM>]).*((.*[<LOW>].*)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>])+).*",
                "prediction": "([<NUM>]).*([<LOW>].*<M0>.*)+"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "items with a small letter preceding an uppercase letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "([<LOW>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "[<LOW>].*[<CAP>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "([<LOW>]).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "([<LOW>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "(([<LOW>])+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "(([<LOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "([<LOW>]).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "([<LOW>].*[<CAP>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "(.*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<CAP>])*).*",
                "prediction": "(([<LOW>])(.*)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with string <M0> before vowel at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "(<M0>.*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "((<M0>.*[<VOW>].*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "((<M0>)(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "((<M0>.*[<VOW>].*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "((<M0>)((.*)).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "(((<M0>.*[<VOW>].*)+)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "(((<M0>)(.*))+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "((<M0>)(.*)).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "((<M0>)((.*))+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(([<VOW>])+).*",
                "prediction": "(((<M0>)(.*)).*([<VOW>]).*)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines which have a letter occurring at least 2 times before a capital letter appear": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "([<LET>]){2,}.*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "([<LET>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "((.){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "([<LET>]){2,}.*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "(([<LET>]){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "([<LET>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "(([<LET>].*[<CAP>].*){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "\\b(([<LET>]){2,}).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<CAP>]).*",
                "prediction": "((([<LET>]){2,})|([<CAP>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with vowel , 5 or more times or ending with number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "(([<VOW>])|([<NUM>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "(([<VOW>])|(.*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "(([<VOW>]){5,})|((.*)(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "(([<VOW>]){5,})|((.*)(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "((([<VOW>]){5,})|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "(([<VOW>]){5,})|((.*)(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "(([<VOW>]){5,})|((.*)([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "(([<VOW>])|((.*)([<NUM>]))){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "(([<VOW>]){5,})|(((.*)([<NUM>]))){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){5,})|((.*)([<NUM>]))",
                "prediction": "(([<VOW>]){5,})|(.*(.*)([<NUM>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": "([<NUM>]){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": "(.*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": ".*([<NUM>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": "\\b([<NUM>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": "(([<NUM>]){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": "(([<NUM>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": "(([<NUM>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": "(([<NUM>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": "(([<NUM>])|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*){2,}",
                "prediction": "(\\b([<NUM>])|([<LET>])\\b){2,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter before the string <M0> or capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": "(([<LET>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": "([<LET>].*<M0>.*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": "(([<LET>]).*(<M0>).*)|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": "([<LET>]).*((<M0>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": "(([<LET>])+).*(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": "(([<LET>]).*(<M0>).*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": "(([<LET>])+).*((<M0>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": ".*([<LET>]).*((<M0>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": "(([<LET>]).*(<M0>).*)|(([<CAP>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>].*<M0>.*)|([<CAP>]))+",
                "prediction": "(.*[<LET>].*).*((<M0>)|([<CAP>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines which are containing either a vowel , the string <M0> , or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": ".*[<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": ".*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": "(.*[<VOW>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": ".*(.)|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": ".*.*[<VOW>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": ".*([<VOW>])|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": ".*([<LET>])|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": ".*(<M0>)|([<VOW>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>)|([<NUM>]).*",
                "prediction": ".*([<NUM>])|(<M0>)|([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "items with <M0> preceding a character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "(<M0>).*((.)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "(<M0>).*(.*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "(<M0>).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "(<M0>).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "(<M0>.*..*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "(<M0>).*(..*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "(<M0>).*((.*)(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "((<M0>)(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "((<M0>).*(.)+)|(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(.*..*).*",
                "prediction": "(<M0>).*(..*[<CAP>].*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "items with either a letter , a vowel , or <M0> preceding <M1> .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "(([<LET>])|([<VOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "((<M0>)|([<VOW>])|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "(([<LET>])|(<M0>)|([<VOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|([<VOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|(<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|([<CAP>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|([<VOW>])).*(<M1>).*",
                "prediction": "(([<LET>])|([<VOW>])|(<M0>)|(<M1>)).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines with 3 or more of the string <M0> or with a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "((<M0>)|(.)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "((<M0>)|((.)+)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "((<M0>){3,})|((.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "((<M0>){3,})|(.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "(.*<M0>.*)|((.){3,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "((<M0>){3,})|(.)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "((<M0>){3,})|((.)(.))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "((<M0>){3,})|((.)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "((<M0>){3,})|((.){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){3,})|(.*..*)",
                "prediction": "((<M0>)|((.){3,}))(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a letter or vowel at least 2 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": "(([<LET>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": "(([<VOW>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": "(([<CAP>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": "([<LET>])|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": "([<LET>]).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": "\\b(([<LET>])|([<VOW>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": "(.*([<LET>])|([<VOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": "(\\b([<LET>])|([<VOW>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": ".*(([<LET>])|([<VOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])){2,}",
                "prediction": "((([<LET>])|([<VOW>])){2,}){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines that at least have the string <M0> followed by <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": "(<M0>.*<M1>.*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": ".*<M0>.*<M1>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": "(<M0>.*<M1>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": ".*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": "(<M0>.*<M1>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": "(.*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": ".*(<M0>.*<M1>.*)+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": ".*(<M0>).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": "(<M0>.*<M1>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*<M1>.*)+)",
                "prediction": "(.*<M1>.*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines beginning with a capital letter , zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "(.*[<CAP>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "(([<CAP>])*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "(([<CAP>])(.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "((([<CAP>])*)(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "((([<CAP>])(.*))*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "((.*[<CAP>].*)*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "(\\b([<CAP>])*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "(\\b([<CAP>])(.*)\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "\\b(([<CAP>])*)(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*)(.*)",
                "prediction": "((([<CAP>])*)|([<LET>]))(.*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with words with a capital followed by number , zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "\\b([<CAP>].*[<NUM>].*)*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "(\\b[<CAP>].*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "\\b(..*[<NUM>].*)*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "\\b([<CAP>].*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "(\\b([<CAP>].*[<NUM>].*)*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "\\b(([<CAP>]).*([<NUM>]).*)*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "(\\b([<CAP>]).*([<NUM>]).*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "\\b([<CAP>]).*(([<NUM>])*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "\\b(([<CAP>])*).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<CAP>].*[<NUM>].*\\b)*",
                "prediction": "(\\b([<CAP>])*\\b).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with letter followed by vowel , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": ".*[<LET>].*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": "[<LET>].*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": "([<LET>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": "[<LET>].*([<VOW>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": "([<CAP>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": "([<LET>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": ".*([<LET>].*[<VOW>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": "(([<LET>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<VOW>].*){2,}",
                "prediction": "\\b([<LET>].*[<VOW>].*){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with 2 or more of a capital letter or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "(([<CAP>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "(([<CAP>]){2,})|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": ".*([<CAP>])|([<VOW>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "([<CAP>])|(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "([<CAP>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": ".*(([<CAP>])|([<VOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "(.*([<CAP>])|([<VOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "(.*[<CAP>].*)|(([<CAP>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "((.*[<CAP>].*)|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "((([<CAP>])|([<VOW>])){2,}){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "items with <M0> , or <M1> at least thrice .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": "((<M0>)|(<M1>)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": "((<M1>)|(<M0>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": "\\b(<M1>)|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": "((<M1>)|(<M0>)|(<M1>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": "((.*<M0>.*)|(<M1>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": "(.*(<M0>)|(<M1>).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": "(.*<M1>.*)|((<M0>){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": "((<M1>)|(<M0>)|([<CAP>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": ".*(<M1>)|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){3,}",
                "prediction": "(.*<M0>.*)|((<M1>){3,})"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number , zero or more times followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "([<NUM>].*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "(([<NUM>])*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "((.)*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "([<NUM>]).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": ".*(([<NUM>])*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "\\b(([<NUM>])*).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "((([<NUM>])*)*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "(([<NUM>])*).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "((.*[<NUM>].*)*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "(.*[<NUM>].*).*(([<LOW>])*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines finishing with the string <M0> followed by a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": ".*<M0>.*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "(<M0>.*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "(<M0>.*[<NUM>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "(.*)(<M0>.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "(<M0>).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "(<M0>).*((.*)([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "(.*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "((<M0>)*).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "((.*)(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "((<M0>)(.*)).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter at least twice before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "([<LOW>].*[<VOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "(([<LOW>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "([<LOW>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "(([<LOW>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "([<LOW>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "((([<LOW>]){2,})|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "(.*[<LOW>].*).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "((.*[<LOW>].*){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "(([<LOW>].*[<VOW>].*)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "(([<LOW>].*[<VOW>].*){2,}).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with words that have only an upper case letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b[<CAP>]"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b([<CAP>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b([<CAP>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "(\\b[<CAP>]\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b.*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": ".*\\b[<CAP>]\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b([<CAP>])(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b([<CAP>])|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that contain a capital letter or a vowel , at least 4 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "((.)|([<CAP>])){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "(([<CAP>])|([<VOW>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "(([<LET>])|([<VOW>])){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "(([<VOW>])|([<CAP>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "(([<LET>])|([<CAP>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "(([<CAP>]){4,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "(\\b([<CAP>])|([<VOW>])\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "((([<CAP>])|([<VOW>])){4,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "((.*[<CAP>].*)|([<VOW>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<VOW>])){4,}",
                "prediction": "(.*([<CAP>])|([<VOW>]).*){4,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "at least 1 line ending with a letter followed by the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "(.*)([<LET>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "(.*)(([<LET>].*<M0>.*)*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "((.*)([<LET>].*<M0>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "((.*)([<LET>].*<M0>.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "(.*)(([<LET>].*<M0>.*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "+((.*)([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "((.*)([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "(((.*)([<LET>]))+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "((.*)([<LET>])).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>].*<M0>.*))+",
                "prediction": "((.*)([<LET>])).*((<M0>)*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines containing a vowel preceded by the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": ".*<M0>.*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": "<M0>.*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": "([<VOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": "(<M0>.*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": ".*(<M0>).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": "\\b(<M0>).*([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": "((<M0>)(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "<M0>.*[<VOW>].*",
                "prediction": "(.*<M0>.*).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "at least 1 line ending in the string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "((.*)(<M0>))|(<M1>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "(.*)((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "((.*)((<M0>)|(<M1>)))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "(.*)(((<M0>)|(<M1>))+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "((.*)(<M0>))|((<M1>)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "((.*)(<M0>))|((<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "(.*)+((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "(((.*)(<M0>))|(<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "(.*)(((<M0>)|(<M1>)))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))|((<M1>)+)",
                "prediction": "(.*)(((<M0>)|(<M1>)){2,})"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel before a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": ".*([<VOW>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": "([<VOW>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": "([<VOW>]).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": "(([<VOW>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": "(([<VOW>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": "([<VOW>]).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": "(([<VOW>])(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": "(.*[<VOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": "([<VOW>].*[<LET>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>].*[<LET>].*)+.*",
                "prediction": "(([<VOW>])+).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing words with 2 or more times a letter or a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b([<LET>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b([<CAP>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b([<LET>])|([<CAP>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": ".*\\b([<LET>]){2,}\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b(([<LET>]){2,})|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b(([<CAP>]){2,})|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b([<LET>])|(([<CAP>]){2,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b(([<LET>])|([<CAP>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "(\\b([<LET>])|([<CAP>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LET>]){2,})|([<CAP>])\\b",
                "prediction": "\\b(([<CAP>]){2,})|([<LET>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a small letter preceding a vowel , at least 2 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": "([<LOW>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": "[<LOW>].*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": "([<LOW>].*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": "([<LOW>]).*([<VOW>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": "([<LOW>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": "([<LOW>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": "(([<LOW>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": ".*([<LOW>].*[<VOW>].*){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>]){2,}).*",
                "prediction": "\\b([<LOW>]).*(([<VOW>]){2,}).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines ending with string <M0> , zero": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": "((.*)(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": "(.*)((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": "(.*)(.*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": "(.*)(\\b(<M0>)*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": "(.*)((.*<M0>.*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": "((.*)(.*<M0>.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": "(.*)(.*(<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": ".*((.*)(<M0>))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>))*",
                "prediction": "(.*(.*)(<M0>).*)*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel or letter before a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": "(([<VOW>])|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": "(([<VOW>])|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": "(([<VOW>])|([<CAP>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": "(([<VOW>])|([<LET>])).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": "(.*[<VOW>].*)|(([<LET>]).*(.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": ".*(([<VOW>])|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": "(([<VOW>])|([<LET>])|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": "(([<VOW>])|([<LOW>])|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": "(([<VOW>])|([<LET>])|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(.)+",
                "prediction": "(([<VOW>])|([<CAP>])|([<LET>])).*(.)+"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines whiich are starting with words with a letter , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b[<LET>]\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b[<LET>]\\b){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(([<LET>]){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "\\b([<LET>]){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b([<LET>]){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "\\b(([<LET>]){2,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b([<LET>])(.*)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "(\\b.*[<LET>].*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "((\\b([<LET>])(.*)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]){2,}\\b)(.*)",
                "prediction": "\\b(([<LET>])(.*)){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number or vowel before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": "([<NUM>]).*(([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": ".*([<NUM>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": "(([<NUM>])+)|([<VOW>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": "(([<NUM>])|([<VOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": "([<NUM>]).*(([<NUM>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": "(([<NUM>])|([<LOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": "([<NUM>]).*(([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": "([<NUM>]).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": ".*(([<NUM>])|([<VOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])).*([<LOW>]).*",
                "prediction": "(([<NUM>])|([<NUM>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with words containing a vowel preceding a numeral .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "\\b.*[<VOW>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "\\b[<VOW>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "(\\b[<VOW>].*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "\\b([<VOW>].*[<NUM>].*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "\\b([<VOW>]).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "\\b([<VOW>].*[<NUM>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "\\b([<VOW>]).*(([<NUM>])*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "\\b([<VOW>].*[<NUM>].*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "\\b([<VOW>]).*(.*[<NUM>].*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<VOW>].*[<NUM>].*\\b",
                "prediction": "\\b(.*[<VOW>].*).*([<NUM>]).*\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "items with a numeral , a vowel , or a letter preceding <M0> .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<VOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<NUM>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<NUM>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<LET>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])|([<NUM>])).*(<M0>).*",
                "prediction": "((<M0>)|([<VOW>])|([<LET>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "items with a vowel preceding an upper case letter at least 1 time .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "[<VOW>].*[<CAP>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "([<VOW>].*[<CAP>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "([<VOW>]).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "([<VOW>]).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "(([<VOW>]).*([<CAP>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "(([<VOW>])+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "([<VOW>]).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "(([<VOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "(([<VOW>])(.*)).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])+).*",
                "prediction": "(([<VOW>])(.*)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "lines that have either <M0> , a capital letter , or <M1> followed by a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": "((<M0>)|(<M1>)|([<CAP>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": "((<M1>)|([<CAP>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": "(<M0>)|(([<CAP>])|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": "((<M1>)|(<M0>)|([<CAP>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": "(([<CAP>])|([<CAP>])|(<M1>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": "(<M0>)|(([<CAP>])|(<M1>)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*",
                "prediction": ".*((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines which contain <M0> or a capital letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": "((<M0>)|([<CAP>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": "\\b([<CAP>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": "\\b(<M0>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": ".*(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": ".*([<CAP>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": ".*([<CAP>])|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": "(.*<M0>.*)|(([<CAP>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": "(.*<M0>.*)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": ".*((<M0>)|([<CAP>]))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<CAP>])\\b",
                "prediction": ".*(<M0>)|([<CAP>])|([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "([<LET>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "\\b([<LET>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "(([<CAP>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "(([<LET>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": ".*([<LET>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": ".*([<CAP>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "(([<LET>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "(([<LET>])|([<LOW>])){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing capital letters or numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "(([<CAP>])|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "(.*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "(([<CAP>])|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "([<CAP>])|(([<NUM>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": ".*([<CAP>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "(.*[<CAP>].*)|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "\\b([<CAP>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "(.*[<CAP>].*)|(([<NUM>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "(.*[<CAP>].*)|(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": ".*(([<CAP>])|([<NUM>]))*.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that end with only 2 or letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": "(.*)((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": "(.*)([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": "(.*)(([<CAP>]){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": "(.*)(([<LET>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": "((.*)([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": ".*(.*)([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": "(.*)(([<LET>])|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": "((.*)([<LET>]))|([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": "(.*)(([<LET>])|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LET>]){2,})",
                "prediction": "(.*)(\\b([<LET>]){2,}\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have a character which is numbering at 4 or greater <U> and that precedes a small letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "((.)|([<LOW>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "((.)+([<LOW>]).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "((.)+([<LOW>]).*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "(.)+(([<LOW>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "((.){4,})|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "((.){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "(([<LET>]){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "((<M0>){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "(([<CAP>]){4,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){4,}).*([<LOW>]).*",
                "prediction": "((.)+([<LOW>]).*).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines having either a lower-case letter , a capital letter , or a number before the string <M0> in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "((<M0>)|([<CAP>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<CAP>])|(<M0>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<CAP>])|(.)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<CAP>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<LOW>])|(<M0>)|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<CAP>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<CAP>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "((([<LOW>])|([<CAP>])|([<NUM>]))|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>])|([<NUM>])).*(<M0>).*",
                "prediction": "((<M0>)|([<CAP>])|([<NUM>])).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with 5 or more of a capital letter before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": "(.*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": "([<CAP>].*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": ".*([<CAP>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": "(.*[<CAP>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": "(([<CAP>]){5,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": "([<CAP>]).*(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": ".*([<CAP>].*[<NUM>].*){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": ".*([<CAP>]).*(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": "(([<CAP>].*[<NUM>].*){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<NUM>].*){5,}",
                "prediction": "(.*[<CAP>].*).*(([<NUM>]){5,}).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more characters or a vowels": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "((.)|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "((.){2,})|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(.)|(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(.)|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "\\b((.){2,})|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(.*(.)|([<VOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(.*)(((.){2,})|([<VOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": ".*((.)|([<VOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": "(.*..*)|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])){2,}",
                "prediction": ".*((.){2,})|([<VOW>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "items with a vowel or <M0> preceding a small letter .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "([<VOW>])|(<M0>.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "([<VOW>]).*((<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "(<M0>).*(([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "((<M0>)|([<VOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|([<LOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<LOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)).*(.*[<LOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines that begin with at least 1 instance of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "((<M0>)+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "(.*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "((<M0>)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "((.*)(<M0>))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "(((<M0>)(.*))+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "(((<M0>)+)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "((.*<M0>.*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "\\b((<M0>)(.*))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "(\\b(<M0>)(.*)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)+)(.*)",
                "prediction": "(\\b(<M0>)+\\b)(.*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines that have the <M0> string as an ending": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": ".*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": "(<M0>)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": "(.*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": "(.*)(.*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": ".*(<M0>)*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": "(.*)(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": ".*(<M0>).*(.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": "(<M0>).*((.*)([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": "(<M0>).*(.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>)",
                "prediction": "(.*)(<M0>.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with either a number or a capital letter followed by <M0> 4 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "(([<NUM>].*<M0>.*)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "(([<NUM>])|([<CAP>].*<M0>.*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "((([<NUM>])(.*)|([<CAP>]))){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "((([<NUM>])(.*))|([<CAP>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "(([<NUM>])(.*))|(([<CAP>].*<M0>.*){4,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "((([<NUM>])|([<CAP>]).*(<M0>).*)){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "(([<NUM>])|(([<CAP>].*<M0>.*)(.*))){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "((([<NUM>])|([<CAP>]).*(<M0>).*))|(([<NUM>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<CAP>].*<M0>.*)){4,}",
                "prediction": "((([<NUM>])|([<CAP>]).*(<M0>).*))|(([<LET>]){4,})"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines with the string <M0> before either a capital letter , the string <M1> , or the string <M2> in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(<M2>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>).*([<CAP>])|(<M1>)|(<M2>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>)|(<M1>)|(<M2>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>).*([<CAP>]).*)|(<M1>)|(<M2>)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>).*([<CAP>]).*)|((<M1>)|(<M2>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>).*([<CAP>]).*)|(.*<M1>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>)+).*(([<CAP>])|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<CAP>])|(<M1>)|(<M2>)).*",
                "prediction": "((<M0>)*).*(([<CAP>])|(<M1>)|(<M2>)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing string <M0> followed by string <M1> or string <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": ".*(<M0>).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": "(.*<M0>.*<M1>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": "(.*<M0>.*)|((<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": "(.*<M0>.*<M1>.*)|(<M2>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": ".*(<M0>.*<M1>.*)|(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": "(.*<M0>.*<M1>.*)|(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": "((<M0>).*(<M1>).*)|(<M2>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": "(.*<M0>.*)|((<M2>).*(<M2>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>.*<M1>.*)|(<M2>).*",
                "prediction": ".*(<M0>).*((<M1>)|(<M2>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing a vowel before with or without a lower-case letter or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>].*[<VOW>].*)|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*((([<LOW>])*)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "(([<VOW>]).*([<VOW>]).*)|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*(((<M0>)*)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "(([<VOW>]).*([<LOW>]).*)|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*((([<LOW>])|(<M0>))*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "(.*[<VOW>].*).*(([<LOW>])|(<M0>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": "([<NUM>].*..*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": "([<NUM>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": "(([<NUM>])+).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": ".*([<NUM>]).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": "(.*[<NUM>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": "(([<NUM>])*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": "([<NUM>]).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": "([<NUM>]).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": "([<NUM>]).*(..*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*).*(.)+",
                "prediction": "(([<NUM>])(.*)).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter before string <M0> then number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": ".*[<LET>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(.*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": "([<LET>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": "([<LET>]).*(<M0>.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(([<LET>])+).*(<M0>.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(([<LET>].*<M0>.*)|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(([<LET>]).*(<M0>).*)|([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(([<LET>]).*(<M0>).*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(.*[<LET>].*).*(<M0>.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*([<NUM>]).*",
                "prediction": "(([<LET>].*<M0>.*)+).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines with 3 or more of the string <M0> before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "(<M0>.*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "((<M0>){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "(<M0>).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "(.*<M0>.*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "(.*<M0>.*){3,}.*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": ".*(<M0>.*[<LET>].*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": ".*(<M0>).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "((<M0>.*[<LET>].*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": ".*((<M0>){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "(.*<M0>.*).*(([<LET>]){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with either string <M0> , a letter , or lower-case letter , zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "\\b((<M0>)|([<LET>])|([<LOW>]))*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "(\\b(<M0>)|([<LOW>])|([<LOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "\\b((<M0>)|([<LET>])|([<LOW>]))|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "(\\b(<M0>)|([<LOW>])|([<LET>])\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "(\\b(<M0>)|([<LET>])|([<LOW>])|\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "\\b((<M0>)|([<LET>])|([<LOW>]))|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "\\b((<M0>)|([<LET>])|([<LOW>]))|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "(\\b(<M0>)|([<LET>])|([<LOW>])|([<LOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*",
                "prediction": "(\\b((<M0>)|([<LET>])|([<LOW>]))|([<LOW>])\\b)*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines ending with a letter or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "(.*)(([<LET>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "((.*)([<LET>]))|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "(.*)((([<LET>])|([<VOW>]))+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "((.*)([<LET>]))|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "((.*)([<LET>]))|(([<VOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": ".*(.*)(([<LET>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "(.*)(([<LET>])|(([<VOW>])+))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "(.*)((([<LET>])|([<VOW>]))*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "((.*)([<LET>]))|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "(.*)((.*[<LET>].*)|([<VOW>]))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with numeral or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "(.*)(([<NUM>])|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": ".*(.*)([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": ".*(.*)([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "(.*)(([<LOW>])|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "((.*)([<LOW>]))|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "((.*)([<NUM>]))|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "((.*)([<LOW>]))|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "((.*)([<NUM>]))|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "((.*)([<LOW>]))|(([<LET>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": ".*(.*)(([<NUM>])|([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with vowel before character , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "([<VOW>].*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>]).*(.)+){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(.)+(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>])+).*(.){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>])(.*)).*(.){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "([<VOW>]).*((.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "([<VOW>]).*(((.){2,}).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>])(.*)).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "([<VOW>].*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>]).*(.)+){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(.)+(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>])+).*(.){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>])(.*)).*(.){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "([<VOW>]).*((.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "([<VOW>]).*(((.){2,}).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.){2,}).*",
                "prediction": "(([<VOW>])(.*)).*((.){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with <M0> or a character 2 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "((.)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "(([<LET>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "((<M0>)|(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "((<M0>)|((.)+)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "(.*<M0>.*)|((.){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": ".*(<M0>)|(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "\\b((<M0>)|(.)){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "((.*<M0>.*)|(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": ".*(<M0>)|((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)){2,}",
                "prediction": "(((<M0>)|(.)){2,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lines with string <M0> before letter , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "(<M0>.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "(<M0>).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "((<M0>)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "([<LET>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "((<M0>).*([<LET>]).*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "((<M0>)+).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": ".*(<M0>).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "(.*<M0>.*).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){2,}).*",
                "prediction": "((<M0>)(.*)).*(([<LET>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines that have a lower-case letter followed by the string <M0> , at least 1 time": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(.*[<LOW>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "([<LOW>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "([<LOW>]).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(([<LOW>].*<M0>.*)+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(<M0>).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(([<LOW>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(.*([<LOW>].*<M0>.*)+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(([<LOW>]).*(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(([<LOW>].*<M0>.*)+)|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(([<LOW>]).*(<M0>).*)|(([<CAP>])+)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character before the string <M0> or a letter which is followed by the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "(.)+((<M0>)|([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "(.)+((<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "((.)+).*((<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "((.)+).*(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "((.)+(<M0>).*)|([<LET>].*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "((.)+).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "((.)+(<M1>).*)|([<LET>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "((..*<M1>.*)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "((.)+([<LET>]).*)|((<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+(<M0>).*)|([<LET>].*<M1>.*)",
                "prediction": "((.)+(<M0>).*)|(([<LET>]).*(<M1>).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines that have a number or lower case letter before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<LOW>])|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<NUM>])|([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": ".*(([<NUM>])|([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": "(.*[<NUM>].*)|([<LOW>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": "((.)|([<NUM>])|([<LOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": "((([<NUM>])|([<LOW>]))+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": "(.*([<NUM>])|([<LOW>]).*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": "(.*[<NUM>].*)|(([<LOW>]).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<NUM>])|([<LOW>])|([<LOW>])).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines with words and lower-case letter or the string <M0> before <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": "\\b([<LOW>])|(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": "\\b(([<LOW>])+)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": "\\b(([<LOW>])|(<M0>)).*(<M1>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": ".*\\b([<LOW>])|(<M0>).*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": "\\b([<LOW>].*<M0>.*)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": "\\b([<LOW>]).*((<M1>)|(<M0>)).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": "\\b(([<LOW>])|(<M0>)|(<M1>)).*(<M1>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": "\\b([<LOW>]).*((<M0>)|(<M1>)).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|(<M0>.*<M1>.*)\\b",
                "prediction": "(\\b([<LOW>])|(<M0>)\\b).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which are containing the string <M0> before the string <M1> at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*<M0>.*<M1>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*<M1>.*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": "(<M0>).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": ".*(<M0>.*<M1>.*)+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": "((<M0>)*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*<M0>.*).*(<M1>)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*)((<M0>.*<M1>.*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*(<M0>).*(<M1>).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": "(.*<M0>.*).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*((<M1>)+).*",
                "prediction": ".*(<M0>).*((<M1>)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines with words and zero or more of the string <M0> or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "\\b((<M0>)*)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "\\b((<M0>)|([<LET>]))*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "(\\b(<M0>)|([<LOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "(\\b(<M0>)|([<LET>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "\\b((<M0>)|([<LOW>]))*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "\\b(<M0>)|(([<LET>])*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "\\b((<M0>)|([<CAP>]))*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "\\b((<M0>)*)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "(\\b(<M0>)|([<LET>])|([<LOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|([<LET>]))*\\b",
                "prediction": "\\b(<M0>)|(([<LET>])*).*\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with either a character , number , or string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": "(.*..*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": ".*(.)|([<NUM>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": ".*(.)|(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": "\\b(.)|([<NUM>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": ".*([<NUM>])|(.)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": ".*((.)|([<NUM>])|(<M0>))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": ".*(<M0>)|(.)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": "(.)+((.)|([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": "(.)|(([<NUM>])|(<M0>)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<NUM>])|(<M0>).*",
                "prediction": "(.)|(([<NUM>])|(<M0>)|([<LET>])).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines need to have either a lower-case letter , a number , or a letter before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M0>)|([<LOW>])|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<NUM>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M0>)|([<LOW>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<NUM>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<NUM>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M0>)|([<LOW>])|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((([<LOW>])|([<NUM>])|([<LET>]))|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<LOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((([<LOW>])|([<NUM>])|([<NUM>]))|([<LET>])).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines containing a letter preceding a number before the string <M0> or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LET>].*[<NUM>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*(([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*([<NUM>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LET>]).*([<NUM>]).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*(([<NUM>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LET>]).*([<NUM>]).*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LET>].*[<NUM>].*)|(<M1>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*(([<NUM>].*<M0>.*)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with capital letter , 2 or more times before vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "(([<CAP>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": ".*(([<CAP>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "((.){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "([<CAP>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "((([<CAP>]){2,}).*([<VOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "((.*[<CAP>].*){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "((([<CAP>]){2,})(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "\\b(([<CAP>]){2,}).*([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,}).*([<VOW>]).*",
                "prediction": "((([<CAP>]){2,})|([<VOW>])).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines with the string <M0> followed by a character , with 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(<M0>.*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(<M0>..*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "((<M0>).*(.)+){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(<M0>.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "((<M0>.*..*){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": ".*(<M0>.*..*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(<M0>).*((.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "((<M0>.*..*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(<M0>).*((..*..*){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(<M0>.*..*).*((.){2,}).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines that end with <M0> and a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": "(.*)(.*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": "(.*)(..*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": "(.*)(<M0>.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": "((.*)(.)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": "((.*)(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": "(.*)((<M0>)|(.))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": "(.*)((<M0>).*(.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": "((.*)(<M0>))|(.*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(<M0>.*..*)",
                "prediction": "((.*)(<M0>)).*((.)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines with the string <M0> or a number , 2 or more times in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": "((<M0>)|(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": "((<M0>)|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": "(<M0>)|(([<NUM>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": ".*(<M0>)|([<NUM>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": "(\\b(<M0>)|([<NUM>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": "(.*<M0>.*)|(([<NUM>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": ".*((<M0>)|([<NUM>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": "(((<M0>)|([<NUM>])){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": ".*(<M0>)|(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])){2,}",
                "prediction": "(.*(<M0>)|([<NUM>]).*){2,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number before <M0> , a vowel , or a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": "([<NUM>]).*((.)|([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": "([<NUM>]).*(([<VOW>])|([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": "([<NUM>]).*(([<VOW>])|(<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": "([<NUM>]).*((<M0>)|([<LOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": "([<NUM>]).*(([<LOW>])|(<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": "([<NUM>]).*((<M0>)|([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": ".*([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": "(.*[<NUM>].*).*((<M0>)|([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>)|([<VOW>])|([<LOW>])).*",
                "prediction": "(([<NUM>])+).*((<M0>)|([<VOW>])|([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with zero or more of a lower-case letter or number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": "([<LOW>])|(([<NUM>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": "((([<LOW>])|([<NUM>]))*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": "(([<LOW>])|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": "((([<LOW>])|([<NUM>]))+)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": "(([<LOW>])|(([<NUM>])+))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": "((.*[<LOW>].*)|([<NUM>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": ".*(([<LOW>])|([<NUM>]))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": "(.*([<LOW>])|([<NUM>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": "\\b(([<LOW>])|([<NUM>]))*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>])|([<NUM>]))*.*",
                "prediction": "(.*[<LOW>].*)|(([<NUM>])*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines which are starting with a capital letter or a character at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "(([<CAP>])|(.))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "(([<CAP>])(.*))|((.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "((([<CAP>])(.*))|(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "((([<CAP>])|(.))(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "((([<CAP>])|(.))+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "(([<CAP>])|((.)(.*)))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "(((.)(.*))|([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "((.)|(([<CAP>])(.*)))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "(([<CAP>])|((.)+))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<CAP>])(.*))|(.))+",
                "prediction": "((([<CAP>])+)|(.))(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a character followed by zero or more of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": "(..*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": "(.*..*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": "(.*..*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": "(.)+((<M0>)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": "((..*<M0>.*)*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": "\\b(..*<M0>.*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": "((.)*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": ".*(..*<M0>.*)*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": "(\\b..*<M0>.*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*<M0>.*)*",
                "prediction": "(.*..*).*(<M0>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with an uppercase letter preceded by a number 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "(.*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "([<NUM>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "([<NUM>].*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "(([<NUM>]){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "(([<CAP>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "([<CAP>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "(([<NUM>]){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>]){2,}).*([<CAP>]).*",
                "prediction": "([<NUM>]).*(([<CAP>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with words with a capital at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "(\\b(.)+\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "(\\b[<CAP>]\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "(\\b\\b[<CAP>]\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "(\\b([<CAP>])+\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "(\\b([<CAP>])*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "(\\b.*[<CAP>].*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "\\b(([<CAP>])+)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "(\\b([<CAP>])(.*)\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "(\\b\\b([<CAP>])+\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<CAP>])+\\b)(.*)",
                "prediction": "(\\b(.*[<CAP>].*)+\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a number before vowel then string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": "(.*[<NUM>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": "([<NUM>]).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": "([<NUM>]).*([<VOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": "([<NUM>].*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": ".*([<NUM>].*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": "(([<NUM>])+).*([<VOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": "([<NUM>]).*(.*[<VOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": "(([<NUM>].*[<VOW>].*)+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": "(([<NUM>]).*([<VOW>]).*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*<M0>.*).*",
                "prediction": "(([<NUM>])(.*)).*([<VOW>].*<M0>.*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines starting with words ending with the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "\\b(.*)(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "(\\b(.*)(.*)\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "\\b((.*)(<M0>))(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "(\\b(.*)(<M0>)\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "(\\b.*(.*)(<M0>)\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "(\\b(.*)(.*<M0>.*)\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "(\\b(.*)([<LET>])\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "(\\b((.*)(<M0>))+\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "(\\b(.*)(.*<M0>.*)\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.*)(<M0>)\\b)(.*)",
                "prediction": "(\\b.*(.*)(<M0>)\\b).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing string <M0> before capital letter at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": "(<M0>.*[<CAP>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": "(.*<M0>.*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": "((<M0>)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": "(<M0>).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": "((<M0>).*([<CAP>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": "(.*(<M0>).*([<CAP>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": "((<M0>)+).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": ".*(<M0>).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": "(.*<M0>.*).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>])+).*",
                "prediction": "(<M0>).*((.*[<CAP>].*)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines having either the string <M0> , a capital letter , or the string <M1> before a vowel in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|(<M1>)|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<CAP>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M1>)|(<M0>)|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M1>)|([<CAP>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|(<M0>)|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "(((<M0>)|([<CAP>])|(<M1>))|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])|(<M1>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)|(<M1>)).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "items with a letter preceding an upper case letter preceding a small letter .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "([<LET>]).*([<CAP>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*([<LET>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "([<LET>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "([<LET>]).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(([<LET>])(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(([<LET>])+).*([<CAP>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "([<LET>].*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "([<LET>].*[<LET>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(([<LET>])(.*)).*([<CAP>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*).*([<LOW>]).*",
                "prediction": "(([<LET>]).*([<CAP>]).*).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines that contain a letter , a character , or the string <M0> followed by a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": "((.)|([<LET>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": "((<M0>)|(.)|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": "(.)+(([<LET>])|(<M0>)|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": "((<M0>)|(.)|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": "((.)|(<M0>)|([<LET>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": "(([<LET>])|(<M0>)|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": "(.)|(([<LET>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": ".*(([<LET>])|(.)|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.)|(<M0>)).*([<NUM>]).*",
                "prediction": "((<M0>)|(.)|([<NUM>])).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines with a letter followed by string <M0> at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": "([<LET>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": "([<LET>].*<M0>.*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": "(([<LET>].*<M0>.*)+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": "(.*[<LET>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": "(<M0>.*[<LET>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": "([<LET>]).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": ".*([<LET>].*<M0>.*)+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": "(([<LET>]).*(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": "(([<LET>].*<M0>.*)+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)+",
                "prediction": "([<LET>].*<M0>.*).*(<M0>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines with number or vowel , 4 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": "(([<NUM>])|([<VOW>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": "([<NUM>])|(([<VOW>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": "\\b([<NUM>])|([<VOW>]){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": ".*([<NUM>])|([<VOW>]){4,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": "\\b(([<NUM>])|([<VOW>])){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": "(.*[<NUM>].*)|(([<VOW>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": ".*(([<NUM>])|([<VOW>])){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": "(\\b([<NUM>])|([<VOW>])\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": "(.*([<NUM>])|([<VOW>]).*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])){4,}",
                "prediction": "((([<NUM>])|([<VOW>])){4,})(.*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with vowel then a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": "([<VOW>].*..*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": "[<VOW>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": ".*[<VOW>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": "([<VOW>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": "(([<VOW>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": "([<VOW>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": "([<VOW>].*..*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": "(.*[<VOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": "([<VOW>].*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*..*)*",
                "prediction": "(([<VOW>])(.*)).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "before <M0> , the lines must have a number , vowel , or letter first .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M0>)|([<NUM>])|([<VOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M1>)|([<NUM>])|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M1>)|([<NUM>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M0>)|([<NUM>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(<M0>).*(([<NUM>])|([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<LET>])|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M0>)|([<NUM>])|([<VOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with words starting in 5 or more vowels": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": "(([<VOW>])(.*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": "(\\b(<M0>)(.*)\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": "(\\b([<VOW>]){5,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": "(\\b([<VOW>])(.*)\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": "(\\b(.)([<VOW>])\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": "\\b(([<VOW>])(.*)){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": "(\\b([<VOW>])([<VOW>])\\b){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": "\\b(([<VOW>]){5,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": ".*\\b(([<VOW>])(.*)\\b).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<VOW>]){5,})(.*)\\b",
                "prediction": "(\\b(([<VOW>])(.*)){5,}\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing a vowel before the string <M0> , 5 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "([<VOW>].*<M0>.*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(.*[<VOW>].*<M0>.*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(.*([<VOW>].*<M0>.*){5,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>]).*(<M0>).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "([<VOW>]).*((<M0>){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(.*([<VOW>]).*(<M0>).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(.*[<VOW>].*).*((<M0>){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){5,}",
                "prediction": "(([<VOW>]).*(<M0>).*)|((<M1>){5,})"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>.*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": ".*(<M0>).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "((<M0>)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(.*<M0>.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>).*((.*)([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>).*([<CAP>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "((<M0>)+).*(.*[<CAP>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case after a vowel 1 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "(.*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "([<VOW>].*[<LOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "(([<VOW>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "([<VOW>]).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "(.*([<VOW>]).*([<LOW>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "(([<VOW>])+).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "([<VOW>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "(\\b([<VOW>])+\\b).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "\\b(([<VOW>])+).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<LOW>])+).*",
                "prediction": "(([<VOW>])+).*(.*[<LOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "lines with zero or more characters before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "(.*..*[<NUM>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "(..*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "((.)*).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "(.*(.)*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "((.)*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "((.)*).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "(.*..*).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "(.)*((.)*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "\\b((.)*).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.)*.*).*([<NUM>]).*",
                "prediction": "((..*[<NUM>].*)*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines ending with a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "(.*)([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "(.*)(.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": ".*(.*)([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "(.*)(\\b([<LET>])*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "(.*)(([<LET>])|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "((.*)(.*[<LET>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "((.*)([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "(.*)(([<LET>])|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "(.*)(.*([<LET>]).*([<CAP>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "((.*)([<LET>])).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with an upper class letter preceding <M0> , <M1> , or a letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "([<CAP>].*<M0>.*)|((<M1>)|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "([<CAP>]).*((<M0>)|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "([<CAP>]).*(([<LET>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "([<CAP>]).*((<M0>)|(<M1>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "([<CAP>]).*((.)|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "(<M0>).*(([<CAP>])|(<M1>)|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "([<CAP>]).*((<M0>)|([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "(.*[<CAP>].*).*((<M0>)|(<M1>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M1>)|(<M0>)|([<LET>])).*",
                "prediction": "(([<CAP>]).*(<M0>).*)|((<M1>)|([<LET>]))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines containing the string <M0> preceding either a vowel , a capital letter , or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>.*[<VOW>].*)|(([<CAP>])|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>).*((.)|([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>).*([<VOW>])|([<CAP>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>).*([<VOW>].*[<CAP>].*)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>).*(([<CAP>])|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "((<M0>)+).*(([<VOW>])|([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<VOW>])|([<CAP>])|(<M1>)).*",
                "prediction": "(<M0>).*(.*([<VOW>])|([<CAP>])|(<M1>).*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a number before vowel then letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": ".*([<NUM>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": "(([<NUM>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": "(.*[<NUM>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": "([<NUM>]).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": "(([<NUM>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": "([<NUM>]).*([<VOW>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": "([<NUM>].*[<VOW>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": "([<NUM>].*[<VOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": "(([<NUM>])+).*([<VOW>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<VOW>].*[<LET>].*).*",
                "prediction": "(([<NUM>])(.*)).*([<VOW>].*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines with the string <M0> or a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "((<M0>)|([<VOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "((<M0>)|([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "(.*<M0>.*)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "\\b(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": ".*(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "((<M0>)|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "(.*<M0>.*)|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "(.*(<M0>)|([<VOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": "(.*<M0>.*)|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>]))*",
                "prediction": ".*((<M0>)|([<VOW>]))+.*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with vowel , 2 or more times before character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": "((.){2,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": "(([<VOW>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": "((([<VOW>]){2,})(.))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": "([<VOW>]).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": ".*(([<VOW>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": "((([<VOW>]){2,})|(.))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": "\\b(([<VOW>]){2,}).*(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": "(\\b([<VOW>]){2,}\\b).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": "((([<VOW>]){2,})(.)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){2,}).*(.)+",
                "prediction": "((([<VOW>]){2,})(.*)).*(.)+"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines containing a character followed by a string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": ".*..*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": "(.)+(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": "(.)+(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": "\\b..*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": "\\b(.)+(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": "(.)+(<M0>.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": "(..*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": "(..*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": ".*(..*<M0>.*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*<M0>.*)*",
                "prediction": "(..*<M0>.*).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number after a vowel , the string <M0> , or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "(<M0>).*([<NUM>])|([<VOW>])|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "((<M0>)|([<VOW>])|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "(<M0>).*(([<VOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "([<VOW>]).*(([<NUM>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "(<M0>).*(([<VOW>])|([<NUM>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "([<NUM>]).*(([<VOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "(([<VOW>])|(<M0>)|([<NUM>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|(<M1>)).*([<NUM>]).*",
                "prediction": "(([<NUM>])|(<M0>)|(<M1>)).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> after a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": "[<CAP>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": "([<CAP>]).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": "\\b[<CAP>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": "(.*)([<CAP>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": ".*([<CAP>]).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": "(([<CAP>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": "\\b([<CAP>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": "(.*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": "([<CAP>]).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*<M0>.*).*",
                "prediction": "(([<CAP>])(.*)).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with words and the string <M0> followed by a vowel at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "\\b<M0>.*[<VOW>].*\\b{2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "\\b<M0>.*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "(\\b<M0>.*[<VOW>].*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "\\b(<M0>.*[<VOW>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "\\b(<M0>).*(([<VOW>]){2,}).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "(\\b(<M0>).*([<VOW>]).*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "\\b<M0>.*([<VOW>].*[<VOW>].*){2,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "\\b<M0>.*([<VOW>].*[<LET>].*){2,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "\\b<M0>.*([<VOW>].*[<CAP>].*){2,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b<M0>.*[<VOW>].*\\b){2,}",
                "prediction": "(\\b(<M0>.*[<VOW>].*){2,}\\b){2,}"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with either a lower-case letter , letter , or capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": "\\b(.*[<LOW>].*)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": "\\b([<LOW>])|([<CAP>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": "\\b([<LOW>])|([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": "\\b([<LOW>])|([<LOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": "\\b.*([<LOW>])|([<CAP>])|([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": ".*\\b([<LOW>])|([<LET>])|([<CAP>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": "\\b.*([<LOW>])|([<CAP>])|([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<LET>])|([<CAP>])\\b",
                "prediction": "\\b.*([<LOW>])|([<LET>])|([<CAP>]).*\\b"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with lower case letter before vowel at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": "([<LOW>]).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": "([<LOW>].*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": "(([<LOW>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": "([<LOW>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": "(([<LOW>])*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": "([<LOW>]).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": ".*([<LOW>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": "(([<LOW>])(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": "([<LOW>]).*((.*[<VOW>].*)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<VOW>])+).*",
                "prediction": "(.*[<LOW>].*).*(([<VOW>])+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with 3 or more strings of <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": "(<M0>){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": "(.*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": "\\b(<M0>){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": ".*(<M0>){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": "((<M0>){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": "(\\b(<M0>){3,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": "\\b((<M0>){3,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": "(<M0>).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": "((<M0>){3,})|(.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>){3,}.*",
                "prediction": "((<M0>){3,})|(.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with only a capital letter or character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": "\\b([<CAP>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": "\\b(.)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": "\\b([<CAP>])|(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": "(\\b[<CAP>]\\b)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": "(\\b[<CAP>]\\b)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": "(\\b([<CAP>])|(.)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": "\\b(([<CAP>])|(.))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": "\\b.*([<CAP>])|(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": "\\b([<CAP>])|([<LET>])|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>])|(.)\\b",
                "prediction": ".*\\b([<CAP>])|(.)\\b.*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "items with a vowel preceding a numeral or <M0> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "([<VOW>].*[<NUM>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "([<VOW>].*<M0>.*)|(([<NUM>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "([<VOW>]).*((<M0>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "([<VOW>].*[<NUM>].*)|((<M0>)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "([<VOW>]).*(([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "([<VOW>].*[<NUM>].*)|((<M0>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(([<VOW>]).*([<NUM>]).*)|(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(([<VOW>]).*([<NUM>]).*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(([<VOW>]).*([<NUM>]).*)|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "([<VOW>]).*((([<NUM>])|(<M0>))*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a small letter or character at least 4 times .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "(.){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "(.*[<LOW>].*){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "(([<LOW>])|(.)){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "((.)|([<LOW>])){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "(([<LET>])|(.)){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "((.)|([<LET>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "((.){4,})|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "(.)|(([<LOW>]){4,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "(((.)|([<LOW>])){4,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<LOW>])){4,}",
                "prediction": "(((.)|([<LOW>])){4,}){4,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with 5 or more of a number before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": "(.*[<NUM>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": "([<NUM>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": "([<NUM>].*<M0>.*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": ".*([<NUM>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": "(([<NUM>]){5,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": "([<NUM>]).*((<M0>){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": "(([<NUM>].*<M0>.*){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": ".*([<NUM>].*<M0>.*){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": "(([<NUM>].*<M0>.*){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){5,}).*",
                "prediction": "(([<NUM>].*<M0>.*){5,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with a number before string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": "\\b[<NUM>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": "\\b([<NUM>].*<M0>.*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": "\\b.*[<NUM>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": ".*\\b[<NUM>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": "\\b([<NUM>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": ".*\\b([<NUM>]).*(<M0>).*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": "(\\b([<NUM>]).*(<M0>).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<NUM>]).*(<M0>).*\\b)+",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": "\\b.*[<NUM>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": "\\b[<NUM>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": "\\b([<NUM>].*<M0>.*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": "\\b([<NUM>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": ".*\\b[<NUM>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": "(\\b([<NUM>]).*(<M0>).*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": ".*\\b([<NUM>]).*(<M0>).*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<NUM>]).*(<M0>).*\\b.*",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines with words containing the string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": "\\b(<M1>)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": "\\b(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": "\\b((<M0>)|(<M1>))*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": "\\b((<M0>)|(<M1>))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": "(\\b(<M0>)|(<M1>)\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": "\\b(.*<M0>.*)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": "\\b.*(<M0>)|(<M1>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": "\\b((<M0>)|(<M1>))(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*<M0>.*)|(<M1>)\\b",
                "prediction": ".*\\b(<M0>)|(<M1>)\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words with string <M0> before a letter or character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "(\\b<M0>.*[<LET>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "\\b(<M0>).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "(\\b<M0>.*[<LET>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "(\\b(<M0>).*([<LET>]).*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "\\b(<M0>.*[<LET>].*)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "(\\b<M0>.*[<LET>].*\\b).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "\\b(<M0>).*(([<LET>])|(.)).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "\\b(<M0>).*((.)|([<LET>])).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "\\b((<M0>).*([<LET>]).*)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>).*([<LET>]).*)|(.)\\b",
                "prediction": "(\\b(<M0>).*([<LET>]).*\\b)|(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words with a letter before the string <M0> , 5 or more times in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": "(\\b.*<M0>.*\\b){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": "(\\b[<LET>].*<M0>.*\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": "\\b([<LET>]).*(<M0>){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": "\\b([<LET>].*<M0>.*){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": ".*\\b([<LET>]).*(<M0>).*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": "(\\b[<LET>]).*(<M0>){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": "\\b([<LET>]).*((<M0>){5,}).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": "(\\b([<LET>]).*(<M0>).*\\b){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": "\\b(([<LET>]).*(<M0>).*)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>]).*(<M0>).*\\b){5,}",
                "prediction": "\\b(([<LET>]).*(<M0>).*){5,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "items with a vowel preceding an upper case letter or <M0> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "([<VOW>]).*((.)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "([<VOW>].*[<CAP>].*)|(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "([<VOW>].*[<CAP>].*)|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "(([<VOW>]).*([<CAP>]).*)|(<M0>)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "([<VOW>]).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "([<VOW>]).*((<M0>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "([<VOW>].*[<CAP>].*)|((<M0>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "(([<VOW>]).*([<CAP>]).*)|((<M0>)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "(([<VOW>])(.*)).*(([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(([<CAP>])|(<M0>)).*",
                "prediction": "(([<VOW>]).*([<CAP>]).*)|((<M0>)+)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "items with <M0> , a letter , or a vowel .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "((<M0>)|([<LET>])|([<VOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "(.*<M0>.*)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "\\b([<LET>])|(<M0>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "\\b(<M0>)|([<LET>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*(<M0>)|([<LET>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "(.*)|(<M0>)|([<LET>])|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "((<M0>)|([<LET>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<LET>])|(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "(.*[<LET>].*)|((<M0>)|([<VOW>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "(.*(<M0>)|([<LET>])|([<VOW>]).*)*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with <M0> preceding <M1> , a numeral , or an upper case letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<NUM>])|(<M2>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<NUM>])|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<NUM>]){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])|(<M3>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<NUM>])|([<CAP>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<NUM>])|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<CAP>])|([<NUM>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<NUM>])|([<CAP>])|(<M1>))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines with a letter before a character at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "([<LET>].*..*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "([<LET>]).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "(([<LET>]).*(.)+)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "(([<LET>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "(.)+(([<LET>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "(([<LET>])(.*)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "(([<LET>])+).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "(([<LET>]).*(.)+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "(.*[<LET>].*).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])+).*(.)+",
                "prediction": "(([<LET>])(.*)).*((.)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines with words and the string <M0> , character , or vowel before string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "(\\b(<M0>)|(.)|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "(\\b(<M0>)|(.)|(<M1>)\\b).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "(\\b(<M0>)|(.)|([<VOW>]).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "(\\b(<M0>)|(.)|([<VOW>]).*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "(\\b(<M0>)|(.)|([<VOW>])\\b).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "\\b(<M0>)|((.)|([<VOW>])).*(<M1>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "(\\b(<M0>)|([<VOW>])|(.)\\b).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "(\\b(<M0>)|(.)|([<VOW>])).*(\\b).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((<M0>)|(.)|([<VOW>])).*(<M1>).*\\b",
                "prediction": "(\\b(<M0>)|(.)|([<VOW>])).*(\\b)+\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> , character , or vowel before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "((<M0>)|(.)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "(<M0>).*((<M0>)|(.)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "((<M0>)|([<VOW>])|(.)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "(.)+((<M0>)|([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "((<M0>)|(<M1>)|(.)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "((<M0>)|((.)|([<VOW>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "(<M0>).*((.)|([<VOW>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "((<M0>)|((.)|([<VOW>])).*([<LOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(.)|([<VOW>])).*([<LOW>]).*",
                "prediction": "((<M0>)|((.)|([<VOW>])).*([<LOW>]).*)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "lines with a character , 2 or more times before a capital": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": "(.*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": "(.){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": "(..*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": "(.){2,}.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": "(.)+(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": "((.){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": ".*((.){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": "(((.){2,}).*([<CAP>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": "(\\b(.){2,}\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){2,}).*([<CAP>]).*",
                "prediction": "\\b((.){2,}).*([<CAP>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "lines with a lower-case letter preceding a character at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": ".*[<LOW>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": "[<LOW>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": "([<LOW>]).*(.){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": "([<LOW>]).*(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": "([<LOW>].*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": "(([<LOW>]){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": "([<LOW>]).*((.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": "\\b([<LOW>].*..*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*..*){2,}",
                "prediction": ".*([<LOW>].*..*){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "items with a letter preceding a numeral .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "[<LET>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "([<LET>].*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "([<LET>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "([<LET>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "([<LET>]).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "([<LET>]).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "([<LET>].*[<NUM>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "(([<LET>])|([<LOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<VOW>])).*([<NUM>]).*",
                "prediction": "(([<LET>])|([<NUM>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines ending with a capital at least 1 time": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "((.*)(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "(.*)(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "((.*)([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "((.*)(([<CAP>])+))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "((.*)(.*[<CAP>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "(((.*)([<CAP>]))+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "(.*)((([<CAP>])+)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "(.*)((.*[<CAP>].*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "(.*)(\\b([<CAP>])+\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<CAP>])+)",
                "prediction": "(.*)(.*([<CAP>])+.*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines ending with a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": "(.*)([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": "((.*)([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": "(.*)(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": "(.*)(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": "(.*)([<LOW>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": ".*(.*)([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": "((.*)(.*[<LOW>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": "(.*)(\\b([<LOW>])*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": "((.*)([<LOW>]))|(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*[<LOW>].*)",
                "prediction": "((.*)([<LOW>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines with a capital or lower-case letter , 3 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": "(([<CAP>])|([<LOW>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": "([<CAP>]).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": ".*(([<CAP>])|([<LOW>])){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": "\\b(([<CAP>])|([<LOW>])){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": "((.*[<CAP>].*)|([<LOW>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": "(.*([<CAP>])|([<LOW>]).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": "(\\b([<CAP>])|([<LOW>])\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": "(.*[<CAP>].*)|(([<LOW>]){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])){3,}",
                "prediction": "((([<CAP>])|([<LOW>])){3,}){3,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting in zero or more of the string <M0> or capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)*)|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)|([<CAP>]))*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)|([<CAP>]))(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)*)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)(.*))|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "((<M0>)|(([<CAP>])(.*)))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)*)|(([<CAP>]))(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)(.*))*)|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)+)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)*)|(([<CAP>])(.*)))*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing string <M0> followed by string <M1> , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": "(<M0>.*<M1>.*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": "(.*<M0>.*<M1>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": "([<LET>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": "(.*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": ".*(<M0>.*<M1>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": "(<M0>).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": "(.*<M0>.*).*(<M1>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": ".*(<M0>).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*<M1>.*){2,}",
                "prediction": "(.*<M0>.*).*((<M1>){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with a vowel before string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "(.*)([<VOW>].*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "(.*)(([<VOW>].*<M0>.*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "((.*)([<VOW>].*<M0>.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "((.*)([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "(.*)(([<VOW>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "((.*)([<VOW>])).*((<M0>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "(((.*)([<VOW>])).*(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "((.*)([<VOW>])).*((<M0>)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "((.*)(.*[<VOW>].*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<VOW>])).*(<M0>).*",
                "prediction": "(.*(.*)([<VOW>]).*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with words ending with a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": "\\b(.*)([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": "(\\b(.*)([<LOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": "(\\b(.*)([<LOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": "\\b.*(.*)([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": "\\b((.*)([<LOW>]))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": "\\b(.*)(([<LOW>])+)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": "\\b(.*)(.*[<LOW>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": ".*\\b(.*)([<LOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": "(\\b.*(.*)([<LOW>])\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<LOW>])+)\\b",
                "prediction": "\\b((.*)([<LOW>]))|([<LET>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with <M0> appear before either <M1> , <M2> , or a character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "((<M0>).*(<M1>).*)|(.)|(.)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "((<M0>).*(<M1>).*)|(.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(<M3>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "(<M0>).*((.)|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "((<M0>).*(<M1>).*)|((<M2>)|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "((<M0>).*(<M1>).*)|((.)|(<M2>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "([<NUM>]).*((<M1>)|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|(<M2>)|(.)).*",
                "prediction": "((<M0>).*(<M1>).*)|((.)|(<M3>))"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with a number then <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "(.*)([<NUM>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "(.*)(.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "((.*)([<NUM>].*<M0>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "(.*)(.*[<NUM>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "((.*)([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "(.*)(([<NUM>].*<M0>.*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": ".*(.*)([<NUM>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "((.*)(.*[<NUM>].*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "(.*(.*)([<NUM>]).*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "((.*)([<NUM>])).*(.*<M0>.*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a vowel before a capital letter at least zero times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "([<VOW>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "(.*[<VOW>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "([<VOW>]).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "(([<VOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "(([<VOW>])+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "(([<VOW>]).*([<CAP>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "(([<VOW>])(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "(([<VOW>])*).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "(\\b([<VOW>]).*([<CAP>]).*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(.*([<CAP>])*.*).*",
                "prediction": "(([<VOW>])(.*)).*(([<CAP>])*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines that have 2 or more lower-case letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "([<LOW>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": ".*([<LOW>]){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "(([<LOW>]){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "\\b([<LOW>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": ".*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "(([<LOW>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "(([<LOW>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "\\b(.*[<LOW>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "\\b(([<LOW>]){2,})(.*)\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with 2 or more capital letters or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(([<CAP>]){2,})|(<M0>)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(([<CAP>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(([<CAP>]){2,})|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(([<CAP>]){2,})|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "\\b(([<CAP>]){2,})|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": ".*(([<CAP>]){2,})|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(([<CAP>]){2,})|((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(([<CAP>]){2,})|(.*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((([<CAP>])|(<M0>)){2,}){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(([<CAP>]){2,})|((<M0>)(.*))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a 2 or more letters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": "([<LET>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": "\\b([<LET>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": ".*([<LET>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": ".*([<CAP>]){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": "(([<LET>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": "(([<CAP>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": "(([<LET>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": "(([<LET>])|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>])){2,}",
                "prediction": "(([<LOW>])|([<LET>])){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines starting with words and a character at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b(.)+\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b.\\b)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b(.)+\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b.*..*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b(.)*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b..*\\b)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b.\\b.*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b..*..*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b..*[<CAP>].*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(.)+\\b)(.*)",
                "prediction": "(\\b\\b(.)+\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines that contain either a vowel or the strings <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": "\\b(<M0>)|(<M1>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": "(.*[<VOW>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": ".*(<M0>)|([<VOW>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": ".*([<VOW>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": "\\b([<VOW>])|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": ".*(<M0>)|(<M1>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": "\\b(<M0>)|(<M1>)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": "(.*[<VOW>].*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<VOW>])|(<M1>).*",
                "prediction": "(.*[<VOW>].*)|((<M1>)|(<M0>))"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter followed by the string <M0> before containing a letter in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "([<CAP>]).*(<M0>.*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "([<CAP>].*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "(<M0>).*([<CAP>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "([<CAP>].*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "(<M0>.*[<CAP>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "(.*[<CAP>].*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "(([<CAP>].*<M0>.*)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "(([<CAP>].*<M0>.*).*([<LET>]).*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*(.*[<LET>].*).*",
                "prediction": "(([<CAP>].*<M0>.*).*([<LET>]).*)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines containing a vowel preceding the string <M0> before the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": "([<VOW>]).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": "([<VOW>]).*((<M0>)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": "([<VOW>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": "([<VOW>]).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": "(.*[<VOW>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": "([<VOW>]).*(.*<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": ".*([<VOW>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": "([<VOW>]).*((<M0>.*<M1>.*)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": "([<VOW>]).*((<M0>).*(<M1>).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*(<M1>).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|((<M1>)+)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines starting in a character or ending in string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "(((.)|(<M0>))(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "(((.)(.*))|(.))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "((.)|((.*)(<M0>)))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "(((.)(.*))|(.*))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "((.)(.*))|((.*)(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "(((.)(.*))|(.*))(.*<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "(((.)|(.))(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "(((.)+)|((.*)(<M0>)))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "(((.)(.*))|(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|((.*)(<M0>)))(.*)",
                "prediction": "(((.)|((.*)(<M0>)))+)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines with a capital letter before a character followed by a lower-case letter in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "([<CAP>]).*(..*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "(.)+([<CAP>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "(..*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "([<CAP>].*..*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "(([<CAP>])+).*(..*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "(([<CAP>])+).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "(([<CAP>])(.*)).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "(([<CAP>]).*(.)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "(.*[<CAP>].*).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<LOW>].*).*",
                "prediction": "([<CAP>].*..*).*(.*[<LOW>].*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines containing at least 2 vowels or characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "([<VOW>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(.*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "([<VOW>])|((.){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(([<VOW>])|(.)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(([<VOW>]){2,})|(.)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "((.)|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "(.*[<VOW>].*)|((.){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": ".*([<VOW>])|(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": ".*(([<VOW>])|(.)){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(.)){2,}",
                "prediction": "\\b(([<VOW>])|(.)){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "lines with a lower-case letter before vowel followed by character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": ".*[<LOW>].*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": "([<LOW>].*[<VOW>].*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": "[<LOW>].*[<VOW>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": "(.*[<LOW>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": "([<LOW>]).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": "([<LOW>]).*([<VOW>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": "([<LOW>]).*(..*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": "([<LOW>]).*(([<VOW>]).*(.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": "(([<LOW>])+).*([<VOW>].*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*([<VOW>].*..*).*",
                "prediction": "(([<LOW>])(.*)).*([<VOW>].*..*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines with words with a capital followed by letter , zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "\\b([<CAP>].*[<LET>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "\\b([<CAP>].*[<LOW>].*)*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "(\\b[<CAP>].*[<LET>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "\\b([<CAP>].*[<CAP>].*)*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "\\b([<CAP>].*[<LET>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "\\b([<CAP>].*[<NUM>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "\\b(([<CAP>])*).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "(\\b([<CAP>])*\\b).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "(\\b([<CAP>]).*([<LET>]).*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*[<LET>].*)*\\b",
                "prediction": "\\b(([<CAP>])*).*([<CAP>]).*\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines starting with capital letter or containing string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "((([<CAP>])|(<M0>))(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "(([<CAP>])|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "(([<CAP>])|((.*)(<M0>)))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "((([<CAP>])(.*))|(<M0>))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "(([<CAP>])(.*))|(.*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "(([<CAP>])|(.*<M0>.*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "(([<CAP>])(.*))|((.*)(<M0>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "(([<CAP>])(.*))|((.*<M0>.*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "((([<CAP>])(.*))|(.*<M0>.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.*<M0>.*))(.*)",
                "prediction": "((([<CAP>])+)|(.*<M0>.*))(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines ending with a lower-case letter before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "(.*)(([<LOW>])|([<LET>]))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "(.*)([<LOW>].*[<LET>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "(.*)(.*[<LOW>].*[<LET>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "(.*)(([<LOW>].*[<LET>].*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "(.*)(([<LOW>]).*([<LET>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "((.*)([<LOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "((.*)([<LOW>])).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "(.*)(([<LOW>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "((.*)(.*[<LOW>].*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<LOW>].*[<LET>].*)",
                "prediction": "((.*)([<LOW>])).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a number before 2 or more letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": "([<NUM>]).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": "([<NUM>].*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": "([<NUM>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": "([<NUM>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": "([<NUM>]).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": "([<NUM>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": "([<NUM>]).*((.*)([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": "(([<NUM>]){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": "(([<NUM>])(.*)).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LET>]){2,}).*",
                "prediction": ".*([<NUM>]).*(([<LET>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing either a number or a letter at least 3 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": "(([<LET>])|([<NUM>])){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": "(([<NUM>])|([<LET>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": "(([<LOW>])|([<LET>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": "(([<CAP>])|([<LET>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": "(([<CAP>])|([<NUM>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": ".*(([<NUM>])|([<LET>])){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": "([<LET>]).*(([<NUM>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": "(.*([<NUM>])|([<LET>]).*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": "\\b(([<NUM>])|([<LET>])){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>])){3,}",
                "prediction": "\\b(([<LET>])|([<NUM>])){3,}\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines with a vowel after a capital letter , the string <M0> , or a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": ".*([<CAP>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": "(.)+(([<CAP>])|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": "(.)+(([<CAP>])|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": "([<CAP>]).*(([<VOW>])|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": "([<CAP>]).*(([<CAP>])|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": "([<CAP>]).*(([<LET>])|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": "([<CAP>]).*(([<NUM>])|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": "([<CAP>]).*((.)|(<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*",
                "prediction": "([<CAP>]).*((<M0>)|(.)|([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing zero times vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": "[<VOW>]"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": ".*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": "([<VOW>])*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": ".*([<VOW>])*.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": "(.*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": "\\b([<VOW>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": ".*(.*)([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": ".*(([<VOW>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": ".*(([<VOW>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)*",
                "prediction": ""
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter before <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": ".*[<LOW>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "([<LOW>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "([<LOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": ".*([<LOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "(([<LOW>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "([<LOW>]).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "([<LOW>]).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "\\b([<LOW>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "([<LOW>].*<M0>.*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "line that contains only numbers , can occur zero or more times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": "(<M0>)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": "([<NUM>])*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": "((<M0>)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": "(([<NUM>])*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": "(.*[<NUM>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": "(\\b[<NUM>]\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": ".*([<NUM>])*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": "(\\b[<NUM>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": "(\\b([<NUM>])*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<NUM>].*)*",
                "prediction": "(([<NUM>])*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": "((<M0>)|(<M1>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": "\\b(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": ".*(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": ".*(<M1>)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": "\\b(<M1>)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": ".*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": "(.*<M0>.*)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": "(.*<M0>.*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": ".*((<M0>)|(<M1>))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": ".*((<M0>)|(<M1>))*.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a character after a capital letter at least 5 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "([<CAP>]){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "([<CAP>]){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "(..*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "([<CAP>].*..*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "(.)+(([<CAP>]){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "(([<CAP>]){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "([<CAP>]).*((.){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "((.){5,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "(.){5,}.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*(.)+",
                "prediction": "([<CAP>]).*(..*<M0>.*){5,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with letter or containing number , 4 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": "(([<LET>])|([<NUM>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": "([<LET>])|(([<NUM>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": "(([<CAP>])|([<NUM>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": "(.*[<LET>].*)|(([<NUM>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": "([<LET>]).*(([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": ".*(([<LET>])|([<NUM>])){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": "(.*([<LET>])|([<NUM>]).*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": "(\\b([<LET>])|([<NUM>])\\b){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": "(([<LET>])|(.*[<NUM>].*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.*[<NUM>].*)){4,}",
                "prediction": "(([<LET>])|(([<NUM>]){4,})){4,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words with a number or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b([<NUM>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b([<NUM>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b(([<NUM>])|([<LET>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b([<NUM>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "(\\b([<NUM>])|([<LET>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": ".*\\b([<NUM>])|([<LET>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b([<NUM>])|([<LET>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b([<NUM>])|([<LET>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b([<NUM>])|([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b([<NUM>])|([<LET>])|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a character then the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "(<M0>.*<M1>.*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "(<M0>.*..*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "((<M0>).*(.)+).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "(<M0>).*(..*<M1>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "((<M0>)+).*(..*<M1>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "((<M0>.*..*)+).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "((<M0>).*(..*).*)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "(<M0>).*((..*<M1>.*)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "((<M0>).*(..*)+).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(..*<M1>.*).*",
                "prediction": "((<M0>).*(.)+).*(.*<M1>.*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines with the string <M0> before a number then a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "(<M0>).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "(<M0>).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "((<M0>)+).*([<NUM>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "(<M0>).*([<NUM>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "(<M0>.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "(<M0>.*[<NUM>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "((<M0>)*).*([<NUM>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "((<M0>.*[<NUM>].*)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "((<M0>).*([<NUM>]).*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LET>]).*",
                "prediction": "((<M0>).*([<NUM>]).*)|([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines starting in a character before a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "((.)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "(..*[<VOW>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "((..*[<VOW>].*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "((..*[<VOW>].*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "((.)(.*)).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "((.)(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "(((.)(.*))+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "(((.)(.*)).*([<VOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "((..*[<VOW>].*)|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)).*(([<VOW>])+).*",
                "prediction": "((.)(.*)).*(.*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "lines that start with a number and then a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "([<NUM>].*[<LOW>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "([<NUM>].*[<LET>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "(([<NUM>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "(([<NUM>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "(.*[<NUM>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "(([<NUM>].*[<LET>].*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "(([<NUM>].*[<LET>].*)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "([<NUM>].*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "(([<NUM>])(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*)(.*)",
                "prediction": "(([<NUM>])(.*)).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines with a number before the string <M0> followed by the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "(([<NUM>])+).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "([<NUM>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "([<NUM>]).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "(.*[<NUM>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "(([<NUM>])*).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "(([<NUM>]).*(<M0>).*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "(([<NUM>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "(.*[<NUM>].*).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "(([<NUM>])(.*)).*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "(([<NUM>]).*(<M0>).*)|(.*<M1>.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter followed by a capital letter , at least twice": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "(.*[<LOW>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "([<LOW>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "(([<LOW>]){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "([<LOW>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "\\b([<LOW>].*[<CAP>].*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "(([<LOW>]).*([<CAP>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "(([<LOW>])(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "(([<LOW>].*[<CAP>].*)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "(([<LOW>].*[<CAP>].*){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<CAP>].*){2,}",
                "prediction": "(([<LOW>].*[<CAP>].*)|([<NUM>])){2,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character , the string <M0> , or the string <M1> with a number beforehand .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "(\\b(.)|(<M0>)|(<M1>)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((.)|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "(.)+((<M0>)|(<M1>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((.)|(<M0>)|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "(.)|((<M0>)|(<M1>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|(.)|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((.)|(<M1>)|(<M0>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((.)|(<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "(((.)|(<M0>)|(<M1>))|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((.)|(<M0>)|(<M1>)).*(([<NUM>])|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a vowel after a number 1 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "([<NUM>].*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "(([<NUM>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "([<NUM>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "([<VOW>]).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "(([<VOW>])+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "(.*([<NUM>]).*([<VOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "(([<VOW>])+).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "(([<NUM>])+).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "(\\b([<NUM>])+\\b).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<VOW>])+).*",
                "prediction": "\\b(([<NUM>])+).*([<VOW>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines starting with the string <M0> then capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "(<M0>.*[<CAP>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "(.*<M0>.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "([<CAP>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>.*[<CAP>].*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>.*[<CAP>].*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>)(.*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "(([<CAP>].*<M0>.*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "(\\b<M0>.*[<CAP>].*\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "((.*)(<M0>.*[<CAP>].*))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>)(.*)).*(.*[<CAP>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines ending with a vowel , zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "(.*)(([<VOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "((.*)([<VOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "(.*)((([<VOW>])*)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "(.*)((([<VOW>])*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "(.*)(\\b([<VOW>])*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "((.*)(([<VOW>])*))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "(.*)((.*[<VOW>].*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "((.*)(.*[<VOW>].*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "(.*)((([<VOW>])*)|([<VOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.*[<VOW>].*)*)",
                "prediction": "(.*)((([<VOW>])*)|([<CAP>]))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines ending with 5 or more of a character before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "(.*)(..*[<LET>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "((.*)(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "((.*)((.)+)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "((.*)(..*[<LET>].*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "(.*)((..*[<LET>].*){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "(.*)(((.){5,})|([<LET>]))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "((.*)(.)).*(([<LET>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "((.*)((.)){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "(((.*)(.)){5,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)).*(([<LET>]){5,}).*",
                "prediction": "((.*)((.){5,})).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "items with a character preceding a vowel preceding <M0> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": "((.)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": "(.)+(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": "(.)+([<VOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": "(.)+(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": "(.)+(..*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": "(..*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": "((.)+([<VOW>]).*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": ".*(..*[<VOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": "(.)+(([<VOW>]).*(<M0>).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(..*[<VOW>].*).*(<M0>).*",
                "prediction": "((.)+).*([<VOW>].*<M0>.*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines which are ending with containing only a character , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": "(.*)((.*){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": "(.*)((.){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": "((.*)(.)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": "(.*)((.*)(.))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": "(.*)(.*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": "(.*)(.*(.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": ".*(.*)((.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": "(.*)(\\b(.){2,}\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": "(.*)((.*..*){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.){2,})",
                "prediction": "(.*)(.*(.){2,}.*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "items with words containing a character preceding <M0> at least 2 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "\\b..*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "\\b(.){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "\\b(.){2,}.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "\\b(..*<M0>.*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "(\\b..*<M0>.*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "\\b(..*<M0>.*){2,}.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "(\\b..*<M0>.*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "(\\b(.){2,}\\b).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "\\b(.)+((<M0>){2,}).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*<M0>.*\\b){2,}",
                "prediction": "\\b((.){2,}).*(<M0>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with letter before either string <M0> , capital letter , or character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "(([<LET>]).*(<M0>).*)|((.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "([<LET>]).*((<M0>)|(.)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "([<LET>]).*(<M0>)|([<CAP>])|(.)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "([<LET>]).*((<M0>)|(.)|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "([<LET>]).*((<M0>)|(.)|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "([<LET>]).*(<M0>)|(([<CAP>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "([<CAP>]).*((<M0>)|([<CAP>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "([<CAP>]).*((<M0>)|([<LET>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<CAP>])|(.)).*",
                "prediction": "([<LET>]).*((<M0>)|([<CAP>])|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words ending in capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": "\\b(.*)([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": "(\\b(.*)([<CAP>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": "(.*)(\\b([<CAP>])+\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": "(\\b(.*)([<CAP>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": ".*\\b(.*)([<CAP>])\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": "\\b.*(.*)([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": "(\\b.*(.*)([<CAP>])\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": "\\b(.*)(.*[<CAP>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": "(.*)(\\b([<CAP>])(.*)\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(.*)([<CAP>]).*\\b",
                "prediction": "(\\b.*(.*)([<CAP>]).*\\b)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines containing a letter or string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": ".*([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": "\\b([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": ".*([<CAP>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": "(.*[<LET>].*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": ".*(([<LET>])|(<M0>))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": "\\b(([<LET>])|(<M0>))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": ".*(([<LET>])|(<M0>))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": "(.*([<LET>])|(<M0>).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": "(.*([<LET>])|(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|(<M0>).*",
                "prediction": ".*(.*[<LET>].*)|(<M0>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter followed by at least 1 vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": "([<CAP>].*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": "([<CAP>]).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": "([<CAP>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": "(([<CAP>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": ".*([<CAP>].*[<VOW>].*)+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": "([<CAP>]).*(\\b([<VOW>])+\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": "(.*[<CAP>].*).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": "([<CAP>]).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*)+",
                "prediction": "([<CAP>]).*((.*[<VOW>].*)+).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines with a lower-case letter followed by the string <M0> then a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": ".*[<LOW>].*<M0>.*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": "([<LOW>].*<M0>.*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": "([<LOW>].*<M0>.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": "([<LOW>]).*(<M0>.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": "([<LOW>].*<M0>.*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": "(.*[<LOW>].*<M0>.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": "(<M0>).*([<LOW>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": "(<M0>.*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": ".*([<LOW>].*<M0>.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(<M0>.*[<CAP>].*).*",
                "prediction": "(([<LOW>].*<M0>.*)+).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines stating with the string <M0> or a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "((<M0>)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "((<M0>)(.*))|(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "(((<M0>)(.*))|([<NUM>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "(((<M0>)|([<NUM>]))+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "(((<M0>)+)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "(((<M0>)|([<NUM>]))(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "((<M0>)|(.*[<NUM>].*))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "((<M0>)(.*))|(([<NUM>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "((<M0>)(.*))|(.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(([<NUM>])+))(.*)",
                "prediction": "((.*<M0>.*)|([<NUM>]))(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines with words that have numbers , 3 times or more": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "\\b([<NUM>]){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "(\\b[<NUM>]\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "\\b(.*[<NUM>].*){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "\\b.*([<NUM>]){3,}.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": ".*\\b([<NUM>]){3,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "\\b(([<NUM>]){3,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "(\\b([<NUM>]){3,}\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "(\\b.*[<NUM>].*\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "\\b(([<NUM>]){3,})|([<LET>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and a capital letter before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "\\b[<CAP>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "\\b.*[<CAP>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "\\b([<CAP>].*[<NUM>].*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "(\\b[<CAP>].*[<NUM>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "(\\b[<CAP>].*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "\\b([<CAP>]).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": ".*\\b[<CAP>].*[<NUM>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "\\b([<CAP>].*[<NUM>].*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "(\\b([<CAP>]).*([<NUM>]).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": ".*\\b([<CAP>]).*([<NUM>]).*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter , zero or more times before containing the string <M0> in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": "(([<LET>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": "((([<LET>])*)*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": "([<LET>]).*((<M0>)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": ".*(([<LET>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": "((([<LET>])*).*(<M0>).*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": "(([<LET>])*).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": "(([<LET>])*).*((<M0>)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": "\\b(([<LET>])*).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": "((([<LET>])*)(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.*<M0>.*).*",
                "prediction": "((([<LET>])*)|(<M0>)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines with the string <M0> before a letter or a capital letter in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>.*[<LET>].*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>.*[<LET>].*)|([<CAP>])"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>).*(([<LET>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>).*(([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": ".*(<M0>).*(([<LET>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": "((<M0>).*([<LET>]).*)|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": "(<M0>.*[<LET>].*)|(([<CAP>])(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": "((<M0>)+).*(([<LET>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])).*",
                "prediction": "((<M0>).*([<LET>]).*)|(([<CAP>])+)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing a capital letter before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": ".*[<CAP>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": ".*([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "(([<CAP>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "\\b([<CAP>]).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "([<CAP>]).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "((.*)([<CAP>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "([<CAP>].*[<LOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "([<CAP>]).*([<LOW>].*[<LOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words , a character , and a capital or lower case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b(.)|([<CAP>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "(\\b..*[<CAP>].*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b(.)|([<CAP>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b(.)|([<VOW>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b(..*[<CAP>].*)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "(\\b(.)|([<CAP>])|([<LOW>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b((.)|([<CAP>])|([<LOW>]))|([<LOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b((.)|([<CAP>])|([<LOW>]))|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "(\\b(.)|([<CAP>])|([<LOW>])\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<CAP>])|([<LOW>])\\b",
                "prediction": "\\b((.)|([<CAP>])|([<LOW>]))|([<NUM>])\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines with at least 3 capital letter before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": "(([<CAP>])+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": "([<CAP>]).*(([<VOW>]){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": "(([<CAP>]){3,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": "([<CAP>].*[<VOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": "((.*[<CAP>].*){3,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": "(([<CAP>])|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": ".*(([<CAP>]){3,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*).*(([<VOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": "((([<CAP>]){3,})|([<VOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){3,}).*([<VOW>]).*",
                "prediction": "(([<CAP>].*[<VOW>].*){3,}).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that contain a number followed by a character , at least 4 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "([<NUM>]){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "(.*..*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "([<NUM>].*..*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "(.*[<NUM>].*){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "([<NUM>]).*(.){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "(..*[<NUM>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "(.)+(([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "(([<NUM>]){4,}).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "([<NUM>]).*((.){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((.){4,}).*",
                "prediction": "(([<NUM>]){4,}).*(.){4,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines that end with a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": "((.*)([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": "(.*)([<CAP>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": "(.*)(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": "(.*)(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": ".*(.*)([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": "(.*)(\\b[<CAP>]\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": "(.*)(\\b([<CAP>])*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": "(.*)(\\b.*[<CAP>].*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": "(.*)((.*[<CAP>].*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<CAP>]).*",
                "prediction": "(.*)(\\b([<CAP>])+\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines containing the string <M0> with a letter before it": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "(<M0>).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": ".*(<M0>).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "(<M0>).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "(<M0>).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "((<M0>)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "(.*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "((<M0>)+).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "((<M0>)(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "(<M0>).*([<LET>].*[<CAP>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have only letters in the <U> words .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": ".*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "\\b([<LET>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "\\b([<LET>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "(\\b[<LET>]\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "\\b.*[<LET>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "\\b.*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "\\b.*([<LET>])*.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": ".*\\b([<LET>])*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "(\\b.*[<LET>].*\\b)*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with words containing a small letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b([<LOW>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b([<LOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b(.*[<LOW>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b([<LOW>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b([<LOW>])(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b([<LOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b([<LOW>]).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*\\b",
                "prediction": "\\b([<LOW>]).*([<CAP>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "my <U> <U> is <U> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b(.)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<LOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<NUM>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b(<M0>)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<CAP>])|([<LOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<LOW>])|([<CAP>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<LET>])|([<LOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<LOW>])|([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<CAP>])|([<LET>])|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<CAP>])|([<LET>])|(<M0>)\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter before lower-case letter or number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": "([<CAP>].*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": "([<CAP>]).*(([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])+).*(([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": ".*([<CAP>]).*(([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>]).*([<LOW>]).*)|(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>]).*([<LOW>]).*)|(([<NUM>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(.*[<CAP>].*).*(([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": "([<CAP>]).*(([<LOW>])|([<NUM>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])(.*)).*(([<LOW>])|([<NUM>])).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines with a vowel starting with the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "([<VOW>])(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(([<VOW>])(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(.*[<VOW>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "([<VOW>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "([<VOW>]).*((<M0>)(.*)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(([<VOW>])(.*))|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(([<VOW>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(([<VOW>])(.*)).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(([<VOW>])(.*))|(.*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(([<VOW>])(.*))|((<M0>)(.*))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have the string <M0> before at least 1 letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": "(.*<M0>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": "(<M0>.*[<LET>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": ".*(<M0>).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": "(<M0>).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": "(.*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": "(<M0>).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": "(<M0>).*(\\b([<LET>])+\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": "(<M0>).*((.*)([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<LET>].*)+",
                "prediction": "((<M0>)+).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines ending in 5 or more of a character before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "((.*)(..*[<LOW>].*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "((.*)(.)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "((.*)((.)+)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "(.*)((..*[<LOW>].*){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "((.*)(.)).*(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "((.*)((.){5,})).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "((.*)((.)){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "(((.*)(.)){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "(.*)(((..*[<LOW>].*){5,}))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((..*[<LOW>].*){5,})",
                "prediction": "(.*)(((.){5,})).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines having either a vowel , the string <M0> , or a lower-case letter coming before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "(([<VOW>])|(<M0>)|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "(([<LOW>])|(<M0>)|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "((<M0>)|([<VOW>])|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "(([<VOW>])|(<M0>)|(.)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "(([<CAP>])|(<M0>)|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "(([<VOW>])|([<LOW>])|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "((([<VOW>])|(<M0>)|([<LOW>]))|([<LOW>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "((([<VOW>])|(<M0>)|([<LOW>]))|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|(<M0>)|([<LOW>])).*(.)+",
                "prediction": "(([<VOW>])|(<M0>)|([<LOW>])).*((.)+).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "words with a number before a letter in the lines .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "\\b[<NUM>].*[<LET>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "(\\b[<NUM>].*[<LET>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "(\\b[<NUM>].*[<LET>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "\\b([<NUM>]).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "(\\b[<NUM>]).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "(\\b([<NUM>]).*([<LET>]).*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "\\b([<NUM>].*[<LET>].*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "(\\b([<NUM>]).*([<LET>]).*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "(\\b([<NUM>])+\\b).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>]).*([<LET>]).*\\b",
                "prediction": "\\b(([<NUM>])+).*([<LET>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines in which a number comes prior to a lower-case letter , and followed by a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "(([<NUM>])*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "([<NUM>]).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "([<NUM>]).*([<LOW>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "(.)+([<NUM>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "([<NUM>].*[<LOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "(.*[<NUM>].*[<LOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "(([<NUM>])+).*([<LOW>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "(([<NUM>])*).*([<LOW>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "(([<NUM>])|([<LOW>])|([<LET>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*([<LOW>].*[<LET>].*).*",
                "prediction": "(.*[<NUM>].*).*([<LOW>].*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines end with 2 or more characters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": "(.*)(.){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": "(.*)(.*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": "(.*)((.){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": "(.*)(..*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": "(.*)(\\b(.){2,}\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": "(.*)(.*(.){2,}.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": "((.*)(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": "(.*)(.*(.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": ".*(.*)((.){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.)){2,}",
                "prediction": "\\b((.*)(.)){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a lower-case letter ending in capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": "(.*)([<LOW>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": "([<LOW>]).*((.*)([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": "(([<LOW>])+)|(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": "(([<LOW>])+)|((.*)([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": "((.*)([<CAP>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": "(.*[<LOW>].*)|((.*)([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": "((.*)([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": "((.*)([<LOW>])).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": ".*([<LOW>]).*((.*)([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)([<CAP>])).*",
                "prediction": "(.*[<LOW>].*).*((.*)([<CAP>])).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a capital letter which is followed by a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": ".*[<CAP>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": "([<CAP>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": "(<M0>).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": "[<CAP>].*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": ".*([<CAP>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": "\\b[<CAP>].*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": "([<CAP>]).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": "\\b([<CAP>]).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": "(.*[<CAP>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<CAP>].*[<NUM>].*",
                "prediction": "([<CAP>].*[<NUM>].*).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with the strings <M0> , then <M1> , then <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": ".*<M0>.*<M1>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": ".*<M0>.*<M1>.*<M2>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": "(.*<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": ".*(<M0>.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": "(<M1>.*<M0>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": "(<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": "(<M0>).*(<M1>.*<M2>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": "(.*<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": ".*(<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*(<M1>.*<M2>.*).*",
                "prediction": "(.*<M1>.*<M0>.*).*(<M2>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with words and a lower-case or capital letter or a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b([<LOW>])|((.)+)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b(.*[<LOW>].*)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b([<LOW>])|(.)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b([<LOW>])|([<CAP>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b(([<LOW>])|(.))|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b([<LOW>])|((.)|([<CAP>]))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b(.)|([<LOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b([<LOW>])|((.)|([<CAP>]))\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b(([<LOW>])|([<CAP>])|(.))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>])|([<CAP>])|(.)\\b",
                "prediction": "\\b([<LOW>])|(([<CAP>])|(.))\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines finishing with a capital letter , twice or more or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "(([<CAP>])|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "(.*([<CAP>])|([<VOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "((.*)([<CAP>]))|(([<VOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "((.*)(([<CAP>])|([<VOW>]))){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "(.*)((([<CAP>])|([<VOW>])){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "(.*)((([<CAP>]){2,})|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "(([<CAP>]){2,})|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "(.*)(([<CAP>])|(([<VOW>]){2,}))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "(((.*)([<CAP>]))|([<VOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<CAP>]){2,})|([<VOW>]))",
                "prediction": "((([<CAP>])|([<VOW>])){2,})|(.*[<LET>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower case letter or the string <M0> , zero times or more": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": "(([<LOW>])|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": "((.)|([<LOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": "((<M0>)|([<LOW>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": "((.)|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": ".*(([<LOW>])|(<M0>))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": "((.*[<LOW>].*)|(<M0>))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": "((([<LOW>])|(<M0>))*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": "\\b(([<LOW>])|(<M0>))*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": "(.*([<LOW>])|(<M0>).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>]))*",
                "prediction": "(\\b([<LOW>])|(<M0>)\\b)*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines with words starting a character , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": "\\b(.){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": "\\b(.)(.*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": "\\b(.)((.){2,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": "(\\b.*..*\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": ".*\\b(.){2,}\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": "\\b((.){2,})(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": "\\b((.)(.*)){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": "(\\b(.){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": "(\\b(.)(.*)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)(.*)){2,}\\b",
                "prediction": "\\b((.){2,})|(.)\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines containing words starting with a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": "\\b(.*)([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": "\\b([<LET>])(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": "(\\b([<LET>])(.*)\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": "(\\b([<LET>])(.*)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": "\\b(([<LET>])(.*))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": ".*\\b([<LET>])(.*)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": "\\b(.*[<LET>].*)(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": "\\b.*([<LET>])(.*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": "(\\b.*[<LET>].*\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*\\b([<LET>])(.*)\\b.*",
                "prediction": ".*\\b([<LET>])(.*).*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with capital letter followed by character before containing string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": ".*[<CAP>].*..*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": "[<CAP>].*..*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": "(.)+([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": "(..*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": "([<CAP>].*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": "([<CAP>]).*(..*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": "(([<CAP>].*..*).*(<M0>).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": "(([<CAP>].*..*).*(<M0>).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": ".*([<CAP>].*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*..*).*(.*<M0>.*).*",
                "prediction": "\\b([<CAP>].*..*).*(<M0>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "lines with words that have the string <M0> after the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": "\\b<M0>.*<M1>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": "\\b<M1>.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": "\\b.*<M0>.*<M1>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": "(\\b<M1>.*<M0>.*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": "\\b.*<M1>.*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": "(\\b.*<M0>.*\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": "\\b(<M1>).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": ".*\\b<M1>.*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M1>).*(<M0>).*\\b",
                "prediction": ".*\\b<M0>.*<M1>.*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a number followed by the string <M0> or a character , 3 or more times in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "([<NUM>]).*((<M0>)|(.)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "(([<NUM>])|(<M0>)|(.)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "(([<NUM>]).*(<M0>)|(.)){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "(([<NUM>].*<M0>.*)|(.)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "(([<NUM>])*).*((<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "([<NUM>]).*((<M0>)|(.)){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "(([<NUM>]).*(<M0>).*)|(.){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "(([<NUM>]).*(<M0>).*)|((.){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "(([<NUM>])|(<M0>)).*((.){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*<M0>.*)|((.){3,})",
                "prediction": "([<NUM>]).*(((<M0>)|(.)){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines that have a character before the word string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": "(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": "(.)+(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": ".*(.)+(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": "(.)+((<M0>)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": "((.)+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": "(..*<M0>.*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": "(.)+(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": "(.)+(<M0>.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": "(.)+((<M0>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(.*<M0>.*).*",
                "prediction": "(.*..*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines with a vowel or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "(([<VOW>])|([<LET>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "(([<VOW>])|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": ".*([<VOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "(([<LET>])|([<VOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": ".*([<VOW>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "\\b([<VOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "(([<VOW>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "(.*[<VOW>].*)|(([<LET>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "((.*[<VOW>].*)|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "(.*[<VOW>].*)|(([<LET>])+)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which are containing a lower-case letter followed by the string <M0> at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": "([<LOW>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": "(.*[<LOW>].*<M0>.*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": "(.*[<LOW>].*<M0>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": ".*([<LOW>].*<M0>.*)+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": "(.*([<LOW>].*<M0>.*)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": "(.*)(([<LOW>].*<M0>.*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": "(.*)([<LOW>].*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": ".*(.*[<LOW>].*<M0>.*)+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>].*<M0>.*)+.*",
                "prediction": ".*(([<LOW>])+).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with words that contain lower-case letter before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "\\b[<LOW>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "\\b.*[<LOW>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "\\b([<LOW>].*<M0>.*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "(\\b[<LOW>].*<M0>.*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "\\b(.*[<LOW>].*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "\\b([<LOW>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "\\b([<LOW>].*<M0>.*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "\\b(.*[<LOW>].*).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "\\b.*([<LOW>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<LOW>].*).*(<M0>).*\\b",
                "prediction": "\\b(([<LOW>]).*(<M0>).*)|([<CAP>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines with 2 or more of a string <M0> ending with a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "(.*<M0>.*)|((.*)(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "(<M0>.*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "((<M0>).*((.*){2,})|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "((<M0>){2,})|((.*)(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "((<M0>){2,})|(((.*)(.)))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "((<M0>){2,}).*((.*)(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "(<M0>).*(((.*)(.)){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "(.*<M0>.*).*(((.*)(.)){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "(<M0>).*((.*)((.){2,})).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.*)((.){2,})).*",
                "prediction": "((<M0>){2,})|(((.*)(.))){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines with a character 4 times or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": "(.){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": "((.)|([<NUM>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": ".*(.){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": "(..*[<NUM>].*){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": "((.){4,})|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": "(.)|(([<NUM>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": "(.)|(([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": "(.)+(([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": "((.){4,})|(.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.){4,})|([<NUM>])\\b",
                "prediction": ".*((.){4,})|([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character followed by a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": "..*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": ".*..*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": "(..*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": "(.)+([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": "(..*[<VOW>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": "\\b..*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": "(.)+.*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": "(.)+(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": "(..*[<VOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*..*[<VOW>].*",
                "prediction": "(..*[<VOW>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines containing a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": "[<VOW>]"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": "([<VOW>])*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": "([<VOW>])+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": ".*([<VOW>])+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": ".*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": "(.*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": ".*([<VOW>])*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": "(.*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*([<VOW>])(.*).*\\b",
                "prediction": ".*(.*)([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1
        ]
    },
    "lines in which a capital letter is followed by a <M0> string , coming before a letter that's lower-case": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "([<CAP>].*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(<M0>).*([<CAP>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<CAP>]).*(<M0>).*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "([<CAP>].*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<CAP>].*<M0>.*)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<CAP>].*<M0>.*).*([<LOW>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<CAP>].*<M0>.*)|([<LET>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<CAP>].*<M0>.*)|(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<CAP>].*<M0>.*).*([<LOW>]).*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<CAP>].*<M0>.*)|([<LOW>])).*([<LOW>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines which start with the string <M0> followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "(<M0>.*[<LOW>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "(<M0>).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "((<M0>.*[<LOW>].*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "((<M0>)(.*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "(<M0>).*((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "((<M0>.*[<LOW>].*)+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "(<M0>).*([<LOW>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "(<M0>).*([<LOW>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "(<M0>).*([<LET>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)(.*)).*([<LOW>]).*",
                "prediction": "(<M0>.*[<LOW>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a number followed by a lower case letter at least 2 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "([<NUM>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "([<NUM>].*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "(.*[<NUM>].*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "([<NUM>]).*([<LOW>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "([<NUM>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "([<NUM>]).*([<LOW>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "(([<NUM>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "([<NUM>]).*([<LOW>].*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "(.*[<NUM>].*).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LOW>].*){2,}",
                "prediction": "([<NUM>]).*([<LOW>].*[<CAP>].*){2,}.*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with character or string <M0> , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "((.*)(.))|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "((.*)(.))|(<M0>)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "(.*)((.)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "((.*)(.))|(<M0>.*<M0>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "((.*)((.)|(<M0>))){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "((.*)(.))|((<M0>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "(.*)((.)|((<M0>){2,}))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "((.*)((.))|(<M0>)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "(.*)(((.)|(<M0>)){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(((.)|(<M0>)){2,})",
                "prediction": "(((.*)(.))|(<M0>)){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1
        ]
    },
    "lines containing the string <M0> followed by at least 1 vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>.*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": ".*<M0>.*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": ".*(<M0>.*[<VOW>].*)+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*((.*)([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(.*<M0>.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*(.*([<VOW>])+.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*((.*[<VOW>].*)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines can either have a lower case letter or a letter that follows a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|(.))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|([<CAP>])|(.)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|([<CAP>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|(.)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|([<CAP>])|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|(.)|([<LET>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|([<LET>])|(.)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines containing string <M0> or vowel , 5 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "(([<VOW>])|(<M0>)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "((.)|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "((<M0>)|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": ".*((<M0>)*)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": ".*(<M0>)|([<VOW>]){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "(.*(<M0>)|([<VOW>]).*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "(.*<M0>.*)|(([<VOW>]){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": ".*((<M0>)|([<VOW>])){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": ".*(<M0>)|(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "((.*<M0>.*)|([<VOW>])){5,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with at least 1 capital letter with a character before it": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "([<CAP>].*..*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "(..*[<CAP>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "(.)+(([<CAP>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "((.)+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "((..*[<CAP>].*)+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "([<CAP>]).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "((.)+([<CAP>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*(.*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines with lower-case letter before either string <M0> , letter , or string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M1>)|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M1>)|([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((.)|([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "([<LOW>]).*(([<LOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": ".*([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<LET>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|([<CAP>])|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with string <M0> or number before a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "(<M0>)|(([<NUM>]).*([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "(<M0>).*(([<LET>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)|(([<NUM>]).*([<LET>]).*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)|(([<NUM>])+).*([<LET>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)|(([<NUM>])+)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)+)|(([<NUM>]).*([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)|(([<NUM>]).*([<LET>]).*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "(<M0>)|(([<NUM>])|([<LET>])).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a character before a lower-case letter ending in string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "(.)+(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "(.)+(([<LOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "(.)+([<LOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "(.)+(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "((.)+).*([<LOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "(.)+(([<LOW>]).*(<M0>).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "(..*[<LOW>].*).*((.*)(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "((.)+([<LOW>]).*).*((.*)(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "(..*[<LOW>].*).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LOW>].*).*((.*)(<M0>)).*",
                "prediction": "((.)+([<LOW>]).*)|((.*)(<M0>))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lined ending with words with a capital letter with a number after": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "(.*)(\\b([<NUM>])(.*)\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "(.*)(\\b([<CAP>])(.*)\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "((.*)([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "(.*)(\\b[<NUM>].*[<NUM>].*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "(.*)(\\b([<NUM>]).*([<CAP>]).*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "((.*)([<NUM>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "(.*)(\\b([<CAP>]).*([<NUM>]).*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "(.*)(\\b([<NUM>])\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b[<CAP>].*[<NUM>].*\\b)",
                "prediction": "(\\b(.*)([<NUM>])\\b).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with a letter , a number , or the string <M0> after a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": "(([<LET>])|([<NUM>])|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": "((<M0>)|([<LET>])|([<NUM>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": ".*([<LET>])|([<NUM>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": "((.)|([<LET>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": "([<LET>]).*(([<NUM>])|(<M0>)|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": "(.*[<LET>].*)|(([<NUM>])|(<M0>)|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": "(([<LET>])|(<M0>)|([<NUM>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": "(<M0>).*(([<LET>])|([<NUM>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LET>])|([<NUM>])|(<M0>)).*",
                "prediction": "(([<LET>])|([<NUM>])|(<M0>)).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 5 or more of a lower-case letter before vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": ".*([<LOW>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": "([<LOW>].*[<VOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": "(([<LOW>]){5,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": "([<LOW>]).*(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": ".*([<LOW>]).*(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": ".*([<LOW>].*[<VOW>].*){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": ".*(([<LOW>]){5,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": "(.*[<LOW>].*).*(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": "([<LOW>]).*((([<VOW>]){5,}).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*[<VOW>].*){5,}",
                "prediction": "(([<LOW>].*[<VOW>].*){5,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines 5 or more times with a lower-case letter after a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": "(.*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": "\\b([<NUM>]).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": "([<NUM>].*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": "([<NUM>]).*(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": "\\b([<NUM>].*[<LOW>].*){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": "(([<NUM>]){5,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": ".*([<NUM>].*[<LOW>].*){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": "(([<NUM>]).*([<LOW>]).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": "(([<NUM>])(.*)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){5,}).*",
                "prediction": "(.*[<NUM>].*).*(([<LOW>]){5,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with <M0> before a letter , a capital , or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": "(<M0>).*([<LET>].*[<CAP>].*)|([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": "(<M0>).*(([<CAP>])|([<VOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": "([<LET>]).*(([<LET>])|([<CAP>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": ".*(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": "(<M0>).*([<LET>]).*(([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": "((<M0>)+).*(([<LET>])|([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": "(<M0>).*(.*([<LET>])|([<CAP>])|([<VOW>]).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": "(<M0>.*[<LET>].*).*(([<LET>])|([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>])|([<CAP>])|([<VOW>])).*",
                "prediction": "(<M0>.*[<LET>].*).*(([<LET>])|([<VOW>])|([<VOW>])).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines with the string <M0> before words with string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": "(<M0>).*(\\b<M1>\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": "(<M0>.*<M1>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": "(<M0>).*(\\b(<M1>)*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": ".*(<M0>).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": "(<M0>).*\\b(<M1>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": "(<M0>).*(\\b(<M1>)+\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": "(<M0>).*(\\b(.*)(<M1>)\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": "(<M0>).*(\\b.*<M1>.*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": "(<M0>).*(\\b(<M1>)(.*)\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b.*<M1>.*\\b).*",
                "prediction": "(<M0>).*(\\b(.*<M1>.*).*\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines with only a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": "(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": ".*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": "\\b(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": ".*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": "(.*..*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": "(.*..*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": ".*(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": "(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": ".*(.)+([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".",
                "prediction": "((.)+).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 5 or more of a vowel or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": "(([<VOW>])|([<LOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": "([<VOW>])|(([<LOW>]){5,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": "(([<LOW>])|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": "(.*[<VOW>].*)|(([<LOW>]){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": ".*([<VOW>])|([<LOW>]){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": ".*(([<VOW>])|([<LOW>])){5,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": "\\b(([<VOW>])|([<LOW>])){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": "(.*([<VOW>])|([<LOW>]).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": "((([<VOW>])|([<LOW>])){5,}){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LOW>])){5,}",
                "prediction": "((.*[<VOW>].*)|([<LOW>])){5,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with 3 or more of a number before capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": "(..*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": "([<NUM>].*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": ".*([<NUM>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": "(.*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": "(([<NUM>]){3,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": "([<NUM>]).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": "(([<NUM>].*[<CAP>].*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": ".*([<NUM>].*[<CAP>].*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": "(([<NUM>].*[<CAP>].*){3,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>].*[<CAP>].*)(.*)){3,}",
                "prediction": "(.*[<NUM>].*).*(([<CAP>]){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with zero or more of a letter before a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": ".*([<LET>].*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": "([<LET>].*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": ".*([<LET>]).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": "(([<LET>].*[<VOW>].*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": "(([<LET>])*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": "([<LET>]).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": ".*([<LET>]).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": "(.*[<LET>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": "(.*[<LET>].*).*(([<VOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>].*[<VOW>].*)*.*",
                "prediction": ".*(([<LET>])*).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 3 or more of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "(<M0>){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "(.*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": ".*(<M0>){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "((<M0>){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "\\b(<M0>){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "((.*)(<M0>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "(<M0>).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": ".*((<M0>){3,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "\\b((<M0>){3,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": ".*((<M0>){3,}).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and zero or more numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": "\\b([<NUM>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": "(\\b[<NUM>]\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": "(\\b([<NUM>])*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": "\\b.*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": "\\b(.*[<NUM>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": "\\b.*([<NUM>])*.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": ".*\\b([<NUM>])*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": "(\\b.*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])*\\b",
                "prediction": "\\b.*([<NUM>])*\\b.*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> , zero or more times before a letter or the string <M1> in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>)*).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>)*).*(([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>)*).*(([<LET>])|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>)*)|(([<LET>]).*(<M1>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "(((<M0>)*)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "(((<M0>)*)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>)*).*(([<LET>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "((<M0>)*)|((<M1>).*([<LET>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)*).*(([<LET>])|(<M1>)).*",
                "prediction": "(((<M0>)*).*([<LET>]).*)|(<M1>)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines with letter followed by capital letter , zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": "([<CAP>].*[<LET>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": "([<LET>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": "(([<LET>].*[<CAP>].*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": "(([<LET>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": "(.*[<LET>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": ".*([<LET>].*[<CAP>].*)*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": "(([<LET>]).*([<CAP>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": "([<LET>]).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": "(.*[<LET>].*).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<CAP>].*)*",
                "prediction": "(([<LET>])(.*)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a letter before a number or string <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LET>].*[<NUM>].*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": ".*([<LET>].*[<NUM>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": "([<CAP>]).*(([<NUM>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*((<M0>)|([<NUM>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": "([<NUM>]).*(([<NUM>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<LET>]).*([<NUM>]).*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*((([<NUM>])|(<M0>)|(<M1>)))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": "(.*[<LET>].*).*(([<NUM>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*",
                "prediction": ".*([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": "\\b([<LOW>])+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": "\\b.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": ".*\\b[<LOW>]\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": ".*\\b[<LOW>].*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": "\\b.*([<LOW>])+.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": "\\b(.*[<LOW>].*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": ".*\\b([<LOW>])+\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": "\\b[<LOW>].*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": "(\\b.*[<LOW>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b.*[<LOW>].*\\b)(.*)",
                "prediction": "\\b([<LOW>])|([<CAP>])+\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines that end with a character or a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": "((.*)(.))|([<VOW>])"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": "(.*)((.)|([<VOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": "((.*)(.))|(([<VOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": "(.*)(((.)|([<VOW>]))+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": "(.*)(((.)|([<VOW>]))*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": "(.*)(((.)+)|([<VOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": "(.*)(.*(.)|([<VOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": ".*(.*)((.)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": "((.*)(.))|(.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((.)|([<VOW>]))",
                "prediction": "(.*)(\\b(.)|([<VOW>])\\b)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lines with 2 or more of a capital letter before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": "([<CAP>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": "(..*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": "([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": "(([<CAP>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": ".*([<CAP>].*[<NUM>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": ".*(([<CAP>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": ".*([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": "(.*[<CAP>].*).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>]){2,}).*",
                "prediction": "(([<CAP>].*[<NUM>].*){2,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "(<M0>).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "((<M0>)*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "((<M0>)+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "(<M0>).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "(.*<M0>.*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "((<M0>)(.*)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "(<M0>).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "(<M0>).*((.*)(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "((<M0>)+).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*..*)+",
                "prediction": "((<M0>).*(.)+).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a letter , number , or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>.*[<LET>].*)|(([<NUM>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>).*([<LET>].*[<NUM>].*)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>).*(([<LET>])|([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>)+(([<LET>])|([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>).*(([<NUM>])|([<LET>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>.*[<LET>].*).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "((<M0>).*([<LET>]).*)|(([<NUM>])|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>).*([<LET>]).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "((<M0>)+).*(([<LET>])|([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>.*[<LET>].*).*(([<NUM>])|([<VOW>])|([<VOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> or lower-case letter before string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": ".*(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": "((<M0>)|([<LOW>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": "((<M0>)|([<LOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": "(<M0>)|(([<LOW>]).*(<M1>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": "(([<LOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": "(<M0>).*(([<LOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": "(.*<M0>.*)|([<LOW>].*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": "((<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": ".*((<M0>)|([<LOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])).*(<M1>).*",
                "prediction": "((<M0>)|(([<LOW>]).*(<M1>).*))+"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character or vowel before capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": "(.)|(([<VOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<VOW>])|(.)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": "((.)|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": "(.)+(([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": "((..*[<VOW>].*)|([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": "((.)|([<CAP>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": ".*((.)|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": "(((.)|([<VOW>]))+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": "((.)|(([<VOW>]).*([<CAP>]).*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<VOW>])).*([<CAP>]).*",
                "prediction": "(.)|(([<VOW>])|([<CAP>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "items with a small letter preceding <M0> at least thrice .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": "[<LOW>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": "([<LOW>].*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": "(<M0>).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": "([<LOW>]).*((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": ".*([<LOW>].*<M0>.*){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": "(([<LOW>]).*(<M0>).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": "([<LOW>]).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": "\\b([<LOW>].*<M0>.*){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*){3,}",
                "prediction": "(.*[<LOW>].*).*((<M0>){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines that have a minimum of 1 vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": "[<VOW>]"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": "([<VOW>])+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": "(.*)([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": "([<VOW>])*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": "(.*[<VOW>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": ".*([<VOW>])+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": "(.*[<VOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": ".*([<VOW>])*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": "(.*)(.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<VOW>].*)+",
                "prediction": "((.*)([<VOW>]))+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "identify lines that contain a lower-case letter and end with the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": "[<LOW>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": "([<LOW>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": ".*[<LOW>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": "([<LOW>].*<M0>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": "([<LOW>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": "([<LOW>]).*((.*)(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": "(([<LOW>])+).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": "(([<LOW>])+).*(.*)(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((.*)(<M0>)).*",
                "prediction": "([<LOW>]).*(.*(.*)(<M0>).*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines with words with only a number before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": "\\b[<NUM>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": "\\b([<NUM>].*<M0>.*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": "(\\b[<NUM>]\\b).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": "\\b([<NUM>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": ".*\\b[<NUM>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": "(\\b[<NUM>]\\b).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b).*(<M0>).*",
                "prediction": "(\\b[<NUM>].*<M0>.*\\b).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with a capital letter preceding a letter , vowel , or the word <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "([<CAP>]).*([<LET>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "([<CAP>].*[<LET>].*)|(([<VOW>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "([<CAP>]).*([<LET>])|([<VOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "([<CAP>].*[<LET>].*)|((<M0>)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "([<CAP>]).*(([<LET>])|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "([<CAP>]).*([<LET>].*[<VOW>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "([<CAP>]).*(([<LET>])|([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>).*([<CAP>]).*(([<LET>])|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*((<M0>)|([<LET>])|([<VOW>])).*",
                "prediction": "(<M0>).*([<CAP>]).*(([<LET>])|([<VOW>])|([<VOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines which are containing ending with a letter , zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": "(.*)(([<LET>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": ".*(.*)([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": "((.*)([<LET>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": "(.*)(\\b([<LET>])*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": ".*((.*)([<LET>]))*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": ".*(.*)(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": "(.*)((.*[<LET>].*)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": "(.*)(.*([<LET>])*.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": "(.*)(.*([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)([<LET>]))*.*",
                "prediction": "(.*)((([<LET>])*)|([<CAP>]))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines containing 2 or more capital letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": ".*([<CAP>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "([<CAP>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "\\b([<CAP>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "((.*)([<CAP>])){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "(([<CAP>]){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "(([<CAP>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": ".*(([<CAP>]){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "(([<CAP>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "(.*([<CAP>]){2,}.*){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before a lower-case letter or a number in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(<M0>.*[<LOW>].*)|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(<M0>.*[<LOW>].*)|(([<NUM>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*([<LOW>].*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(<M0>).*(([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": "(<M0>.*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": "((<M0>).*([<LOW>]).*)|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": ".*(<M0>).*(([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": "((<M0>).*([<LOW>]).*)|(([<NUM>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": "((<M0>)+).*(([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LOW>])|([<NUM>])).*",
                "prediction": "((<M0>).*([<LOW>]).*)|(.*[<NUM>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "items with a character preceding <M0> at least 2 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(..*<M0>.*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.)+((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.){2,}.*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": ".*(..*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "((.){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": ".*(.)+((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.)+((.*<M0>.*){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.*..*).*(<M0>){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines that contain the string <M0> before a character at least 4 times or more": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "(.*..*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "(.*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "((<M0>){4,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "((<M0>).*(.)+){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "(<M0>).*((.){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "(<M0>.*..*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "((<M0>){4,}).*(.){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "((<M0>).*(.){4,}){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "(<M0>).*(((.){4,}).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((.){4,}).*",
                "prediction": "((<M0>){4,}).*((.){4,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words an a capital letter or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": "(\\b([<CAP>])|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": "\\b([<CAP>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": ".*([<CAP>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": "(\\b([<CAP>])|([<VOW>])\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": "\\b(.*[<CAP>].*)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": "\\b(([<CAP>])|([<VOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": ".*\\b([<CAP>])|([<VOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": ".*\\b([<CAP>])|([<CAP>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": ".*\\b([<CAP>])|([<CAP>])|([<LOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": "\\b.*([<CAP>])|([<VOW>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with <M0> preceding <M1> preceding a letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M0>.*<M1>.*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M0>).*(<M1>.*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M0>.*<M1>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M1>.*<M0>.*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M0>.*<M1>.*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M0>.*[<LET>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M0>).*(.*<M1>.*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M0>.*<M1>.*).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<LET>].*).*",
                "prediction": "(<M0>).*((<M1>.*[<LET>].*)+).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    "lines starting in string <M0> or <M1> before <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)|(<M1>))(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "((<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)|(<M1>)).*(<M2>).*)(<M2>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)+)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)(.*))|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)|(<M1>))(.*)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "((<M0>)|((<M1>).*(<M2>).*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "((<M0>)|((<M1>)(.*))).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>).*(<M1>).*)|(<M2>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)|(<M1>)).*(<M2>).*)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines that contain a lower-case letter or a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": "(([<LOW>])|(.))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": ".*([<LOW>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": "(([<LOW>])|(.))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": "\\b(([<LOW>])|(.))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": "\\b([<LOW>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": "\\b(.)|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": ".*(.)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": "(.*[<LOW>].*)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": "(.*[<LOW>].*)|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LOW>])\\b",
                "prediction": "((.*[<LOW>].*)|(.))+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter containing a number 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": "\\b([<LOW>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": "([<LOW>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": ".*([<LOW>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": "(.*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": "\\b([<LOW>]).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": "(([<LOW>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": "([<LOW>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": "\\b([<LOW>]).*(([<NUM>]){2,}).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*([<NUM>]){2,}.*).*",
                "prediction": "\\b([<LOW>]).*([<NUM>]){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines ending with 3 or more letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": "(.*)(([<LET>]){3,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": "((.*)([<LET>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": "(.*)(([<CAP>]){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": "(.*)(([<LOW>]){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": "((.*)([<CAP>])){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": ".*((.*)([<LET>])){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": ".*(.*)(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": "(.*)((.*[<LET>].*){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": "(.*)(\\b([<LET>]){3,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>])){3,}",
                "prediction": "(.*)(.*([<LET>]){3,}.*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with 5 or more of the string <M0> or characters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "(.*)((<M0>)|(.)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "((.*)(<M0>))|(.*..*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "((.*)(<M0>))|((.){5,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "((.*)(<M0>)|(.)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "(.*)((<M0>)|((.){5,}))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "((.*)((<M0>)|(.))){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "(((.*)(<M0>))|(.)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "(.*)(((<M0>){5,})|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "((.*)(<M0>))|(((.){5,}))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(<M0>))|(.)){5,}",
                "prediction": "(.*)(((<M0>)|(.)){5,})"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "items with a letter preceding <M0> at least thrice .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": "[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": "([<LOW>].*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": "([<LET>].*[<NUM>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": "([<LET>].*<M0>.*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": "([<LET>]).*((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": ".*([<LET>].*<M0>.*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": "(([<LET>]).*(<M0>).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": "\\b([<LET>].*<M0>.*){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": "(([<LET>]).*(<M0>).*)|(([<NUM>]){3,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>){3,}).*",
                "prediction": "(.*[<LET>].*).*((<M0>){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with <M0> followed by 2 or more capital letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": ".*<M0>.*[<CAP>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "\\b<M0>.*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "(<M0>.*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "([<LET>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": ".*(<M0>.*[<CAP>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "(<M0>).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "((<M0>).*([<CAP>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "\\b(<M0>.*[<CAP>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "<M0>.*([<CAP>].*[<CAP>].*){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "(.*<M0>.*).*(([<CAP>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines ending with number before containing a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "(.*)([<NUM>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "(.*)(.*[<NUM>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "(.*)(([<NUM>].*[<CAP>].*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "((.*)([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "(.*)(([<NUM>]).*([<CAP>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "((.*)([<NUM>])).*(([<CAP>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "((.*)([<NUM>])).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "((.*)([<NUM>])).*(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "((.*)(.*[<NUM>].*)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>])).*(.*[<CAP>].*).*",
                "prediction": "((.*)([<NUM>])).*((.*)([<CAP>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines starting with a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "([<CAP>])(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])(.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(.*[<CAP>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "((.*)([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "((.*)([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(\\b([<CAP>])(.*)\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])(.*))|(.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a letter followed by 2 or more times a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": "([<LET>].*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": "([<LET>].*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": "([<LET>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": "([<LET>]).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": "(([<LET>]){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": ".*([<LET>].*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": ".*([<LET>].*[<NUM>].*){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": "\\b([<LET>].*[<NUM>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*[<NUM>].*){2,}",
                "prediction": "(.*[<LET>].*).*(([<NUM>]){2,}).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "items with <M0> following a letter or a character .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": ".*([<LET>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": "(.*[<LET>].*)|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": ".*([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": "((<M0>)|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": "(.)|(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": "(([<LET>])|(.)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": ".*([<LET>])|(.)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": "((.)|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": "([<LET>]).*((.)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LOW>])|(.)).*(<M0>).*",
                "prediction": "((<M0>)|(.)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines that finish with the <M0> string 4 times or more": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": "(.*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": "(.*)((<M0>){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": "((<M0>){4,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": "((.*)(<M0>)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": "((.*)(.*<M0>.*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": ".*((.*)(<M0>)){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": "(\\b(<M0>){4,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": "\\b((<M0>){4,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": "(.*)(\\b(<M0>){4,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)){4,}",
                "prediction": ".*(.*)((<M0>){4,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing words that end with a number , at least 3 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": "\\b(.*)([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": ".*\\b(.*)([<NUM>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": "\\b(.*)(.*[<NUM>].*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": "\\b((.*)([<NUM>])){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": "\\b(.*)(([<NUM>]){3,})\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": "(\\b(.*)([<NUM>])\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": "\\b(.*)(([<NUM>]){3,})\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": "(.*)(\\b([<NUM>]){3,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": ".*\\b((.*)([<NUM>])).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.*)(([<NUM>]){3,})\\b",
                "prediction": ".*\\b((.*)([<NUM>])){3,}\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting in words with a lower-case letter , string <M0> , or number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "\\b([<LOW>])|(<M0>)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "(\\b([<LOW>])|(<M0>)|(.)\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "(\\b([<LOW>])|(<M0>)|(<M0>)\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "(\\b([<LOW>])|(<M0>)|([<NUM>]))(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "(\\b(<M0>)|([<LOW>])|([<NUM>])\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "\\b(([<LOW>])|(<M0>)|([<NUM>]))|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "(\\b([<LOW>])|(<M0>)|([<NUM>]))\\b(.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "(\\b([<LOW>])|(<M0>)|([<NUM>])|(.)\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])|(<M0>)|([<NUM>])\\b)(.*)",
                "prediction": "(\\b([<LOW>])|(<M0>)|([<NUM>])|([<NUM>])\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing a capital letter followed by a number or a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": "(.)+(([<CAP>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": "([<CAP>].*[<NUM>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": ".*([<CAP>].*[<NUM>].*)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": "([<CAP>]).*(([<NUM>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": "([<CAP>]).*((.)|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": "(([<CAP>])|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": ".*([<CAP>]).*(([<NUM>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": "(.*[<CAP>].*).*(([<NUM>])|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": "\\b([<CAP>]).*(([<NUM>])|(.)).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<NUM>])|(.)).*",
                "prediction": "(([<CAP>]).*([<NUM>]).*)|(..*<M0>.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with the string <M0> or number before string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": ".*(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "((<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "((<M0>)|(<M1>)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "(<M0>)|(([<NUM>]).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "(<M0>).*(([<NUM>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "((<M0>)|(([<NUM>]).*(<M1>).*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": ".*(<M0>)|(([<NUM>]).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": ".*((<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "((<M0>)|(([<NUM>]).*(<M1>).*))+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending in words with a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": "(.*)(\\b[<LOW>]\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": "((.*)([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": "\\b(.*)([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": "(.*)(\\b([<LOW>])*\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": "(.*)(\\b([<LOW>])+\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": ".*(.*)([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": "(.*)(\\b.*[<LOW>].*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": ".*\\b(.*)([<LOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": "(.*)(\\b([<LOW>])(.*)\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<LOW>])+\\b)",
                "prediction": "(.*)(\\b[<LOW>].*[<LOW>].*\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting in a letter before capital letter then string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "([<LET>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "([<CAP>].*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "([<LET>]).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<LET>].*[<CAP>].*).*(<M0>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<LET>].*[<CAP>].*)(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<LET>].*[<CAP>].*).*(<M0>).*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<CAP>].*[<CAP>].*)(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<CAP>].*[<LET>].*)(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])(.*)).*([<CAP>].*<M0>.*).*",
                "prediction": "(([<LET>].*[<CAP>].*).*(<M0>).*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing only a lower-case letter before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": "([<LOW>].*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": "([<LOW>]).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": ".*([<LOW>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": "(([<LOW>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": "(.*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": ".*([<LOW>]).*(.)+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": "([<LOW>]).*(..*[<LET>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": "\\b([<LOW>]).*(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*(.)+",
                "prediction": "([<LOW>]).*(.*..*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with letters before a number or a capital": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": "(([<LET>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": "([<LET>]).*(([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": "(([<LET>])|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": "(([<LET>]).*([<NUM>]).*)|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": ".*([<LET>]).*(([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": "(([<CAP>])|([<NUM>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": "(([<LET>]).*([<NUM>]).*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": "(([<LET>])+).*(([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": "(.*[<LET>].*).*(([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<NUM>])|([<CAP>])).*",
                "prediction": "(([<LET>]).*([<NUM>]).*)|(.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines ending with a character , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": "((.*)(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": "(.*)((.){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": "(.*)(.*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": "(.*)(.*(.){2,}.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": "(.*)(\\b(.){2,}\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": ".*(.*)((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": "(.*)(((.){2,})){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": "(.*)((.*..*){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": "\\b((.*)(.)){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(.*..*)){2,}",
                "prediction": "(.*)(.*(.){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines that contain the string <M0> or a lower-case letter , at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "((<M0>)|([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "\\b((<M0>)|([<LOW>])){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "(([<LOW>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": ".*((<M0>)|([<LOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "(\\b(<M0>)|([<LOW>])\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "(.*(<M0>)|([<LOW>]).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "(.*<M0>.*)|(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "\\b((<M0>){2,})|([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "\\b(([<LOW>]){2,})|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "((.*<M0>.*)|([<LOW>])){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with character at least once before capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "((.*)(..*[<CAP>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "((.*)(.))+([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "((.*)(.))+.*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "((.*)(.)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "((.*)(.))+(([<CAP>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "((.*)(.))+(([<CAP>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "((.*)((.)+)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "(((.*)(.))+).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "((.*)(.))+(.*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((.*)(.))+).*([<CAP>]).*",
                "prediction": "((.*)(.)).*(([<CAP>])+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines ending in zero or more of a vowel or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "((.*)(.*[<VOW>].*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "(.*)((([<VOW>])|([<LET>]))*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "((.*)(([<VOW>])|([<LET>])))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "((.*)([<VOW>]))|(([<LET>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "(.*)((([<LET>])|([<VOW>]))*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "(.*)((([<VOW>])*)|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "(.*)((([<VOW>])|([<LOW>]))*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "(.*)(([<VOW>])|(([<LET>])*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "((.*)([<LET>]))|(([<VOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<VOW>])|([<LET>])))*",
                "prediction": "(.*)((([<VOW>])|([<CAP>]))*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines starting in 2 or more of the string <M0> before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "((<M0>)(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "((<M0>){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "((<M0>.*[<LET>].*){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "((<M0>.*[<LET>].*)(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "((<M0>)(.*)){2,}.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "(((<M0>){2,})|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "(((<M0>.*[<LET>].*){2,})(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "((<M0>)(.*)).*(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "(((<M0>)(.*)){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>.*[<LET>].*)(.*)){2,}",
                "prediction": "(((<M0>){2,})(.*)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter , the string <M0> , or a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": ".*([<CAP>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": "(.*[<CAP>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": ".*([<CAP>])|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": ".*([<CAP>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": "\\b([<CAP>])|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": ".*(<M0>)|([<CAP>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": ".*([<LET>])|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": "(.*[<CAP>].*)|((<M0>)|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": "(.*[<CAP>].*)|((<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<CAP>])|(<M0>)|([<LET>]).*",
                "prediction": "([<CAP>]).*(([<LET>])|(<M0>)|([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital followed by vowel before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": "(.*[<CAP>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": "([<CAP>].*[<VOW>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": ".*[<CAP>].*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*([<VOW>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": "(.*[<CAP>].*[<VOW>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": "(([<CAP>].*[<VOW>].*)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": ".*([<CAP>].*[<VOW>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": "(([<CAP>]).*([<VOW>]).*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<VOW>].*).*([<LOW>]).*",
                "prediction": "(([<CAP>].*[<VOW>].*).*([<LOW>]).*)+"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines starting with either <M0> , <M1> , or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": "((<M0>)|(<M1>)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": ".*(<M0>)|(<M1>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": "((<M1>)|(<M0>)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": "(([<LET>])|(<M0>)|(<M1>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": "(.*<M0>.*)|((<M1>)|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": "((.)|(<M0>)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": "((.*<M0>.*)|(<M1>))|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": "(((<M0>)|(<M1>)|([<NUM>]))(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)",
                "prediction": "(\\b(<M0>)|(<M1>)|([<NUM>])\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with at least 1 lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "([<LOW>])+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": ".*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "(([<LOW>])+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "(.*[<LOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": ".*([<LOW>])+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "\\b([<LOW>])+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "(([<LOW>])|([<LET>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "(([<LOW>])+)|(.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "(([<LOW>])+)|([<LET>])"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with a capital letter at least 1 time": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "((.)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "([<CAP>])(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "(([<CAP>])+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "(([<CAP>])(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "((([<CAP>])+)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "((.*)([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "\\b(([<CAP>])(.*))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "(\\b([<CAP>])(.*)\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "((([<CAP>])(.*))+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])(.*))+",
                "prediction": "(\\b([<CAP>])+\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "the lines that have a vowel coming before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": ".*(.)+([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": "([<VOW>].*..*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": "([<VOW>]).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": ".*([<VOW>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": "(([<VOW>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": "\\b([<VOW>]).*(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": "(([<VOW>])*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": "(.*[<VOW>].*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": "((.*)([<VOW>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>]).*(.)+",
                "prediction": "(([<VOW>])(.*)).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines containing the string <M0> or a number followed by a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)*)|([<NUM>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)+)|([<NUM>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*<M0>.*)|([<NUM>].*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "(<M0>).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "(([<NUM>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "(<M0>)|(([<NUM>]).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": ".*(<M0>)|([<NUM>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": ".*((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*<M0>.*)|(([<NUM>]).*([<VOW>]).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with number or vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": "\\b([<NUM>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": "(\\b[<NUM>]\\b)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": "(\\b([<NUM>])|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": "(\\b([<NUM>])|([<VOW>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": "\\b(([<NUM>])+)|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": "\\b(([<NUM>])|([<VOW>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": ".*\\b([<NUM>])|([<VOW>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": "\\b([<NUM>])|([<VOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": ".*\\b([<NUM>])|([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<NUM>])|([<VOW>])\\b",
                "prediction": ".*\\b([<NUM>])|([<CAP>])|([<VOW>])\\b.*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a character preceding a terminating small letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(.)+(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(.)+(.*..*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(.)+(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(.)+((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(..*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(.)+([<LOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(..*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(..*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(.)+(.*(.*)([<LOW>]).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((.*)([<LOW>])).*",
                "prediction": "(.)+(.*(.*).*[<LOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "a vowel appear 2 or more times before the string <M0> in the lines": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "((.){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "(([<VOW>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "([<VOW>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": ".*(([<VOW>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "((([<VOW>]){2,})|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "((([<VOW>]){2,}).*(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "(.*([<VOW>]){2,}.*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "\\b(([<VOW>]){2,}).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "((([<VOW>]){2,})(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "((([<VOW>]){2,})|(<M0>)).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital before character followed by vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "(.)+([<CAP>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "(.*[<CAP>].*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "([<CAP>].*..*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "([<CAP>]).*(..*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "(..*[<CAP>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "(([<CAP>])+).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "(([<CAP>]).*(.)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "(([<CAP>])(.*)).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "(.*[<CAP>].*).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(..*[<VOW>].*).*",
                "prediction": "(([<CAP>])+).*(..*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines containing a letter or the string <M0> at least 4 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": "(([<LET>])|(<M0>)){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": "((<M0>)|([<LET>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": "((.*[<LET>].*)|(<M0>)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": "((<M0>)|([<CAP>])){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": "\\b(([<LET>])|(<M0>)){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": "(.*([<LET>])|(<M0>).*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": "(\\b([<LET>])|(<M0>)\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": ".*(([<LET>])|(<M0>)){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": "((([<LET>])|(<M0>)){4,}){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)){4,}",
                "prediction": "((([<LET>])|(<M0>)){4,})(.*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case or capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": "(([<LOW>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": "(([<LOW>])|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": "(([<CAP>])|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": "\\b([<LOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": "((.*[<LOW>].*)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": ".*([<LOW>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": ".*(([<LOW>])|([<CAP>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": "(.*[<LOW>].*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": "\\b(([<LOW>])|([<CAP>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<CAP>]))*",
                "prediction": "(.*([<LOW>])|([<CAP>]).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": "(([<LOW>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": "(([<LOW>])|([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": "\\b([<LOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": "(([<CAP>])|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": "(.*[<LOW>].*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": ".*([<LOW>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": ".*(([<LOW>])|([<CAP>]))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": "\\b(([<LOW>])|([<CAP>]))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": "((.*[<LOW>].*)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<LOW>])|([<CAP>])\\b",
                "prediction": "(.*([<LOW>])|([<CAP>]).*)+"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with <M0> or <M1> 2 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "((<M0>)|(<M1>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": ".*(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "((<M0>)|(.)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "((<M1>)|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "(([<LET>])|(<M0>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": ".*(<M0>)|(<M1>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "(.*<M0>.*)|((<M1>){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "((.*<M0>.*)|(<M1>)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": ".*((<M0>)|(<M1>)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|(<M1>)){2,}",
                "prediction": "(.*(<M0>)|(<M1>).*){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number or character before vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": "(([<NUM>])|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": "(.)+(([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": "((.)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": "([<NUM>]).*(([<VOW>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": "(([<NUM>])+)|((.*)([<VOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": "(([<NUM>])|((.)+)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": ".*(([<NUM>])|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": "(([<NUM>])|((.)+([<VOW>]).*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": "(([<NUM>])|((.)+).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.)).*([<VOW>]).*",
                "prediction": "(.*[<NUM>].*)|((.)+([<VOW>]).*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter and number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": ".*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "[<LOW>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "([<LOW>].*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": ".*[<LOW>].*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "([<LOW>].*[<NUM>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "([<LOW>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "(([<LOW>])|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "([<LOW>]).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "([<LOW>]).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "(.*[<LOW>].*).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower case letter followed by the string <M0> or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|(<M1>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|(.*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>].*<M0>.*)|(<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "items with either <M0> , a numeral , or a character in front of a vowel .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<VOW>])|([<NUM>])|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<CAP>])|(<M0>)|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>])|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<NUM>])|(<M0>)|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(.)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<LOW>])|(<M0>)|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "((<M0>)|([<VOW>])|(.)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(.)).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines that have at least 2 occurrences of a lower-case letter following a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": "[<CAP>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": "([<CAP>].*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": "([<CAP>]).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": "(..*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": ".*([<LOW>].*[<CAP>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<LOW>]){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<CAP>]){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": "\\b([<CAP>].*[<LOW>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(([<LOW>]){2,}).*",
                "prediction": "\\b([<LOW>].*[<CAP>].*){2,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that contain a letter , 2 times or more before a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": "(.*([<LET>]){2,}.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": "((.){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": "([<LET>].*[<VOW>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": "(([<LET>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": "([<LET>]).*(([<VOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": ".*(([<LET>]){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": "((.*[<LET>].*){2,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": "(.*([<LET>]){2,}.*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>]){2,}).*([<VOW>]).*",
                "prediction": "((([<LET>]){2,})|([<VOW>])).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter , a lower-case letter , or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": ".*[<LET>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": ".*([<LET>])|([<LOW>])|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": ".*(.)|([<LOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": "\\b([<LET>])|([<LOW>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": ".*([<LET>])|([<LOW>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": ".*([<LOW>])|([<LET>])|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": "\\b([<LOW>])|([<LET>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": "(.*[<LET>].*)|(([<LOW>])|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": "(([<LET>])|([<LOW>])|([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<LOW>])|([<NUM>]).*",
                "prediction": "(.*[<LET>].*)|(([<LOW>])|([<NUM>])|([<NUM>]))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing words with a capital letter before the string <M0> followed by a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "(.*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "\\b[<CAP>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "\\b[<CAP>].*<M0>.*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "\\b([<CAP>]).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "\\b([<CAP>].*<M0>.*).*(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "(\\b[<CAP>].*<M0>.*\\b).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "(.*[<CAP>].*<M0>.*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "\\b([<CAP>].*<M0>.*).*(.)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "\\b([<CAP>]).*(<M0>.*..*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<CAP>].*<M0>.*).*(.)+\\b",
                "prediction": "(\\b([<CAP>]).*(<M0>).*\\b).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines containing a capital letter , a lower-case letter , and a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": "[<CAP>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": ".*[<CAP>].*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": ".*([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": "([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": "([<CAP>]).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": "\\b([<CAP>]).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": "([<CAP>]).*([<LOW>].*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": "([<CAP>]).*(([<LOW>])|([<VOW>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*([<LOW>].*[<VOW>].*).*",
                "prediction": "([<CAP>].*[<LOW>].*).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines beginning with a lower-case letter or a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "(([<LOW>])|([<VOW>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "(([<LOW>])|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "((([<LOW>])+)|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "((([<LOW>])|([<VOW>]))+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "(([<LOW>])(.*))|([<VOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "(([<LOW>])(.*))|(([<VOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "(([<LOW>])(.*))|(.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "(([<LOW>])+)|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "(([<LOW>])(.*))|(([<VOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>]))(.*)",
                "prediction": "((.*[<LOW>].*)|([<VOW>]))(.*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with only zero or more letters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": "([<LET>])*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": "([<CAP>])*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": "(([<LET>])*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": "(.*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": ".*([<LET>])*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": "\\b([<LET>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": ".*([<CAP>])*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": "(([<LET>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": "(([<LET>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|([<LET>]))*",
                "prediction": "(([<LET>])*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines having 1 of the following: the string <M0> the string <M1> or a letter before the string <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>))|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|(<M1>)|([<LET>])).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M1>)|(<M0>)|([<LET>])).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|([<LET>])|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|([<LET>])|([<LOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "(([<LOW>])|(<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M1>)|(<M1>)|([<LET>])).*(<M2>).*",
                "prediction": "(((<M0>)|(<M1>)|([<LET>]))).*(<M2>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines with a vowel followed by character or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "([<VOW>].*..*)|([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "([<VOW>].*..*)|(([<LET>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "([<VOW>]).*((.)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "([<VOW>].*..*)|(([<LET>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "([<VOW>].*..*)|(.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "([<VOW>].*..*)|(([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "([<VOW>].*..*)|(([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "(([<VOW>])|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "(([<VOW>]).*(.)|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((.)|([<LET>])).*",
                "prediction": "([<VOW>].*..*)|(([<LET>])(.*))"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with zero or more characters before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": "(.)*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": "(.*..*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": "((..*<M0>.*)*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": "((.)*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": "(.*(.)*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": "((.)*).*((<M0>)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": ".*((.)*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": "((.)*).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": "\\b((.)*).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.)*).*(<M0>).*",
                "prediction": "(((.)*).*(<M0>).*)*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines with a letter before words with string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": ".*[<LET>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": ".*([<LET>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "(.*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": ".*[<LET>].*\\b(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b(<M0>)+\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b(<M0>)*\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b.*<M0>.*\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "([<LET>]).*(\\b(<M0>)(.*)\\b).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(\\b.*<M0>.*\\b).*",
                "prediction": "(([<LET>])+).*(\\b(<M0>)+\\b).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing the string <M0> or the string <M1> before a character at least 3 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M1>)|(<M0>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>)).*(.){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)*)|((<M1>).*(.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>)){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "(((<M0>)|(<M1>)){3,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>)).*((.){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>)).*((<M2>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>)).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M1>)|(<M0>)).*((.){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a number followed by a letter 3 times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": "([<NUM>].*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": "(.*[<NUM>].*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": "(([<NUM>]){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": "(.*[<NUM>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": "([<NUM>]).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": "\\b([<NUM>].*[<LET>].*){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": ".*([<NUM>].*[<LET>].*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": "(([<LET>]){3,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": "([<NUM>].*[<LET>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<LET>].*){3,}",
                "prediction": "([<NUM>]).*([<LET>].*[<LET>].*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines having either a character , string <M0> , or number before letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)|([<NUM>])|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "(.)|((<M0>)|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)|(.)|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((.)|(<M0>)|([<NUM>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)|(<M0>)|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "(((.)|(<M0>)|([<NUM>]))|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "((<M0>)|([<NUM>])|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "(([<LET>])|(<M0>)|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|([<NUM>])).*([<LET>]).*",
                "prediction": "(((.)|(<M0>)|([<NUM>]))+).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with a capital letter or a character occuring before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": "(.)+(([<CAP>])|(.)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": "(([<CAP>].*..*)|([<NUM>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": "(([<CAP>])|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": "((.)|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": "((([<CAP>])|(.))+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": ".*(([<CAP>])|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": "(([<CAP>])|(.)).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": "(([<CAP>])|(.)|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": "((.)|([<CAP>])|(.)).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(.)).*([<NUM>]).*",
                "prediction": "(([<CAP>])|(.)|([<NUM>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "items with <M0> preceding <M1> at least thrice .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": "(<M0>.*<M1>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": "(<M1>.*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": "(<M0>).*((<M1>){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": "((<M0>).*(<M1>).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": "(<M1>).*((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": "(.*<M0>.*<M1>.*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": "((<M0>.*<M1>.*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": ".*(<M0>.*<M1>.*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": "(.*<M0>.*).*((<M1>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*<M1>.*){3,}",
                "prediction": "((<M0>.*<M1>.*)|([<CAP>])){3,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines that have 4 or more numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": "([<NUM>]){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": "(\\b[<NUM>]\\b){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": ".*([<NUM>]){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": "\\b([<NUM>]){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": "(.*[<NUM>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": "(([<NUM>]){4,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": "(([<NUM>])|([<LET>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": ".*\\b([<NUM>]){4,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": "(\\b([<NUM>]){4,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>]){4,}.*",
                "prediction": "(\\b.*[<NUM>].*\\b){4,}"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words with a lower-case letter before letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": "\\b[<LOW>].*[<LET>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": "\\b.*[<LOW>].*[<LET>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": "\\b([<LOW>].*[<LET>].*)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": "(\\b[<LOW>].*[<LET>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": "(\\b[<LOW>].*[<LET>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": "\\b([<LOW>]).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": ".*\\b[<LOW>].*[<LET>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": "\\b([<LOW>]).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": "\\b.*([<LOW>]).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*[<LOW>].*[<LET>].*\\b",
                "prediction": ".*\\b([<LOW>]).*([<LET>]).*\\b.*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "items with a character preceding a small letter , <M0> , or a numeral .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+([<LOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+([<NUM>])|(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+((<M0>)|([<LOW>])|([<NUM>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+(.*[<LOW>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+(.*([<LOW>])|(<M0>)|([<LET>]).*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+(.*([<LOW>])|(<M0>)|([<NUM>]).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<LOW>])|(<M0>)|([<NUM>])).*",
                "prediction": "(.)+(.*([<LOW>])|(<M0>)|([<VOW>]).*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words starting with 4 or more lower-case letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "\\b([<LOW>]){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "\\b([<LOW>])(.*){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "\\b([<LOW>])(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "\\b(([<LOW>]){4,})(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "\\b(([<LOW>])(.*)){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "(\\b([<LOW>])(.*)\\b){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "(\\b([<LOW>]){4,}\\b)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "\\b((.*)([<LOW>])){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "\\b([<LOW>].*[<LET>].*){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(([<LOW>]){4,})(.*)\\b",
                "prediction": "\\b(([<LOW>]){4,})([<LET>])\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter then a vowel then a capital": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": "(.*[<LET>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": ".*[<LET>].*[<VOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": "([<LET>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": "(..*[<LET>].*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": "([<VOW>].*[<LET>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": "([<LOW>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": "([<LET>]).*([<VOW>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": "([<CAP>].*[<VOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": "(.*[<LET>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*([<VOW>].*[<CAP>].*).*",
                "prediction": "(([<LET>].*[<VOW>].*)+).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "items with words containing a vowel , at least thrice .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "\\b([<VOW>]){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "(\\b[<VOW>]\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "\\b([<VOW>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "\\b([<VOW>])(.*)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "\\b([<VOW>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "\\b([<VOW>])|([<CAP>]){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "\\b(.*[<VOW>].*){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "(\\b([<VOW>])|([<CAP>])\\b){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>]){3,}\\b",
                "prediction": "(\\b([<VOW>])|([<VOW>])\\b){3,}"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with either a number , a vowel , or a letter followed by the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(.*[<NUM>].*)|(([<VOW>])|([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "\\b([<NUM>])|([<VOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<NUM>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "([<NUM>]).*(([<NUM>])|([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M0>)|([<NUM>])|([<VOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "\\b(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(\\b([<NUM>])|([<VOW>])|([<LET>])\\b).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with 2 or more of a vowel before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "([<VOW>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "(.*[<VOW>].*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "(([<VOW>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "([<VOW>]).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "(([<VOW>]).*(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": ".*([<VOW>].*<M0>.*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": ".*(([<VOW>]){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "(.*([<VOW>]).*(<M0>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "\\b(([<VOW>]){2,}).*(<M0>).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>){2,}).*",
                "prediction": "(([<VOW>].*<M0>.*){2,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with a lower-case letter or string <M0> , 4 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "(([<LOW>])|(<M0>)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "((([<LOW>])+)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "((([<LOW>])+)|(<M0>)){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "((([<LOW>])(.*))|(<M0>)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "((([<LOW>])|(<M0>)){4,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "((([<LOW>])|(<M0>))(.*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "(([<LOW>])(.*))|((<M0>){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "(([<LOW>])|((<M0>){4,}))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "(([<LOW>])|((<M0>)(.*))){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))|(<M0>)){4,}",
                "prediction": "((([<LOW>]).*(<M0>).*)|([<NUM>])){4,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> before 1 or more of the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "(.*<M0>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "(<M0>).*((.*)(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "(<M0>.*<M1>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "((<M0>)+).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "(<M0>).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "((<M0>)+).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "((<M0>)+).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "(<M0>).*((.*<M1>.*)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "(<M0>).*(\\b(<M1>)+\\b).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)+).*",
                "prediction": "((<M0>)+).*((.*)(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1
        ]
    },
    "items with <M0> or numeral .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": "(([<NUM>])|(<M0>))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": "((<M0>)|([<NUM>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": "\\b(<M0>)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": ".*(<M0>)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": ".*([<NUM>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": "(.*<M0>.*)|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": "(.*<M0>.*)|([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": ".*(<M0>)|([<NUM>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": ".*(<M0>)|([<NUM>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<NUM>]))*",
                "prediction": ".*(<M0>)|([<NUM>])|([<LOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character followed by a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": ".*..*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": "..*[<NUM>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": "(..*[<NUM>].*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": "(.)+([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": "(..*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": "\\b..*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": "(..*[<NUM>].*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": "(.)+(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": "(..*[<NUM>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b..*[<NUM>].*\\b",
                "prediction": "(..*[<NUM>].*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines with a letter after a capital letter .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": "(([<CAP>])+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": "(([<CAP>])*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": "([<CAP>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": ".*([<CAP>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": "([<CAP>]).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": "\\b([<CAP>]).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": "(.*[<CAP>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": "(([<CAP>])(.*)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": "([<CAP>]).*(([<LET>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "[<CAP>].*[<LET>].*",
                "prediction": "([<CAP>].*[<LET>].*).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines with a character followed by a letter , zero or more times in it": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": "(..*[<LET>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": "(.*..*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": "(.)+(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": "((..*[<LET>].*)*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": "((.)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": ".*(..*[<LET>].*)*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": "\\b(..*[<LET>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": "(.*..*).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": "(\\b..*[<LET>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<LET>].*)*",
                "prediction": "(.)+(.*[<LET>].*).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines containing a vowel or string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": "(([<VOW>])|(<M0>))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": ".*([<VOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": "\\b([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": ".*(<M0>)|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": ".*(([<VOW>])|(<M0>))+.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": "(.*[<VOW>].*)|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": ".*(.*[<VOW>].*)|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": "\\b(([<VOW>])|(<M0>))+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": "\\b(.*[<VOW>].*)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|(<M0>).*",
                "prediction": "(.*([<VOW>])|(<M0>).*)+"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing 4 or more vowels before a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "(([<VOW>]){4,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "([<VOW>].*[<LET>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "(.*[<VOW>].*){4,}.*[<LET>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "((.*[<LET>].*){4,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "(([<LET>]){4,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "([<VOW>]).*(([<LET>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "((.*[<VOW>].*){4,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "(.*[<VOW>].*).*(([<LET>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "(.*[<LET>].*).*(([<LET>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>]){4,}).*([<LET>]).*",
                "prediction": "(([<VOW>].*[<LET>].*){4,}).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> or which are ending with a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": "((<M0>)|(.*[<CAP>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": "((<M0>)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": "((<M0>)|([<CAP>])).*(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": "((<M0>)+)|((.*)([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": "(<M0>).*((.*)([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": "((<M0>)|((.*)([<CAP>])))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": "(.*<M0>.*)|((.*)([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": "(<M0>).*(((.*)([<CAP>]))*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": ".*(<M0>)|((.*)([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*)|((.*)([<CAP>]))",
                "prediction": "((<M0>)|(.*)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a zero or more of a vowel before string <M0> , character , or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "([<VOW>].*<M0>.*)|((.)|([<LOW>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|((.)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "([<VOW>]).*(((<M0>)|(.)|([<LOW>])))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "(<M0>).*(([<VOW>])|(.)|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "([<VOW>].*<M0>.*)|((.)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|(([<LOW>])|(.))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|((.)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "(.*[<VOW>].*).*((<M0>)|(.)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "([<VOW>]).*(((<M0>)|(.)|([<LOW>]))*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines which words contain either of these - letter , number , or vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b(<M0>)|([<LOW>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b(<M0>)|([<NUM>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b([<LOW>])|([<NUM>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b([<VOW>])|([<NUM>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b([<NUM>])|([<LOW>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": ".*([<LOW>])|([<NUM>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "(\\b([<LET>])|([<NUM>])|([<VOW>])\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "(\\b([<LET>])|([<NUM>])|([<VOW>])\\b)*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter string <M0> , a lower-case letter , or a capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": ".*([<LET>])|(<M0>)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": ".*(<M0>)|([<LOW>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": "(.*[<LET>].*)|((<M0>)|([<LOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": ".*([<LET>])|([<LOW>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": "((<M0>)|([<LOW>])|([<CAP>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": "(.*[<LET>].*)|((<M0>)|([<LOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": "(([<LET>])|(<M0>)|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": "(.*[<LET>].*)|((<M0>)|([<LOW>])|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|([<CAP>])).*",
                "prediction": "(([<LET>])|([<LOW>])|(<M0>)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "zero lines with a lower-case letter before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "([<LOW>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "([<LOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "([<LOW>]).*((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": ".*([<LOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "(([<LOW>])*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "([<LOW>]).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "([<LOW>]).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "([<LOW>]).*((.*)(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "(([<LOW>])*).*(.*<M0>.*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with an upper case letter or vowel preceding a numeral .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<CAP>])|([<NUM>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<VOW>])|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<CAP>])|([<VOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<CAP>])|([<NUM>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<NUM>])|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<CAP>])|([<CAP>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<CAP>])|([<LOW>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "([<CAP>]).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<CAP>])|([<VOW>])|([<NUM>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter followed by a lower-case letter , 3 or more times in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": "(..*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": "(.*[<CAP>].*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": "([<CAP>].*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": ".*([<CAP>].*[<LOW>].*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": "([<CAP>]).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": "(([<CAP>]){3,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": "\\b([<CAP>].*[<LOW>].*){3,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": "(([<CAP>]).*([<LOW>]).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": "(.*[<CAP>].*).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LOW>].*){3,}",
                "prediction": "(([<CAP>].*[<LOW>].*){3,}).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines starting with the string <M0> following a vowel": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "([<VOW>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "(([<VOW>].*<M0>.*)(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "((<M0>.*[<VOW>].*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "(([<VOW>].*<M0>.*)+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "((.*)([<VOW>].*<M0>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "((<M0>)(.*)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "(([<VOW>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "((.*)([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "(((.*)([<VOW>]))+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*)(.*)",
                "prediction": "(((<M0>)(.*))+).*([<VOW>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with vowel followed by string <M0> , 3 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": "([<VOW>].*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": "(<M0>.*[<VOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": "(.*[<VOW>].*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": "([<VOW>]).*((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": "(<M0>).*(([<VOW>]){3,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": "(([<VOW>]).*(<M0>).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": ".*([<VOW>].*<M0>.*){3,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": "(([<VOW>].*<M0>.*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": "(([<VOW>].*<M0>.*)|(<M0>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*){3,}",
                "prediction": "(([<VOW>]).*(<M0>).*)|((<M1>){3,})"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines which ends with a small letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": "((.*)([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": "(.*)([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": "(.*)(([<LOW>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": "(.*)(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": ".*(.*)([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": "(.*)(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": "\\b(.*)([<LOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": "((.*)([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": "(.*)([<LOW>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)([<LOW>]).*",
                "prediction": "(.*)([<LOW>].*[<LET>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> or a number followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(<M0>).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(<M0>)|([<NUM>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "((<M0>)|([<NUM>].*[<LOW>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(<M0>).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "((<M0>)|([<NUM>])).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "((<M0>.*[<LOW>].*)|([<NUM>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "((<M0>)+)|([<NUM>].*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(<M0>).*(([<NUM>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(<M0>)|(([<NUM>].*[<LOW>].*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(([<NUM>])|(<M0>)).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing the string <M0> followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": "<M0>.*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": ".*<M0>.*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": "(<M0>.*[<LOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": "(<M0>.*[<LOW>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": "(<M0>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": "\\b<M0>.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": "(<M0>).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": "(<M0>.*[<LOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": "(<M0>.*[<LOW>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*([<LOW>]).*",
                "prediction": "(<M0>).*([<LOW>].*[<LET>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines that contain a vowel followed by a capital letter at least 3 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "(<M0>.*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "([<VOW>].*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "([<CAP>].*[<VOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "(.*[<VOW>].*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "([<VOW>]).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "(([<CAP>]){3,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "(([<VOW>]){3,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "(.*([<VOW>]).*([<CAP>]).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "((.*[<CAP>].*){3,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "(.*([<VOW>].*[<CAP>].*){3,}.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the ending string <M0> at least 4 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": "(.*)((<M0>){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": "((.*)(<M0>)){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": ".*((.*)(<M0>)){4,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": "((.*)(.*<M0>.*)){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": "(.*)((.*<M0>.*){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": "(.*)(\\b(<M0>){4,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": "\\b((.*)(<M0>)){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": "(.*)(((<M0>){4,})){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": "(.*)(((<M0>){4,})|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(<M0>).*){4,}",
                "prediction": "((.*)((<M0>){4,})){4,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> following a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": "([<NUM>].*<M0>.*)+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": ".*[<NUM>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": "([<NUM>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": "([<NUM>]).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": ".*([<NUM>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": "([<NUM>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": "(([<NUM>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": "(.*[<NUM>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": "((.*)([<NUM>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*[<NUM>].*<M0>.*",
                "prediction": "(.*<M0>.*).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines ending with a character 1 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": "((.*)(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": "((.*)((.)+))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": "(.*)(\\b(.)+\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": "(((.*)(.))+)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": "(.*)((.)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": "(.*)(.*(.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": "((.*)(.*..*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": ".*((.*)(.))+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": "\\b((.*)(.))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.*)((.)+).*",
                "prediction": "(.*)(((.)+)|([<LET>]))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines containing <M0> before a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": "(<M0>).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": ".*(<M0>).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": ".*<M0>.*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": "((<M0>)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": "(<M0>).*(([<LET>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": "((.*)(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": "(.*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": "(<M0>).*(.*[<LET>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>).*([<LET>]).*",
                "prediction": "(.*<M0>.*).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    ": lines ending with words with vowel or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": "(.*)(\\b([<VOW>])*\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": "((.*)([<VOW>]))|([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": "(.*)(\\b([<VOW>])(.*)\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": "(.*)(([<VOW>])|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": "((.*)([<VOW>]))|(([<LET>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": ".*(.*)([<VOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": "(.*)(\\b([<VOW>])|([<CAP>])\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": ".*(.*)(([<VOW>])|([<LET>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": "(.*)(\\b([<VOW>])|([<LET>])\\b)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(\\b([<VOW>])|([<LET>])\\b)",
                "prediction": "\\b(.*)(([<VOW>])|([<LET>]))\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "items with <M0> at least twice .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": "\\b(<M0>){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": "((<M0>)(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": "((<M0>)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": ".*(<M0>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": "((<M0>)|([<NUM>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": "(<M0>).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": "(<M0>).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": "((<M0>){2,})|((.*)([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>){2,}",
                "prediction": "((<M0>){2,})|(.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 3 or more of a lower-case letter before string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": ".*([<LOW>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": "([<LOW>].*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": "(([<LOW>]){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": "([<LOW>]).*((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": ".*([<LOW>].*<M0>.*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": ".*(([<LOW>]){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": "(([<LOW>].*<M0>.*){3,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": "\\b([<LOW>].*<M0>.*){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>){3,}).*",
                "prediction": "(.*[<LOW>].*).*(<M0>){3,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that contain any character that are then followed by the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": ".*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": ".*<M0>.*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": ".*..*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": "(.*..*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": ".*<M0>.*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": "(..*<M0>.*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": "\\b..*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": "(.)+(.*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": ".*\\b..*<M0>.*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(<M0>).*",
                "prediction": "(.*..*).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "lines with words with a character followed by a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": "\\b..*[<LET>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": "\\b(.)+([<LET>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": "\\b(..*[<LET>].*)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": "(\\b..*[<LET>].*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": "\\b.*..*[<LET>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": "\\b(..*[<LET>].*)*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": "\\b(..*[<LET>].*).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": "(\\b..*[<LET>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": ".*\\b..*[<LET>].*\\b.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b..*[<LET>].*\\b)+",
                "prediction": "(\\b..*[<LET>].*\\b)(.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines ending in lower-case letter before character or number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "(.*)(([<LOW>]).*((.)+)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "((.*)([<LOW>])).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "(.*)(([<LOW>].*..*)|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "((.*)(([<LOW>]).*(.))|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "((.*)([<LOW>])).*(.)|([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "(.*)(([<LOW>]).*(.)|([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "(.*)((([<LOW>]).*(.)+))|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "((.*)(([<LOW>]).*(.))+)|([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((([<LOW>]).*(.)+)|([<NUM>]))",
                "prediction": "((.*)([<LOW>])).*((.)|([<NUM>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines that contain a letter followed by a lower-case letter , at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "([<LET>].*[<LOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "([<LET>].*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "(<M0>.*[<LOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "(.*[<LET>].*[<LOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "(.*[<LET>].*[<LOW>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "(([<LET>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "([<LET>]).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "(([<LET>])*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "(.*[<LET>].*).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<LOW>])+).*",
                "prediction": "(.*[<LET>].*).*(([<LOW>])*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines containing words having a character at least once or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": "\\b((.)+)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": "(\\b(.)|(<M0>)\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": "\\b((.)|(<M0>))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": "(\\b(.)+\\b)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": "\\b(.)+((<M0>)+).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": "\\b(.)+((<M0>)+)|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": "\\b(.)+((<M0>)+)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": "(\\b(.)+\\b)|(<M0>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": ".*\\b((.)+)|(<M0>)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b((.)+)|(<M0>)\\b",
                "prediction": "\\b(.)+((<M0>)+)|([<CAP>])\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    "lines that have the word <M0> before either a lower-case letter , he word <M1> , or the word <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "(<M0>.*[<LOW>].*)|((<M2>)|(<M2>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "(<M0>.*[<LOW>].*)|((<M1>)|(<M2>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "(<M0>).*(([<LOW>])|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "((<M0>)|(<M1>)|(<M2>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<LOW>])|(<M2>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "(<M0>).*(([<LOW>])|(<M2>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "(<M0>).*(([<LOW>])|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "(<M0>).*(([<NUM>])|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M2>)|(<M1>)|([<LOW>])).*",
                "prediction": "((<M0>).*([<LOW>]).*)|((<M1>)|(<M2>))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "items with a character preceding a numeral .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": ".*..*[<NUM>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(.)+([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(..*[<NUM>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(.)+(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": ".*(.)+([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(..*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(.)+(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(.)+(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(..*[<NUM>].*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(.)+((.*)([<NUM>])).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a lower-case letter before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": "([<LOW>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": ".*[<LOW>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": "(([<LOW>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": "([<LOW>].*..*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": "(.*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": "([<LOW>]).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": "([<LOW>]).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": "([<LOW>]).*(..*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(.)+",
                "prediction": "([<LOW>].*..*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": ".*[<LOW>].*..*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": "([<LOW>]).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": "([<LOW>].*..*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": "(([<LOW>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": "(.*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": "([<LOW>]).*((.)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": "([<LOW>]).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": "([<LOW>]).*(..*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(.*..*).*",
                "prediction": "([<LOW>].*..*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": "([<LOW>]).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": ".*[<LOW>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": "([<LOW>].*..*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": "(.*[<LOW>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": "(([<LOW>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": "([<LOW>]).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": "([<LOW>]).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": "([<LOW>].*..*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LOW>]).*((.)+).*",
                "prediction": "([<LOW>]).*(..*..*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines that contain the string <M0> before <M1> 3 times or more": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "(.*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "(<M0>.*<M1>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "((<M0>)*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "(<M0>).*((<M1>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "((<M0>){3,}).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "((<M0>).*(<M1>).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "(<M1>).*((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": ".*(<M0>.*<M1>.*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": ".*(<M0>).*((<M1>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "(.*<M0>.*).*((<M1>){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines where a letter occurs either before the words <M0> or <M1> , or a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*((<M0>)|(<M1>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*((<M0>)|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "([<NUM>]).*((<M0>)|(<M1>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "([<CAP>]).*((<M0>)|(<M1>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*((<M1>)|(<M0>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<LET>]).*(<M0>).*)|((<M1>)|([<CAP>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<LET>])+).*((<M0>)|(<M1>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<CAP>])+).*((<M0>)|(<M1>)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])|(<M0>)|(<M1>)).*",
                "prediction": "(.*[<LET>].*).*((<M0>)|(<M1>)|([<CAP>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines with the string <M0> at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "(<M0>){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": ".*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "((<M0>){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": ".*(<M0>){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "\\b(<M0>){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": ".*\\b(<M0>){2,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "((<M0>){2,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "((<M0>){2,})|(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "(<M0>).*(([<CAP>]){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "line that have the string <M0> , at least 4 times before the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": "\\b(<M0>){4,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": "(<M1>.*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": "((<M1>){4,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": "((<M0>){4,}).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": ".*(<M1>){4,}.*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": "(.*<M1>.*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": "(<M1>).*((<M0>){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": ".*((<M0>){4,}).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": "(.*<M1>.*).*((<M0>){4,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){4,}).*(<M1>).*",
                "prediction": "\\b((<M0>){4,}).*(<M1>).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with the string <M0> after a vowel or a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<VOW>])|(.)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<VOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "([<VOW>]).*((<M0>)|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<VOW>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "([<VOW>]).*(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(.*[<VOW>].*)|(([<LET>]).*(<M0>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "((<M0>)|([<VOW>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "(([<LET>])|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])|([<LET>])).*(<M0>).*",
                "prediction": "([<LET>]).*(([<VOW>])|(<M0>)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with capital letters before lower-case letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>].*[<LOW>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": ".*([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "(([<CAP>])*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "(([<CAP>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "(([<CAP>])(.*)).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with a vowel , or <M0> , or a upper case letter preceding <M1> .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|(<M0>)|([<CAP>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|(<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|([<VOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|(<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|(<M0>)|([<CAP>])|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|([<VOW>])|(<M0>)|([<CAP>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|([<VOW>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|([<VOW>])|(<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(([<VOW>])|(<M0>)|([<CAP>])|([<LOW>])).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with a vowel , number , or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": "([<VOW>])|([<NUM>])|([<LET>])"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": ".*([<VOW>])|([<NUM>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": ".*([<NUM>])|([<VOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": "\\b([<VOW>])|([<NUM>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": "\\b([<NUM>])|([<VOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": "(.*[<VOW>].*)|(([<NUM>])|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": "(.*[<VOW>].*)|(([<NUM>])|([<LET>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": "(.*[<VOW>].*)|(([<NUM>])|([<LET>])|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<VOW>])|([<NUM>])|([<LET>]).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<LET>])).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter after a number at least 5 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": "(.*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": "([<NUM>].*[<CAP>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": ".*([<NUM>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": "([<CAP>].*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": "([<NUM>]).*(([<CAP>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": "(([<NUM>]){5,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": "(([<CAP>]){5,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": "([<CAP>]).*(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": "(.*[<NUM>].*).*(([<CAP>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>].*[<CAP>].*){5,}",
                "prediction": "(.*[<CAP>].*).*(([<NUM>]){5,}).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines wherein the <U> character is a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": ".*..*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": ".*(.)+([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": ".*[<VOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "(.)+([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "(..*[<VOW>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": ".*[<VOW>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "(.*..*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "(..*[<VOW>].*)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "(.)+(([<VOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "(.)+(.*[<VOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter or a lower-case letter before the string <M0> in them": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LET>])|([<LOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>)|([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": "([<LET>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": "(.*[<LET>].*)|([<LOW>].*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": ".*([<LET>])|([<LOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LET>])|(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": ".*(([<LET>])|([<LOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": "(([<LET>])|(([<LOW>]).*(<M0>).*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<LOW>])).*(<M0>).*",
                "prediction": "(.*[<LET>].*)|(([<LOW>]).*(<M0>).*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter before containing a number , 4 or more times in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": "([<CAP>].*[<NUM>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": "([<CAP>]).*((.){4,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": "([<CAP>]).*(([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": "([<CAP>]).*(.*([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": "([<CAP>]).*([<NUM>].*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": "([<CAP>]).*(.*[<NUM>].*){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": ".*([<CAP>]).*(([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": "([<CAP>]).*((.*[<NUM>].*){4,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": "([<CAP>]).*(.*([<NUM>]){4,}.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>]).*(.*([<NUM>]){4,}.*).*",
                "prediction": "(.*[<CAP>].*).*(([<NUM>]){4,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with words and only zero or more numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": "(\\b[<NUM>]\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": "\\b[<NUM>]\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": "\\b([<NUM>])*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": "\\b.*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": "(\\b\\b[<NUM>]\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": ".*\\b[<NUM>]\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": "(\\b([<NUM>])*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": ".*\\b([<NUM>])*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b[<NUM>]\\b)*",
                "prediction": "(\\b.*[<NUM>].*\\b)*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "items with a small letter at least 5 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "([<LOW>]){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(.*[<LOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "\\b([<LOW>]){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": ".*([<LOW>]){5,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(([<LOW>]){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(([<LOW>])|([<CAP>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(([<LOW>])|([<LET>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(([<LOW>]){5,})|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(([<LOW>]){5,})|(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(([<LOW>]){5,}).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines where at least once there is a character or uppercase letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": "((.)|([<CAP>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": "((.)|([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": "((.)|([<LET>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": "(([<CAP>])|(.))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": "(([<LET>])|(.))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": "(.)+((.)|([<CAP>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": "\\b((.)|([<CAP>]))+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": "(.*..*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": ".*((.)|([<CAP>]))+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<CAP>]))+",
                "prediction": "(.)+(([<CAP>])|([<LET>])).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0
        ]
    },
    "lines containing either number , letter , or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": ".*(.)|([<NUM>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<NUM>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<NUM>])|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<NUM>])|([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": ".*(<M0>)|([<NUM>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<NUM>])|([<CAP>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<NUM>])|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": "\\b([<NUM>])|([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": "\\b.*([<NUM>])|(<M0>)|([<LET>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<NUM>])|([<LET>])|(<M0>).*",
                "prediction": ".*\\b([<NUM>])|([<LET>])|(<M0>)\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with only 2 or more characters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(.){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "\\b(.){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(.*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": ".*(.){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(..*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "((.){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(\\b(.){2,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(..*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "(\\b.*..*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*){2,}",
                "prediction": "((.){2,}).*(.)+"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines that end with a letter , at least 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": "(.*)([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": ".*(.*)([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": "((.*)([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": "(.*)(([<LET>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": ".*(.*)([<LET>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": ".*(.*)(([<LET>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": "(.*)(.*([<LET>]){2,}.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": "(.*)((.*[<LET>].*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": "\\b(.*)(([<LET>]){2,})\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*(.*)([<LET>]).*){2,}",
                "prediction": ".*((.*)([<LET>])){2,}.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    "lines with words with either the string <M0> , a letter , or a character in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": "\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": "\\b([<LOW>])|(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": "\\b(<M0>)|([<LET>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": "\\b(.)|(<M0>)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": "\\b(<M0>)|([<LOW>])|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": "\\b(.)|([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": "\\b(<M0>)|(.)|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": "\\b([<LET>])|(<M0>)|(.)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": ".*\\b(<M0>)|([<LET>])|(.)\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>)|([<LET>])|(.)\\b",
                "prediction": "\\b.*(<M0>)|([<LET>])|(.)+\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0
        ]
    },
    "lines with 4 or more of a character or number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": "((.)|([<NUM>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": "(..*[<NUM>].*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": "(.)|(([<NUM>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": "(.)|(([<NUM>]){4,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": ".*((.)|([<NUM>])){4,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": "(.*..*)|(([<NUM>]){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": "((..*..*)|([<NUM>])){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": "(..*..*)|(([<NUM>]){4,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": "(((.)|([<NUM>])){4,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])){4,}",
                "prediction": "((..*[<NUM>].*)|([<NUM>])){4,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines ending with a character before the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "((.*)(..*<M0>.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "(.*)(..*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "((.*)(..*<M0>.*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "(.*)((..*<M0>.*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "((.*)(.)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "((.*)(.)).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "((.*)(.)).*((<M0>)*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "(((.*)(.)).*(<M0>).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "((.*)(.*..*)).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(..*<M0>.*)",
                "prediction": "((.*)(.)).*(.*<M0>.*).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    "lines containing a letter , the string <M0> , and 0 or more characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(([<LET>])|(<M0>)|(.))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(.*[<LET>].*)|((<M0>)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": ".*([<LET>])|(<M0>)|(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(([<LET>])|(<M0>)|(.)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": ".*([<LET>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(.*[<LET>].*)|((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(([<LET>])|(<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(.*[<LET>].*)|((<M0>).*(<M1>).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter occuring zero or more times before a number": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": "(([<LET>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": "(([<LOW>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": "([<LET>]).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": "(([<LET>])*).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": ".*(([<LET>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": "((([<LET>])*)*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": "(([<LET>])*).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": "((.*[<LET>].*)*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": "\\b(([<LET>])*).*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*([<NUM>]).*",
                "prediction": "((([<LET>])*)|([<NUM>])).*([<NUM>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with lower-case letter followed by string <M0> or string <M1> before string <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "([<LOW>].*<M0>.*)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "(([<LOW>]).*(<M0>).*)|((<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "(([<LOW>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>).*<M2>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "(([<LOW>].*<M0>.*)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>].*<M0>.*)|((<M1>).*(<M2>).*)",
                "prediction": "(([<LOW>]).*(<M0>).*)|((<M1>).*<M2>)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines starting with a lower-case letter with the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "([<LOW>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "(([<LOW>].*<M0>.*)(.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "(([<LOW>].*<M0>.*)+)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "(([<LOW>])(.*)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "(([<LOW>].*<M0>.*)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "(([<LOW>])(.*)).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "(([<LOW>].*<M0>.*)|([<CAP>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "(([<LOW>].*<M0>.*)|([<VOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "(([<LOW>].*<M0>.*)|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])(.*)).*(<M0>).*",
                "prediction": "(\\b([<LOW>])(.*)\\b).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with string <M0> before string <M1> , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "(<M0>.*<M1>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "((<M0>)*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "((<M0>)+).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "(<M0>).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "((<M0>).*(<M1>).*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "((<M0>)*).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "((<M0>)+).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "(.*<M0>.*).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "((<M0>)(.*)).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>){2,}).*",
                "prediction": "((<M0>).*(<M1>).*)|((<M2>){2,})"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0
        ]
    },
    "lines with a lower-case letter followed by either a letter , the string <M0> , or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": "(.*[<LOW>].*)|((<M0>)|(<M1>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": ".*([<LOW>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LOW>].*[<LET>].*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": "([<LET>]).*(([<LET>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*(([<LET>])|(<M0>)|(<M1>)).*",
                "prediction": "(.*[<LOW>].*)|(([<LET>])|(<M0>)|(<M1>))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines ending with <M0> before <M1> once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "(.*)(<M0>.*<M1>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "((.*)(<M0>.*<M1>.*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "((.*)(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "(.*)((<M0>.*<M1>.*)+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "(.*)((<M0>).*(<M1>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "((.*)(<M0>)).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "(((.*)(<M0>))+).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "(((.*)(<M0>)).*(<M1>).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "((.*)(<M0>)).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((<M1>)+).*",
                "prediction": "((.*)(<M0>)).*(<M1>.*<M1>.*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    "lines with character or string <M0> before vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": "(.*(.)|(<M0>).*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": "(.)|(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": "(.)+((<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": "((.)|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": "(.*..*)|(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": "(.)|((<M0>).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": "(.)|((<M0>)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": "(.)|((<M0>).*([<VOW>]).*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": "(.*(.)|(<M0>).*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)).*([<VOW>]).*",
                "prediction": ".*((.)|(<M0>)).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines with a character before a vowel at least 5 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "((.)+){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "(..*[<VOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "((.)*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "((.)+).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "((.){5,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "((.)+([<VOW>]).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "(.)+(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "((.)+).*([<VOW>]){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "(.*..*).*(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.){5,}).*([<VOW>]).*",
                "prediction": "((..*[<VOW>].*){5,}).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items with words containing a character preceding a numeral .": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "\\b(.)+([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "\\b..*[<NUM>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "\\b(..*[<NUM>].*)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "(\\b..*[<NUM>].*\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "\\b(.)*([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "\\b(..*[<NUM>].*)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "(\\b..*[<NUM>].*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "\\b(..*[<NUM>].*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "\\b(.)+(.*[<NUM>].*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(.)+([<NUM>]).*\\b",
                "prediction": "\\b(.).*([<NUM>]).*\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a capital letter , 5 or more times before a vowel in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "(([<CAP>]){5,}).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "([<CAP>].*[<VOW>].*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "((.){5,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "(([<CAP>]){5,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "(([<LET>]){5,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "([<CAP>]).*(([<VOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "((([<CAP>]){5,})|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "(([<CAP>].*[<VOW>].*){5,}).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "((([<CAP>]){5,})|([<VOW>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>]){5,}).*([<VOW>]).*",
                "prediction": "((([<CAP>]){5,})|([<VOW>])).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines where the string <M0> has a letter before it , no less than zero times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "([<LET>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "(<M0>.*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "(<M0>).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "((<M0>)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "((<M0>).*([<LET>]).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "((<M0>)+).*(([<LET>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "(<M0>).*(([<LOW>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "((<M0>){4,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>].*<M0>.*)*",
                "prediction": "((<M0>){2,}).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "either start with string <M0> or end with any number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|(.*))([<NUM>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|(.*))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|(.*)([<NUM>])))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|(.*))([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)+)|((.*)([<NUM>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|((.*)([<NUM>])))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|(.*))(.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|((.*)([<NUM>])))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)(.*))|((.*)([<NUM>]))"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines ending 5 or more times with a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)(([<LOW>]){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "((.*)([<LOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "((.*)(.*[<LOW>].*)){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": ".*((.*)([<LOW>])){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)((.*[<LOW>].*){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "\\b((.*)([<LOW>])){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": ".*(.*)(([<LOW>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)(.*([<LOW>]){5,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)(([<LOW>].*[<LOW>].*){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>]){5,})",
                "prediction": "(.*)((([<LOW>]){5,})){5,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing 3 or more of the string <M0> at the end": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": "(.*)(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": "(<M0>){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": "(.*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": "(.*)((<M0>){3,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": ".*(<M0>){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": "\\b(<M0>){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": "((.*)(<M0>)){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": "\\b((.*)(<M0>)){3,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": "\\b((<M0>){3,})\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(.*(<M0>){3,}.*)",
                "prediction": ".*((<M0>){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with a letter , <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": "(.*[<LET>].*)|((<M0>)*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": "\\b([<LET>])|(<M0>)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": ".*(<M0>)|([<LET>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": ".*([<LET>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": "([<LET>]).*((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": "(.*[<LET>].*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": "(.*([<LET>])|(<M0>)|(<M1>).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|(<M0>)|(<M1>)\\b",
                "prediction": "([<LET>]).*(([<LET>])|(<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 3 or more of a capital letter before a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": "([<CAP>].*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": "([<CAP>].*[<LOW>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": "([<CAP>]).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": "(([<CAP>]){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": "([<CAP>]).*(([<CAP>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": ".*([<CAP>].*[<LET>].*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": ".*([<CAP>]).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": "([<CAP>]).*(([<LOW>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<CAP>].*[<LET>].*){3,}",
                "prediction": "(.*[<CAP>].*).*(([<LET>]){3,}).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 2 or more vowels followed by capital letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "(..*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "([<CAP>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "([<VOW>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "(([<VOW>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "([<VOW>]).*(([<CAP>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "(.*[<VOW>].*[<CAP>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "(([<VOW>]){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "(([<CAP>]){2,}).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "(([<VOW>].*[<CAP>].*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*[<CAP>].*){2,}",
                "prediction": "(([<VOW>].*[<CAP>].*){2,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with either the string <M0> , a lower-case letter , or the string <M1> followed by a letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": "(.)+((<M0>)|([<LOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": "((<M0>)+)|([<LOW>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": "((<M0>)*)|([<LOW>]).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": "(([<LOW>])|(<M0>)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": "((<M1>)|([<LOW>])|(<M0>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": ".*((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": "\\b((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*",
                "prediction": "(((<M0>)|([<LOW>])|(<M1>))|(<M1>)).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            1
        ]
    },
    "lines with words and a number before vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": "(\\b[<NUM>].*[<VOW>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": "\\b[<NUM>].*[<VOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": "\\b([<NUM>].*[<VOW>].*)+\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": "(\\b[<NUM>].*[<VOW>].*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": "\\b([<NUM>].*[<VOW>].*).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": "\\b([<NUM>]).*([<VOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": "(\\b([<NUM>]).*([<VOW>]).*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": ".*\\b[<NUM>].*[<VOW>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": ".*\\b([<NUM>]).*([<VOW>]).*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b[<NUM>].*[<VOW>].*\\b",
                "prediction": "(\\b([<NUM>])+\\b).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> after a character at least twice": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "((.)+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(..*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "((.){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "\\b(..*<M0>.*){2,}\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.)+((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "((..*<M0>.*){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(\\b..*<M0>.*\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(.).*((<M0>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(..*<M0>.*).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>){2,}).*",
                "prediction": "(..*<M0>.*).*((<M1>){2,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with lower-case letter or vowel , 5 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": "(([<LOW>])|([<VOW>])){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": "([<LOW>])|(([<VOW>]){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": "(.*[<LOW>].*)|(([<VOW>]){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": ".*([<LOW>])|([<VOW>]){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": ".*(([<LOW>])|([<VOW>])){5,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": "\\b(([<LOW>])|([<VOW>])){5,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": "((([<LOW>])|([<VOW>])){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": ".*(([<LOW>])|([<VOW>])|([<VOW>])){5,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": "(.*([<LOW>])|([<VOW>]).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])){5,}",
                "prediction": "((.*[<LOW>].*)|([<VOW>])){5,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a capital letter followed by <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": "[<CAP>].*<M0>.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": ".*[<CAP>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": "([<CAP>].*<M0>.*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": "\\b[<CAP>].*<M0>.*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": "([<CAP>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": "([<CAP>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": "([<CAP>].*<M0>.*)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": "(.*[<CAP>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": "([<CAP>]).*(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)([<CAP>].*<M0>.*)",
                "prediction": "([<CAP>].*<M0>.*).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines ending in the string <M0> with a vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "((.*)(.*<M0>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "(.*)((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "(.*)((<M0>)|([<VOW>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "((.*)(.*[<VOW>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "((.*)([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "(.*)((.*<M0>.*)|([<VOW>]))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "((.*)(<M0>)).*(([<VOW>])+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "(.*)(.*(<M0>).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "((.*)(<M0>)).*(.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*(.*[<VOW>].*).*",
                "prediction": "(.*)(\\b(<M0>).*([<VOW>]).*\\b)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    "lines containing the string <M0> before a letter at least 3 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": "(.*<M0>.*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": "(<M0>.*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": "((<M0>){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": "(<M0>).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": "(.*(<M0>.*[<LET>].*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": "(.*(<M0>).*([<LET>]).*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": ".*((<M0>){3,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": "(.*<M0>.*).*(([<LET>]){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": "(.*(<M0>.*[<LET>].*){3,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(([<LET>]){3,}).*",
                "prediction": "(.*[<LET>].*).*((<M0>){3,}).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words and a vowel , string <M0> , or number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": "\\b(.)|([<VOW>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": "\\b(.)|(<M0>)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": "\\b(<M0>)|([<VOW>])|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": "(\\b([<VOW>])|(<M0>)|([<NUM>])\\b)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": "(\\b([<VOW>])|(<M0>)|([<NUM>])\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": "\\b(([<VOW>])|(<M0>)|([<NUM>]))|([<NUM>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": ".*\\b([<VOW>])|(<M0>)|([<NUM>])\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": "\\b.*([<VOW>])|(<M0>)|([<NUM>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<VOW>])|(<M0>)|([<NUM>])\\b",
                "prediction": ".*\\b([<VOW>])|(<M0>)|([<NUM>]).*\\b"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines that have letters preceding any numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": ".*[<LET>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": "([<LOW>].*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": "([<LET>].*[<NUM>].*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": "([<LET>].*[<NUM>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": "([<LOW>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": "([<LET>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": "([<LET>]).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": ".*([<LET>]).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": "([<LET>]).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(.*[<NUM>].*).*",
                "prediction": "(.*[<LET>].*).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    "lines containing either a letter , a capital letter , or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": ".*([<LET>])|([<CAP>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": "\\b([<LET>])|([<CAP>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": ".*([<LET>])|(<M0>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": "\\b([<CAP>])|([<LET>])|(<M0>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": ".*([<CAP>])|([<LET>])|(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": "\\b([<LET>])|(<M0>)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": ".*(<M0>)|([<CAP>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": ".*([<CAP>])|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": "(.*[<LET>].*)|(([<CAP>])|(<M0>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>])|([<CAP>])|(<M0>)\\b",
                "prediction": "(.*[<LET>].*)|(([<CAP>])|(<M0>)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines that begin with a lower-case letter or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "((<M0>)|([<LOW>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "(([<LOW>])|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "(([<LOW>])(.*))|(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "((<M0>)(.*))|(([<LOW>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "(([<LOW>])(.*))|((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "((([<LOW>])|(<M0>))+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "((<M0>)(.*))|(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "((.*[<LOW>].*)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "((<M0>)(.*))|(([<LOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "(([<LOW>])(.*))|(.*<M0>.*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> , a capital letter , or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": ".*(<M0>)|([<CAP>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": "(.*<M0>.*)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": "\\b(<M0>)|([<CAP>])|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": ".*(<M0>)|(<M1>)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": "(<M0>).*(([<CAP>])|(<M1>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": "(.*<M0>.*)|(([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": "(<M0>).*(([<CAP>])|([<CAP>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(<M0>)|([<CAP>])|(<M1>).*",
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*([<LET>]).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with a character , 5 or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": "(.*)((.){5,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": "((.*)(.)){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": "(.*)(.*(.){5,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": "(.*)(.*(.){5,}.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": "(.*)(.*..*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": "(.*)(\\b(.){5,}\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": "(.*)((..*..*){5,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": ".*(.*)((.){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": "(.*)(((.){5,})){5,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*((.*)(.)){5,}.*",
                "prediction": "((.*)(..*..*)){5,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines containing 2 or more lower-case letters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "([<LOW>]){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": ".*([<LOW>]){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "((.*)([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "\\b([<LOW>]){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "(([<LOW>]){2,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "(([<LOW>])|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "(([<LOW>])|([<LET>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": ".*(([<LOW>]){2,}).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LOW>].*){2,}",
                "prediction": "\\b(([<LOW>]){2,})(.*)\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with capital letter or string <M0> before vowel": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": ".*([<CAP>])|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*)|(<M0>.*[<VOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": "((<M0>)|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": "(([<CAP>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": "(.*[<CAP>].*)|((<M0>).*([<VOW>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": ".*([<CAP>])|(<M0>.*[<VOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": "([<CAP>]).*((<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": ".*(([<CAP>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": "(.*([<CAP>])|(<M0>).*).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<CAP>])|(<M0>)).*([<VOW>]).*",
                "prediction": ".*(([<CAP>])|(<M0>)|([<LOW>])).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with only a lower-case letter , 2 or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": "(.*)([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": ".*(.*)([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": "((.*)([<LOW>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": "(.*)(([<LOW>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": ".*((.*)([<LOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": "(.*)(.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": "(.*)(.*([<LOW>]){2,}.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": ".*(.*)(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": ".*((.*)([<LOW>])){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])){2,}",
                "prediction": "(.*)((.*[<LOW>].*){2,})"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character after a letter , the string <M0> , or the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": ".*([<LET>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": "(.)+(([<LET>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": "(([<LET>])|(<M1>)|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": "((<M0>)|(<M1>)|([<LET>])).*(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": "([<LET>]).*((.)|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": "((.)|(<M0>)|(<M1>)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(<M0>)|(<M1>)).*(.)+",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*((.)+).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines containing the string <M0> 2 times or a capital letter 2 times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((<M0>){2,})|([<CAP>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((<M0>){2,})|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(.*(<M0>){2,}.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((<M0>){2,})|(.*[<CAP>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((.*<M0>.*)|([<CAP>])){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": ".*((<M0>){2,})|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((<M0>){2,})|(([<CAP>]){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((<M0>){2,})|(([<CAP>]).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((<M0>){2,})|(([<CAP>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(((<M0>){2,})|([<CAP>])){2,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with either a character , the string <M0> , or the string <M1> followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(.)|((<M0>)|(<M1>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(.)+((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "((<M0>)|(.)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "((.)|(<M0>))|(<M1>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(((.)|(<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "(.)|((<M0>)|(<M1>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": "\\b((.)|(<M0>)|(<M1>)).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|(<M0>)|(<M1>)).*([<LOW>]).*",
                "prediction": ".*((.)|(<M0>)|(<M1>)).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines which have the string <M0> followed by a number before the string <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": "(<M0>.*[<NUM>].*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": "(<M0>).*([<NUM>].*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": "([<NUM>].*<M0>.*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": "(<M0>.*<M1>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": ".*(<M0>.*[<NUM>].*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": "((<M0>.*[<NUM>].*)|(<M1>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": "(.*<M0>.*[<NUM>].*).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": "((<M0>.*[<NUM>].*)*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": "((<M0>).*([<NUM>]).*).*(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*(<M1>).*",
                "prediction": "((<M0>.*[<NUM>].*)+).*(<M1>).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines containing a capital letter before a character": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": ".*[<CAP>].*..*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": "(.*[<CAP>].*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": ".*([<CAP>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": "([<CAP>]).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": "(([<CAP>])+).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": "\\b([<CAP>]).*(.)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": "([<CAP>]).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": "([<CAP>]).*(.*..*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": "((.*)([<CAP>])).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "..*[<CAP>].*",
                "prediction": "(.*[<CAP>].*).*((.)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> at least 2 times and comes before the string <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "(<M0>.*<M1>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "(.*<M1>.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "((<M0>){2,}).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "(<M0>).*((<M1>){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": ".*((<M0>){2,}).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "((<M1>){2,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "((<M0>){2,}).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "(((<M0>){2,})|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "\\b((<M0>){2,}).*(<M1>).*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "(\\b(<M0>){2,}\\b).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    "lines with a letter before <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": ".*[<LET>].*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "([<LET>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": ".*([<LET>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "(([<LET>])+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "(.*[<LET>].*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "(([<LET>])(.*)).*(<M0>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing 2 or more characters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": "(.){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": "\\b(.){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": "(..*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": ".*(.){2,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": "(.*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": "(.*)(.*..*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": "((.){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": "(.*)((.){2,})"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": "(\\b(.){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.){2,}",
                "prediction": "\\b((.){2,})(.*)\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1
        ]
    },
    "items with a small letter or vowel preceding an upper case letter .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "((<M0>)|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<VOW>])|([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<CAP>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "([<LOW>]).*(([<CAP>])|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "([<VOW>]).*(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "([<LOW>]).*(([<VOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>])|([<CAP>])).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LOW>])|([<VOW>])).*([<CAP>]).*",
                "prediction": "(([<LOW>]){3,})|([<VOW>].*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with 1 or more character , or ending with the string <M0>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": "((.)+)|((.*)(<M0>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": "(.*..*)|((.*)(<M0>))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": "((.)+)|(((.*)(<M0>)))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": ".*(.)+((<M0>)|(.)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": "(.)+(((.)|(<M0>))*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": "((.)+()|((.*)(<M0>)))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": "(.*)((.)|((.*)(<M0>)))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": "((.)+)|(((.*)(<M0>)))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": "(.*)((.)|((<M0>)|(.)))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)+)|((.*)(<M0>))",
                "prediction": ".*((.)+)|((.*)(<M0>)).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines with a character before <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": ".*..*<M0>.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": ".*(.)+(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(..*<M0>.*)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(.)+(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(.)+((<M0>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "((.)+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(.)+(.*<M0>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(.)+((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(.*..*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(..*<M0>.*).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter and 0 or more capital letters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": "(([<CAP>])|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": "(.*[<LET>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": "([<LET>].*[<CAP>].*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": "(([<LET>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": "(([<LOW>])|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": ".*([<LET>]).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": "(([<LET>])*).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": "([<LET>]).*(([<CAP>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": "([<LET>]).*(([<CAP>])|([<LET>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LET>]).*(([<CAP>])*).*",
                "prediction": "(.*[<LET>].*).*(([<CAP>])*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with string <M0> followed by character or a capital at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "((<M0>).*(.)|(.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "(<M0>.*..*)|((.*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "((<M0>.*..*)|([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "(<M0>.*..*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "((<M0>).*(.)|(([<CAP>])+))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "(<M0>).*((.)|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "((<M0>).*(.)|([<CAP>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "(<M0>).*(((.)|([<CAP>]))+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "((<M0>).*(.)+)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*..*)|(([<CAP>])+)",
                "prediction": "((<M0>)|((.)+)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines that have <M0> before 2 or more numbers": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": ".*(<M0>).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": "(<M0>).*((.){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": "(<M0>).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": "(<M0>.*[<NUM>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": "((<M0>){2,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": "(.*<M0>.*).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": ".*(<M0>).*(([<NUM>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": ".*(<M0>.*[<NUM>].*){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b(<M0>.*[<NUM>].*){2,}\\b",
                "prediction": "\\b(<M0>).*(([<NUM>]){2,}).*\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with zero or more of a letter or character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": "(([<LET>])|(.))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": "((.)|([<LET>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": "((([<LET>])|(.))*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": ".*(([<LET>])|(.))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": "(([<LET>])|((.)*))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": "(([<LET>])|((.)+))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": ".*(([<LET>])|(.))*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": "(.*([<LET>])|(.)+)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": "\\b(([<LET>])|(.))*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|(.))*",
                "prediction": "(.*[<LET>].*)|((.)*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines that contain <M0> before a number that is followed by a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "((<M0>)*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(<M0>).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(<M0>).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "([<NUM>]).*(<M0>.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(.*<M0>.*[<NUM>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(<M0>.*[<NUM>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "(.*<M0>.*[<LOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "((<M0>)+).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "((<M0>)*).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>.*[<NUM>].*).*([<LOW>]).*",
                "prediction": "((<M0>).*([<NUM>]).*).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    "lines ending with 1 or more of the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "(.*)((<M0>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "((.*)(<M0>))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "((.*)(.*<M0>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "((.*)((<M0>)+))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "(.*)((.*<M0>.*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "(.*)(\\b(<M0>)+\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "(.*)(.*(<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": ".*((.*)(<M0>))+.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "(.*)(((<M0>)+)|([<LET>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": ".*(.*)((<M0>)+).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines that have a vowel followed by <M0> and then a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": ".*[<VOW>].*<M0>.*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": "[<VOW>].*<M0>.*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": "\\b[<VOW>].*<M0>.*[<LOW>].*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": "([<VOW>]).*(<M0>.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": "([<VOW>].*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": "(<M0>).*([<VOW>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": ".*[<VOW>].*<M0>.*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": "(<M0>.*[<VOW>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": "(.*[<VOW>].*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*(<M0>.*[<LOW>].*).*",
                "prediction": "([<LOW>].*<M0>.*).*([<VOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with zero or more of a capital letter or character": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": "(([<CAP>])|(.))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": "((.)|([<CAP>]))*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": "(.*([<CAP>])|(.)+)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": "(([<CAP>])|((.)+))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": "((([<CAP>])|(.))*)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": ".*(([<CAP>])|(.))*.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": "((.*[<CAP>].*)|(.))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": "(.*[<CAP>].*)|((.)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": "\\b(([<CAP>])|(.))*\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*([<CAP>])|(.)+)*",
                "prediction": "(.*([<CAP>])|(.)|(.)*)*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines that begin with a number followed by a character or the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "(([<NUM>].*..*)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "([<NUM>]).*((.)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "(([<NUM>].*..*)(.*))|(<M0>)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "([<NUM>].*..*)|((<M0>)(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "(([<NUM>]).*(.)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "(([<NUM>]..*..*)|(<M0>))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "(([<NUM>])(.*)).*((.)|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "(([<NUM>]).*(.)|(<M0>)).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "(([<NUM>]).*(.)|(<M0>)).*((.)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])(.*)).*((.)|(<M0>)).*",
                "prediction": "(([<NUM>]).*(.)|(<M0>)).*((.)*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with <M0> before either <M1> , a number , or a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "(<M0>).*(<M1>)|([<NUM>])|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "(<M0>).*(<M1>.*[<NUM>].*)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])|(<M2>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "((<M0>)+).*((<M1>)|([<NUM>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<NUM>])|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<NUM>])|([<CAP>])|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "(<M0>).*(<M1>).*(([<NUM>])|([<CAP>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "(<M0>).*(<M1>)|(([<NUM>])|([<CAP>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*((<M1>)|([<NUM>])|([<CAP>])).*",
                "prediction": "(.*<M0>.*).*((<M1>)|([<NUM>])|([<CAP>])).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a letter or ending in 4 or more of a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "(([<LET>])|(.*[<LOW>].*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "([<LET>])|(((.*)([<LOW>])){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "(([<LET>])|((.*)(<M0>))){4,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "(([<LET>])|((.*)([<LOW>]))){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "(([<LET>])|(([<LOW>]){4,}))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "(([<LET>])|(([<LOW>])(.*))){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "(([<LET>])|(((.*)([<LOW>]))){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "(([<LET>])|(((.*)([<LOW>]))){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "([<LET>]).*(((.*)([<LOW>])){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|((.*)([<LOW>]))){4,}",
                "prediction": "([<LET>]).*((([<LOW>]){4,})|([<LET>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with string <M0> before string <M1> with number following": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "(<M0>).*(.*<M1>.*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "(<M0>).*((<M1>)+).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "(<M0>.*<M1>.*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "(<M0>).*(<M1>.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "((<M0>)+).*(<M1>.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "((<M0>.*<M1>.*)+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<NUM>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "((<M0>).*(<M1>).*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "((<M0>).*(<M1>).*)|(.*[<NUM>].*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(<M0>).*(<M1>.*[<NUM>].*).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<NUM>])(.*))"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0
        ]
    },
    "lines that end with a lower-case letter followed by a capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": "(.*)([<LOW>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": "(.*)(.*[<LOW>].*[<CAP>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": "((.*)([<LOW>])).*([<CAP>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": "(.*)(([<LOW>].*[<CAP>].*)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": "(.*)(([<LOW>].*[<CAP>].*)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": "((.*)([<LOW>].*[<CAP>].*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": ".*(.*)([<LOW>].*[<CAP>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": "(.*)(.*([<LOW>].*[<CAP>].*).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": "(.*)(([<LOW>].*[<CAP>].*)(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LOW>])).*([<CAP>]).*",
                "prediction": "((.*)(.*[<LOW>].*)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    "lines that begin with a letter or a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "((.)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "(([<NUM>])|([<LET>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "(([<LET>])|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "(([<LET>])(.*))|(([<NUM>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "((([<LET>])|([<NUM>]))+)(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "(([<LOW>])|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "((.*[<LET>].*)|([<NUM>]))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "(.*[<LET>].*)|(([<NUM>])(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "\\b(([<LET>])|([<NUM>]))(.*)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])|([<NUM>]))(.*)",
                "prediction": "(([<LET>])(.*))|(([<NUM>])(.*))"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1
        ]
    },
    "lines starting in 2 or more characters": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "(..*..*){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "((.){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "((.)(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "((.)|(.))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "(\\b(.)(.*)\\b){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "(\\b(.){2,}\\b)(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "\\b((.)(.*)){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "((..*..*)(.*)){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "((..*..*){2,})(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)(.*)){2,}",
                "prediction": "(((.)(.*)){2,})(.*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    "lines with 5 or more of a character before number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": "(.)+([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": "(..*[<NUM>].*){5,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": "(.)+(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": "((.)+).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": "((.)+([<NUM>]).*){5,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": "((.){5,}).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": ".*(..*[<NUM>].*){5,}.*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": ".*(.)+(([<NUM>]){5,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": "((..*[<NUM>].*){5,})(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+(([<NUM>]){5,}).*",
                "prediction": "((..*[<NUM>].*){5,}).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines with 2 or more of the string <M0> or the strings <M1> before <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "((<M0>)|(<M1>)){2,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "((<M0>)|(<M1>)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "((<M0>){2,})|(<M1>.*<M2>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "((<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "((<M0>){2,})|(.*<M1>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "((<M0>){2,})|(<M1>).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "((<M0>){2,})|(<M1>.*<M2><M2>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "((<M0>)|(<M1>)){2,}.*<M2>"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "(((<M0>){2,})|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>){2,})|(<M1>.*<M2>.*)",
                "prediction": "((<M0>){2,})|((<M1>).*(<M2>).*)"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines ending in a lower-case letter or starting in capital letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": "(.*)((([<LOW>])+)|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": "(.*)((([<LOW>])|([<CAP>]))+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": ".*(.*)(([<LOW>])|([<CAP>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": "(.*)((.*[<LOW>].*)|([<CAP>]))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": "(.*)(([<LOW>])|(([<CAP>])(.*)))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": "((.*)(([<LOW>])|([<CAP>])))(.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": "((.*)([<LOW>]))|(([<CAP>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": "(.*)((([<LOW>])|([<CAP>]))(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": "(.*)(([<LOW>].*[<CAP>].*)|([<CAP>]))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)(([<LOW>])|(([<CAP>])(.*)))",
                "prediction": "(.*)(([<LOW>])|(([<CAP>]).*([<CAP>])).*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing string <M0> before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": ".*<M0>.*[<LOW>].*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": "(<M0>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": ".*(<M0>).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": "((<M0>)+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": "((<M0>)*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": "(.*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": "(<M0>).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": "((.*)(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": ".*(.*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*<M0>.*).*([<LOW>]).*",
                "prediction": ".*(<M0>.*[<LOW>].*).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines with a lower-case letter before either the string <M0> , a vowel , or the string <M1> in them": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "([<LOW>].*<M0>.*)|(([<VOW>])|(<M1>))"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "([<LOW>]).*(([<VOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((.)|(<M0>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M1>)|([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|(([<VOW>])|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "(([<LOW>])+).*(<M0>)|([<VOW>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "(.*[<LOW>].*).*((<M0>)|([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<LOW>]).*((<M0>)|([<VOW>])|(<M1>)).*",
                "prediction": "(([<LOW>])+).*((<M0>)|([<VOW>])|(<M1>)).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    "lines with words with a letter and capital letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": "\\b[<LET>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": "\\b([<LET>])|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": "\\b.*[<LET>].*[<CAP>].*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": "\\b([<CAP>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": "\\b([<LET>]).*([<CAP>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": "(\\b[<LET>].*[<CAP>].*\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": "(\\b[<LET>].*[<CAP>].*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": "(\\b[<LET>]\\b).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": ".*\\b[<LET>].*[<CAP>].*\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LET>]).*(([<CAP>])+).*\\b",
                "prediction": ".*\\b([<LET>])|([<CAP>]).*\\b.*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines ending in 2 or more of the string <M0> before lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "((.*)(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "((.*)(<M0>)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "((.*)(<M0>.*[<LOW>].*)){2,}"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "(.*)(<M0>.*[<LOW>].*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "((.*)(<M0>)){2,}.*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "(.*)((<M0>.*[<LOW>].*){2,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "((.*)(<M0>)).*(([<LOW>]){2,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "(((.*)(<M0>)){2,}).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "((.*)(<M0>)).*([<LOW>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*)((<M0>.*[<LOW>].*){2,})",
                "prediction": "((.*)((<M0>){2,})).*([<LOW>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with or without a vowel before a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "([<VOW>].*[<NUM>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "(([<VOW>])*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "([<VOW>]).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "(([<VOW>])*).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "(.*[<VOW>].*).*([<NUM>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "(([<VOW>])*).*(.*[<NUM>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "(([<VOW>])*).*(([<NUM>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "(([<VOW>])|([<NUM>])).*([<NUM>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "(.*[<VOW>].*).*(([<NUM>])*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<VOW>])*).*([<NUM>]).*",
                "prediction": "(([<VOW>])|([<CAP>])).*([<NUM>]).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    "items terminating with <M0> preceding <M1> .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "(.*)(<M1>.*<M0>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "(.*)(<M0>.*<M1>.*)"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "((.*)(<M0>.*<M1>.*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "(.*)((<M0>.*<M1>.*)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "(.*)(.*<M0>.*<M1>.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "((.*)(<M0>.*<M1>.*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "((.*)(<M1>)).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "((.*)(<M0>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "((.*)(<M0>)).*((<M1>)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": ".*(.*)(<M0>.*<M1>.*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with words that contain a lower-case letter followed by the string <M0> , at least twice": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "\\b([<LOW>].*<M0>.*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "\\b([<LOW>].*<M0>.*)|(<M1>)\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "(\\b[<LOW>].*<M0>.*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "\\b([<LOW>].*<M0>.*)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "\\b(<M0>.*[<LOW>].*){2,}\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "(\\b([<LOW>]).*(<M0>).*\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "(\\b([<LOW>].*<M0>.*)|(<M1>)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "\\b(([<LOW>]).*(<M0>).*)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "(\\b([<LOW>].*<M0>.*)|(<M0>)\\b){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b([<LOW>].*<M0>.*){2,}\\b",
                "prediction": "(\\b([<LOW>].*<M0>.*)|([<CAP>])\\b){2,}"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with a character preceded by a letter zero or more times": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "([<LET>].*..*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "(..*[<LET>].*)*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "(([<LET>])*).*(.)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "([<LET>]).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "([<LET>].*..*){2,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "((.)*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "(([<LET>])*).*((.)*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "(([<LET>]).*(.)+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "(([<LET>]).*(.)*).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<LET>])*).*(.)+",
                "prediction": "(([<LET>])(.*)).*((.)*).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines with string <M0> , 3 or more times preceded by a number": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": "(.*[<NUM>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": ".*([<NUM>]).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": "\\b([<NUM>]){3,}\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": "([<NUM>].*[<LET>].*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": "([<NUM>].*<M0>.*){3,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": "(([<NUM>]){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": "([<NUM>]).*((<M0>){3,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": "(([<NUM>].*<M0>.*){3,}).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": ".*([<NUM>].*<M0>.*){3,}.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<NUM>]).*((<M0>){3,}).*",
                "prediction": "\\b([<NUM>].*<M0>.*){3,}\\b"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    "lines with the string <M0> or a vowel and with the string <M1>": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "((<M0>)|([<VOW>])).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(<M0>.*[<VOW>].*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(<M0>).*((<M1>)|([<VOW>])).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "(<M0>).*(([<VOW>])|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "((<M0>)|([<VOW>])).*((<M1>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "((<M0>)|(<M1>)).*([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "((<M0>)+)|(([<VOW>]).*(<M1>).*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "((<M0>)|([<VOW>])|(<M1>)).*(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "((<M0>)|([<VOW>])|(<M1>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<VOW>])).*(<M1>).*",
                "prediction": "((<M0>)|([<VOW>])).*((<M1>)|([<LET>])).*"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "items terminating with <M0> preceding a character at least 4 times .": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "(<M0>).*((.){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "((.*)(<M0>.)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "(.*)(<M0>.*..*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "(.*)(..*<M0>.*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "(.*)((<M0>.*..*){4,})"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "((.*)(<M0>.*..*)){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "(.*)(<M0>..*..*){4,}"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "(.*)((<M0>..*..*){4,})"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "((.*)(<M0>)).*((.){4,}).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(<M0>)).*((.){4,}).*",
                "prediction": "((.*)(<M0>..*..*)){4,}"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    "lines with either a letter or a vowel preceding the string <M0>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "(([<LET>])|([<VOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "([<LET>]).*(([<VOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "([<LET>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "(([<VOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "(([<LET>])|([<VOW>])).*((<M0>)+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "([<LET>]).*(([<LET>])|(<M0>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "(([<LET>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "(([<LET>])|([<VOW>])|([<LOW>])).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "(([<LET>])|([<VOW>])|(<M0>)).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "prediction": "(([<LOW>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines starting with string <M0> before number or lower-case letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "((<M0>).*([<NUM>]).*)|([<LOW>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "((<M0>.*[<NUM>].*)|([<LOW>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "(<M0>).*(([<NUM>])|([<LOW>])).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "((<M0>.*[<NUM>].*)|([<LOW>]))(.*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "(<M0>.*[<NUM>].*)|(([<LOW>])(.*))"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "((<M0>).*([<NUM>]).*)|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "((<M0>)(.*)).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "((<M0>).*([<NUM>]).*)|(([<LOW>]).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "((<M0>).*([<NUM>]).*)|(([<LOW>])(.*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(((<M0>).*([<NUM>]).*)|([<LOW>]))(.*)",
                "prediction": "((<M0>)(.*)).*(([<NUM>])|([<LOW>])).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    "lines with a character before <M0> or <M1>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": ".*(.)+(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": "(..*<M0>.*)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": "(.)+((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": "((.)+).*(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": "(..*<M0>.*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": ".*(..*<M0>.*)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": ".*(.)+((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": "((.)+(<M0>).*)|((<M1>)+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": "((.)+(<M0>).*)|((<M1>).*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(.)+((<M0>)|(<M1>)).*",
                "prediction": "((.)+).*((<M0>)|(<M1>)).*"
            }
        ],
        "string": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines with words that contain the string <M0> occurring at least once": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": "(\\b<M0>\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": "(\\b\\b<M0>\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": "(\\b<M0>.*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": "(\\b(<M0>)+\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": "(\\b(<M0>)*\\b)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": "(\\b.*<M0>.*\\b)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": ".*\\b(<M0>)+\\b.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "\\b.*(<M0>)+.*\\b",
                "prediction": "(\\b(<M0>)+\\b).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    "lines having either the string <M0> , a letter , or the string <M1> <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": "(.*<M0>.*)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": ".*(<M0>)|([<LET>])|(<M1>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": "(.*<M0>.*)|(([<LET>])|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": ".*(<M1>)|(<M0>)|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": ".*([<LET>])|(<M0>)|(<M1>).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": "(.*(<M0>)|([<LET>])|(<M1>).*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": "(.*[<LET>].*)|((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": ".*((<M0>)|([<LET>])|(<M1>))|(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((<M0>)|([<LET>])|(<M1>)).*(<M2>).*",
                "prediction": "((<M1>)|([<LET>])|(<M0>)).*(<M1>).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines with zero or more numbers or characters": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": "(([<NUM>])|(.))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": "([<NUM>])|((.)*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": "(([<NUM>])*)|(.)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": ".*(([<NUM>])*)|(.)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": "(([<NUM>])|((.)*))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": "(\\b([<NUM>])|(.)\\b)*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": "(.*[<NUM>].*)|((.)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": ".*(([<NUM>])|(.))*.*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": "\\b(([<NUM>])*)|(.)\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "(([<NUM>])|(.))*",
                "prediction": "\\b(([<NUM>])|(.))*\\b"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            1
        ]
    },
    "lines which are ending with a letter or the string <M0> , zero or more times": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": "((.*)(([<LET>])|(<M0>)))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": "(.*)((([<LET>])|(<M0>))*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": "((.*)([<LET>]))|((<M0>)*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": "((.*)((<M0>)|([<LET>])))*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": "(((.*)([<LET>]))|(<M0>))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": "(.*)(((<M0>)|([<LET>]))*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": "(.*)(([<LET>])|((<M0>)*))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": "(.*(.*)(([<LET>])|(<M0>))*)*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": ".*((.*)([<LET>]))|(<M0>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)(([<LET>])|(<M0>)))*",
                "prediction": "((.*)(.*[<LET>].*))|((<M0>)*)"
            }
        ],
        "string": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines containing character or a capital": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": "((.)|([<CAP>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": "(.)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": "((.)|([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": ".*(.)|([<CAP>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": "\\b(.)|([<CAP>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": "(.*..*)|([<CAP>])"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": "(.*..*)|(([<CAP>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": "(.*..*)|(([<CAP>])*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": "(.*(.)|([<CAP>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(.)|([<CAP>]).*",
                "prediction": "(.*..*)|(.*[<CAP>].*)"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1
        ]
    },
    "lines that have a vowel or letter": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<LET>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<LET>]))*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "\\b([<VOW>])|([<LET>])\\b"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": ".*([<LET>])|([<VOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": ".*([<VOW>])|([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": ".*([<VOW>])|([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "\\b([<LET>])|([<VOW>])\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "(.*[<VOW>].*)|([<LET>])"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "(.*[<VOW>].*)|(([<LET>])*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "(.*[<VOW>].*)|([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "lines ending with only a letter at least once": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "(.*)([<LET>])"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "((.*)([<LET>]))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "((.*)([<CAP>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "(((.*)([<LET>]))+)+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "(.*)(([<CAP>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "(.*)(([<LET>])+)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "((.*)(.*[<LET>].*))+"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "(.*)(\\b([<LET>])+\\b)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "(.*)(.*([<LET>])+.*)"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.*)([<LET>]))+",
                "prediction": "(.*)((.*[<LET>].*)+)"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    "lines that have a vowel followed by the word <M0> , <M1> , or <M2>": {
        "detail": [
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "(.*[<VOW>].*)|((<M0>)|(<M1>))"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*([<VOW>])|(<M1>)|(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "(.*[<VOW>].*)|((<M0>)|(<M1>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "([<VOW>]).*((<M1>)|(<M0>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "(<M0>).*(([<VOW>])|(<M1>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "([<VOW>]).*((<M0>)|(<M2>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "([<VOW>]).*((.)|(<M0>)|(<M2>)).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>]).*((<M0>)|(<M1>)|(<M2>)).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)|(<M2>)).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    "the lines that contain a character or a number before before a letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "((.)|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "((..*[<LET>].*)|([<NUM>]))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "(([<NUM>])|(.)).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "((.)|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "(((.)|([<NUM>]))*).*([<LET>]).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "(((.)|([<NUM>])).*([<LET>]).*)+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "(((.)|([<NUM>]))+).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "((.)|(([<NUM>]).*([<LET>]).*))+"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "((.)|([<NUM>])|([<NUM>])).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "((.)|([<NUM>])).*([<LET>]).*",
                "prediction": "((..*[<LET>].*)|([<NUM>])).*([<LET>]).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0
        ]
    },
    "lines containing a vowel before the string <M0> which precedes a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "([<VOW>]).*(<M0>.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 1,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "([<VOW>].*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(<M0>).*([<VOW>].*[<LOW>].*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "([<VOW>].*<M0>.*).*(<M0>).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "([<VOW>]).*((<M0>).*([<LOW>]).*).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|(([<LOW>])+)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<VOW>]).*(<M0>).*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(.*[<VOW>].*<M0>.*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|(.*[<LOW>].*)"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": "([<VOW>].*<M0>.*).*([<LOW>]).*",
                "prediction": "(([<VOW>]).*(<M0>).*).*(([<LOW>])+).*"
            }
        ],
        "string": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1
        ]
    },
    "lines with a capital letter before a lower-case letter": {
        "detail": [
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": ".*[<CAP>].*[<LOW>].*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": ".*([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": "([<CAP>]).*(([<LOW>])+).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": "([<CAP>]).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": "(([<CAP>])+).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": "([<CAP>]).*(.*[<LOW>].*).*"
            },
            {
                "dfa_equality": 1,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": "\\b([<CAP>]).*([<LOW>]).*\\b"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": "([<CAP>].*[<LOW>].*).*([<LET>]).*"
            },
            {
                "dfa_equality": 0,
                "score": 0,
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "truth": ".*(([<CAP>])+).*([<LOW>]).*",
                "prediction": "(([<CAP>])+).*(.*[<LOW>].*).*"
            }
        ],
        "string": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "dfa": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    }
}