[
    {
        "sentence": "items with a small letter preceding a character .",
        "detail": [
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*((.)*).*"
            },
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(.)+"
            },
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])+).*(.)+"
            },
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])(.*)).*(.)+"
            },
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*).*(.)+"
            },
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*((.)+).*"
            },
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(..*..*).*"
            },
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]).*(.)+).*([<CAP>]).*"
            },
            {
                "truth": "([<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(..*[<LET>].*).*"
            }
        ]
    },
    {
        "sentence": "lines with 2 or more letters",
        "detail": [
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]){2,}"
            },
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>]){2,}\\b"
            },
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|([<LET>])){2,}"
            },
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<CAP>])){2,}"
            },
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LET>]){2,}.*"
            },
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>]){2,}.*"
            },
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<LET>])){2,}"
            },
            {
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<LOW>])){2,}"
            }
        ]
    },
    {
        "sentence": "lines containing the string <M0> once",
        "detail": [
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)+"
            },
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)+"
            },
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*<M0>.*"
            },
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)*"
            },
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)+.*"
            },
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>))+"
            },
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)*.*"
            },
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*<M0>.*))+"
            },
            {
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|(.*[<CAP>].*)"
            }
        ]
    },
    {
        "sentence": "lines wherein either an uppercase letter , a letter , or the string <M0> are preceded by the string <M1>",
        "detail": [
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>])|(<M0>)|(<M1>).*"
            },
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*(<M1>).*"
            },
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LET>])|(<M1>)).*(<M1>).*"
            },
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M1>).*(([<CAP>])|(<M0>)|(<M1>)).*"
            },
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M1>)|([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<CAP>])|(<M0>)).*(<M1>).*"
            },
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|([<LET>])|(<M1>)).*(<M0>).*"
            },
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<LET>])|(<M0>)).*(<M1>).*"
            },
            {
                "truth": "(<M1>).*(([<CAP>])|([<LET>])|(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|(<M0>)|(<M1>)).*([<LET>]).*"
            }
        ]
    },
    {
        "sentence": "lines that end with the string <M0> followed by the string <M1> , at least 2 times",
        "detail": [
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(<M0>.*<M1>.*){2,}"
            },
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((<M0>.*<M1>.*){2,})"
            },
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>.*<M1>.*)){2,}"
            },
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((<M1>.*<M1>.*){2,})"
            },
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((<M1>.*<M0>.*){2,})"
            },
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M1>.*<M0>.*)){2,}"
            },
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*(<M0>.*<M1>.*){2,})"
            },
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(((<M0>.*<M1>.*){2,}))"
            },
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(((<M0>.*<M1>.*){2,}))(.*)"
            },
            {
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(\\b(<M0>.*<M1>.*){2,}\\b)"
            }
        ]
    },
    {
        "sentence": "lines containing capital letters or numbers",
        "detail": [
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|([<NUM>]))*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*)*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|([<NUM>]))+"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>])|(([<NUM>])*)"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>])|([<NUM>]).*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*)|([<NUM>])"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])|([<NUM>])\\b"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*)|(([<NUM>])*)"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*)|(([<NUM>])+)"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(([<CAP>])|([<NUM>]))*.*"
            }
        ]
    },
    {
        "sentence": "lines with a lower-case letter before <M0>",
        "detail": [
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<LOW>].*<M0>.*"
            },
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*<M0>.*)+"
            },
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(<M0>).*"
            },
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LOW>]).*(<M0>).*"
            },
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])+).*(<M0>).*"
            },
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*((<M0>)+).*"
            },
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(.*<M0>.*).*"
            },
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>]).*(<M0>).*\\b"
            },
            {
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*<M0>.*).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "lines with words and <M0> or lower-case letter",
        "detail": [
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])|(<M0>)\\b"
            },
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)|([<LOW>])\\b"
            },
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b((<M0>)|([<LOW>]))+\\b"
            },
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.*<M0>.*)|([<LOW>])\\b"
            },
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*(<M0>)|([<LOW>]).*\\b"
            },
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])|(<M0>)|([<LET>])\\b"
            },
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b(<M0>)|([<LOW>]).*\\b"
            },
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])|(<M0>)|([<CAP>])\\b"
            },
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])|(<M0>)|([<LOW>])\\b"
            },
            {
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b(<M0>)|([<LOW>]).*\\b.*"
            }
        ]
    },
    {
        "sentence": "lines with lower-case letter before number or zero or more of <U> letter",
        "detail": [
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(([<NUM>])*).*"
            },
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*[<NUM>].*)*"
            },
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])+).*(([<NUM>])*).*"
            },
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(([<NUM>])|(<M0>)).*"
            },
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(([<NUM>])|([<LET>])).*"
            },
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(([<NUM>])|([<CAP>])).*"
            },
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*((([<NUM>])*)|([<LET>])).*"
            },
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]).*([<NUM>]).*)|((.*)*)"
            },
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]).*([<NUM>]).*)|((.*)([<LET>]))"
            },
            {
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]).*([<NUM>]).*)|(([<LET>])*)"
            }
        ]
    },
    {
        "sentence": "lines that contain the string <M0> or a lower-case letter , at least 2 times",
        "detail": [
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LOW>])){2,}"
            },
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b((<M0>)|([<LOW>])){2,}\\b"
            },
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|(<M0>)){2,}"
            },
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>)|([<LOW>])){2,}.*"
            },
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b(<M0>)|([<LOW>])\\b){2,}"
            },
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*(<M0>)|([<LOW>]).*){2,}"
            },
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|(([<LOW>]){2,})"
            },
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b((<M0>){2,})|([<LOW>])\\b"
            },
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(([<LOW>]){2,})|(<M0>)\\b"
            },
            {
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*<M0>.*)|([<LOW>])){2,}"
            }
        ]
    },
    {
        "sentence": "lines with or without lower-case letter or upper case letter before the string <M0>",
        "detail": [
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])*)|([<CAP>].*<M0>.*)"
            },
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])*)|([<LET>].*<M0>.*)"
            },
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])*)|(([<CAP>])(.*))"
            },
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|([<CAP>])).*(<M0>).*"
            },
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])*)|(([<LET>]).*(<M0>).*)"
            },
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])*)|(([<CAP>]).*(<M0>).*)"
            },
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|([<CAP>])|(<M0>)).*(<M0>).*"
            },
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<LOW>])*)|([<CAP>])).*(<M0>).*"
            },
            {
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|([<CAP>])|([<LET>])).*(<M0>).*"
            }
        ]
    },
    {
        "sentence": "lines with the string <M0> before a letter , number , or vowel",
        "detail": [
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<LET>].*)|(([<NUM>])|([<VOW>]))"
            },
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<LET>].*[<NUM>].*)|([<VOW>]).*"
            },
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<LET>])|([<NUM>])|([<VOW>])).*"
            },
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)+(([<LET>])|([<NUM>])|([<VOW>])).*"
            },
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<NUM>])|([<LET>])|([<VOW>])).*"
            },
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<LET>].*).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*([<LET>]).*)|(([<NUM>])|([<VOW>]))"
            },
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<LET>]).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*(([<LET>])|([<NUM>])|([<VOW>])).*"
            },
            {
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<LET>].*).*(([<NUM>])|([<VOW>])|([<VOW>])).*"
            }
        ]
    },
    {
        "sentence": "lines with a capital letter before ending with the string <M0> at least zero times",
        "detail": [
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*((.*)(<M0>)).*"
            },
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*((.*)((<M0>)*)).*"
            },
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(((.*)(<M0>))*).*"
            },
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*((.*)((<M0>)*).*)"
            },
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*).*(((.*)(<M0>))*).*"
            },
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])+).*((.*)(<M0>)).*"
            },
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>]).*((.*)(<M0>)).*)*"
            },
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(((.*)(.*<M0>)*)).*"
            },
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(((.*)((<M0>)*))*).*"
            },
            {
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(((.*)(.*<M0>.*))*).*"
            }
        ]
    },
    {
        "sentence": "items terminating with <M0> at least twice .",
        "detail": [
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>)){2,}"
            },
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((<M0>){2,})"
            },
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*<M0>.*)){2,}"
            },
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((<M0>)|(.))"
            },
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((.*)(<M0>)){2,}.*"
            },
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b((.*)(<M0>)){2,}\\b"
            },
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)((<M0>){2,}).*"
            },
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(((<M0>){2,})|(.))"
            },
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((.*<M0>.*){2,})"
            },
            {
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(((<M0>){2,})|(<M1>))"
            }
        ]
    },
    {
        "sentence": "the string <M0> a number or a vowel appears in the lines",
        "detail": [
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>]))*"
            },
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>]))+"
            },
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>]))(.*)"
            },
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)|(([<NUM>])|([<VOW>]))"
            },
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>]))|([<VOW>])"
            },
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])|([<VOW>])).*(<M0>).*"
            },
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)|(([<NUM>])|([<VOW>]))(.*)"
            }
        ]
    },
    {
        "sentence": "lines that contain words that contain only the string <M0>",
        "detail": [
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b<M0>"
            },
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b"
            },
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b"
            },
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b<M0>\\b"
            },
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b<M0>\\b"
            },
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b<M0>\\b)+"
            },
            {
                "truth": ".*\\b<M0>\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b<M0>\\b)*"
            }
        ]
    },
    {
        "sentence": "lines with the string <M0> containing only a lower-case letter",
        "detail": [
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*<M0>.*[<LOW>].*"
            },
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<LOW>]).*"
            },
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<LOW>].*)+"
            },
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)*).*([<LOW>]).*"
            },
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*([<LOW>]).*"
            },
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(.*[<LOW>].*).*"
            },
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*([<LOW>]).*"
            },
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>).*([<LOW>]).*\\b"
            },
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "truth": "((<M0>)|([<LOW>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*(.*[<LOW>].*).*"
            }
        ]
    },
    {
        "sentence": "lines followed by a vowel before a capital letter",
        "detail": [
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*[<CAP>].*)+"
            },
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*[<CAP>].*).*([<LET>]).*"
            },
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*[<CAP>].*)*"
            },
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*[<CAP>].*).*(<M0>).*"
            },
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*[<CAP>].*).*([<CAP>]).*"
            },
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*[<VOW>].*).*([<LET>]).*"
            },
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*[<CAP>].*).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "lines that contain a vowel followed by a capital letter at least 3 times",
        "detail": [
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<CAP>].*){3,}"
            },
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*[<CAP>].*){3,}"
            },
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*[<VOW>].*){3,}"
            },
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*[<CAP>].*){3,}"
            },
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<CAP>]){3,}).*"
            },
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>]){3,}).*([<VOW>]).*"
            },
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]){3,}).*([<CAP>]).*"
            },
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*([<VOW>]).*([<CAP>]).*){3,}"
            },
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<CAP>].*){3,}).*([<VOW>]).*"
            },
            {
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*([<VOW>].*[<CAP>].*){3,}.*)"
            }
        ]
    },
    {
        "sentence": "lines with words and the string <M0> before a letter",
        "detail": [
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b<M0>.*[<LET>].*\\b)+"
            },
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b<M0>.*[<LET>].*\\b"
            },
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b<M0>.*[<LET>].*\\b)*"
            },
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*<M0>.*[<LET>].*\\b"
            },
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>.*[<LET>].*)+\\b"
            },
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>).*([<LET>]).*\\b"
            },
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b<M0>.*[<LET>].*\\b.*"
            },
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b(<M0>).*([<LET>]).*\\b)+"
            },
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b.*<M0>.*\\b).*([<LET>]).*"
            },
            {
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b(<M0>).*([<LET>]).*\\b.*"
            }
        ]
    },
    {
        "sentence": "lines with a number , zero or more times followed by a lower-case letter",
        "detail": [
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>].*[<LOW>].*)*"
            },
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])*).*([<LOW>]).*"
            },
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.)*).*([<LOW>]).*"
            },
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*(([<LOW>])*).*"
            },
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(([<NUM>])*).*([<LOW>]).*"
            },
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(([<NUM>])*).*([<LOW>]).*\\b"
            },
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<NUM>])*)*).*([<LOW>]).*"
            },
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])*).*(.*[<LOW>].*).*"
            },
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<NUM>].*)*).*([<LOW>]).*"
            },
            {
                "truth": "([<LOW>].*[<NUM>].*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*).*(([<LOW>])*).*"
            }
        ]
    },
    {
        "sentence": "the lines with the string <M0> ; at least once or the string <M1> before a vowel",
        "detail": [
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|(.*[<VOW>].*)"
            },
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|(<M1>.*[<VOW>].*)"
            },
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|(<M1>).*([<VOW>]).*"
            },
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|((<M1>.*[<VOW>].*))"
            },
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|((<M1>.*[<VOW>].*))+"
            },
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)+)+)|(<M1>.*[<VOW>].*)"
            },
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|((<M1>).*([<VOW>]).*)"
            },
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)+)|(<M1>)).*([<VOW>]).*"
            },
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|((<M1>)+).*([<VOW>]).*"
            },
            {
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|(<M1>)|(<M1>)).*([<VOW>]).*"
            }
        ]
    },
    {
        "sentence": "lines that end with <M0> and a vowel",
        "detail": [
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*<M0>.*)"
            },
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(<M0>).*([<VOW>]).*"
            },
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((<M0>)|([<VOW>]))"
            },
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(<M0>.*[<VOW>].*)"
            },
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*<M0>.*[<VOW>].*)"
            },
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>)).*([<VOW>]).*"
            },
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((<M0>).*([<VOW>]).*)"
            },
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)(<M0>.*[<VOW>].*).*"
            },
            {
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(\\b(<M0>).*([<VOW>]).*\\b)"
            }
        ]
    },
    {
        "sentence": "lines with a number before 2 or more of a character or vowel",
        "detail": [
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>].*..*){2,}"
            },
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*((.)|([<VOW>])){2,}.*"
            },
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*((.)|([<VOW>])).*"
            },
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>]).*(.)|([<VOW>])){2,}"
            },
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>]).*(.)|([<VOW>]).*){2,}"
            },
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*((.)|([<VOW>]){2,}).*"
            },
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*(((.){2,})|([<VOW>])).*"
            },
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*(((.)|([<VOW>])){2,}).*"
            },
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*((.)|(([<VOW>]){2,})).*"
            },
            {
                "truth": "([<NUM>].*..*)|(([<VOW>]){2,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>]).*(.)|(([<VOW>]){2,})).*(<M0>).*"
            }
        ]
    },
    {
        "sentence": "lines with a capital letter and stating with a vowel",
        "detail": [
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<CAP>].*[<VOW>].*"
            },
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>]).*([<VOW>]).*"
            },
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*[<VOW>].*)(.*)"
            },
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<VOW>])*).*"
            },
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<VOW>])(.*)).*"
            },
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<VOW>])+).*"
            },
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*((.*)([<VOW>])).*"
            },
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*)).*([<VOW>]).*"
            },
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*).*(([<VOW>])+).*"
            },
            {
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<VOW>])|([<LET>])).*"
            }
        ]
    },
    {
        "sentence": "lines that have a lower-case letter followed by the string <M0> , at least 1 time",
        "detail": [
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*<M0>.*)+"
            },
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*<M0>.*)+"
            },
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*((<M0>)+).*"
            },
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>].*<M0>.*)+)+"
            },
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<LOW>])+).*"
            },
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])+).*(<M0>).*"
            },
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*([<LOW>].*<M0>.*)+)+"
            },
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]).*(<M0>).*)+"
            },
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>].*<M0>.*)+)|([<CAP>])"
            },
            {
                "truth": "([<LOW>].*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]).*(<M0>).*)|(([<CAP>])+)"
            }
        ]
    },
    {
        "sentence": "lines starting with the string <M0> with string <M1>",
        "detail": [
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*))|((<M1>)+)"
            },
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*))+"
            },
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*))|(.*<M1>.*)"
            },
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*)).*(<M1>).*"
            },
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*))|((.*)(<M1>))"
            },
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*))|((<M1>)(.*))"
            },
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)(.*))|(<M1>))(.*)"
            },
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*)).*(.*<M1>.*).*"
            },
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*)).*((<M1>)+).*"
            },
            {
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*)).*((.*)(<M1>)).*"
            }
        ]
    },
    {
        "sentence": "lines ending with numeral or lower-case letter",
        "detail": [
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<NUM>])|([<LOW>]))"
            },
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)([<LOW>]).*"
            },
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)([<NUM>]).*"
            },
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<LOW>])|([<LOW>]))"
            },
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>]))|([<LOW>])"
            },
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>]))|([<LOW>])"
            },
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>]))|(([<LOW>])+)"
            },
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>]))|(([<LOW>])+)"
            },
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>]))|(([<LET>])+)"
            },
            {
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)(([<NUM>])|([<LOW>])).*"
            }
        ]
    },
    {
        "sentence": "lines containing a capital letter before a character",
        "detail": [
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<CAP>].*..*"
            },
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*).*(.)+"
            },
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>]).*(.)+"
            },
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(.)+"
            },
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])+).*(.)+"
            },
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>]).*(.)+\\b"
            },
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*((.)+).*"
            },
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(.*..*).*"
            },
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<CAP>])).*(.)+"
            },
            {
                "truth": "..*[<CAP>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*).*((.)+).*"
            }
        ]
    },
    {
        "sentence": "the string <M0> should be <U> with words in the string .",
        "detail": [
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)\\b"
            },
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)+\\b"
            },
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)(.*)"
            },
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)(.*)\\b"
            },
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(\\b)(.*)"
            },
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(\\b.*\\b).*"
            },
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(\\b([<CAP>])+\\b).*"
            },
            {
                "truth": "\\b.*<M0>.*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(\\b(.)+\\b).*"
            }
        ]
    },
    {
        "sentence": "lines that have the <M0> string as an ending",
        "detail": [
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*<M0>.*"
            },
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)*"
            },
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)*"
            },
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*<M0>.*)"
            },
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)*.*"
            },
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(<M0>).*"
            },
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>).*(.*).*"
            },
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((.*)([<CAP>])).*"
            },
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(.*)(.*)"
            },
            {
                "truth": "(.*)(<M0>)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(<M0>.*[<CAP>].*)"
            }
        ]
    },
    {
        "sentence": "lines containing a letter followed by a number 2 times",
        "detail": [
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*([<NUM>]).*"
            },
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "[<LET>].*[<NUM>].*"
            },
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*[<NUM>].*){2,}"
            },
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(([<NUM>]){2,}).*"
            },
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*([<NUM>].*<M0>.*).*"
            },
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LET>].*[<NUM>].*){2,}.*"
            },
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*([<NUM>].*[<NUM>].*).*"
            },
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>]){2,}).*([<NUM>]).*"
            },
            {
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>].*[<NUM>].*){2,}\\b"
            }
        ]
    },
    {
        "sentence": "lines that have the word <M0> before the word <M1> , which is then followed by the word <M2>",
        "detail": [
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M1>.*).*(<M0>).*"
            },
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(<M1>.*<M2>.*).*"
            },
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*(<M1>).*"
            },
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M1>.*<M2>.*).*(<M0>).*"
            },
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M1>.*<M0>.*).*(<M2>).*"
            },
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M1>).*(<M0>.*<M2>.*).*"
            },
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M1>.*<M2>.*).*(<M2>).*"
            },
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M2>.*<M1>.*).*(<M2>).*"
            },
            {
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M2>.*<M1>.*).*(<M0>).*"
            }
        ]
    },
    {
        "sentence": "lines with words containing a capital letter after a lower case letter",
        "detail": [
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<LOW>].*[<CAP>].*\\b"
            },
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<LOW>].*[<CAP>].*"
            },
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<CAP>].*[<LOW>].*\\b"
            },
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*([<CAP>]).*"
            },
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b[<LOW>].*[<CAP>].*\\b)+"
            },
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>]).*([<CAP>]).*\\b"
            },
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*[<LOW>].*[<CAP>].*\\b"
            },
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b[<LOW>].*[<CAP>].*\\b.*"
            },
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(.*[<CAP>].*).*"
            },
            {
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "lines with 3 or more of the string <M0> before a letter",
        "detail": [
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<LET>].*){3,}"
            },
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){3,}).*([<LET>]).*"
            },
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<LET>]){3,}).*"
            },
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*[<LET>].*){3,}"
            },
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*){3,}.*[<LET>].*"
            },
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>.*[<LET>].*){3,}.*"
            },
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>).*(([<LET>]){3,}).*"
            },
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>.*[<LET>].*){3,})(.*)"
            },
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>){3,}).*([<LET>]).*"
            },
            {
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*(([<LET>]){3,}).*"
            }
        ]
    },
    {
        "sentence": "lines ending with the string <M0> or the string <M1>",
        "detail": [
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>))|(<M1>)"
            },
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((<M0>)|(<M1>))"
            },
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(((<M0>)|(<M1>))+)"
            },
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(((<M0>)+)|(<M1>))"
            },
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>))|((<M1>)+)"
            },
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((<M1>)|(<M0>))"
            },
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M1>))|((<M0>)+)"
            },
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((.*<M0>.*)|(<M1>))"
            },
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>))|(.*<M1>.*)"
            },
            {
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)((<M0>)|(<M1>)).*"
            }
        ]
    },
    {
        "sentence": "lines containing the string <M0> with a letter before it",
        "detail": [
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<LET>]).*"
            },
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>).*([<LET>]).*"
            },
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<LET>])*).*"
            },
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<LET>])+).*"
            },
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)*).*([<LET>]).*"
            },
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*([<LET>]).*"
            },
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*(.*[<LET>].*).*"
            },
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*)).*([<LET>]).*"
            },
            {
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<LET>].*[<CAP>].*).*"
            }
        ]
    },
    {
        "sentence": "lines containing a character followed by a string <M0>",
        "detail": [
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*..*<M0>.*"
            },
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+(<M0>).*"
            },
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+(.*<M0>.*).*"
            },
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b..*<M0>.*\\b"
            },
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.)+(<M0>).*\\b"
            },
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+(<M0>.*[<LET>].*).*"
            },
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(..*[<LET>].*).*(<M0>).*"
            },
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(..*<M0>.*).*([<LET>]).*"
            },
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(..*<M0>.*).*(<M0>).*"
            },
            {
                "truth": "(.*..*<M0>.*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(..*<M0>.*).*([<VOW>]).*"
            }
        ]
    },
    {
        "sentence": "lines containing the string <M0> 2 times or a capital letter 2 times",
        "detail": [
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,})|([<CAP>])"
            },
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,})|([<CAP>]).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*(<M0>){2,}.*){2,}"
            },
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,})|(.*[<CAP>].*)"
            },
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*<M0>.*)|([<CAP>])){2,}"
            },
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>){2,})|([<CAP>]).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,})|(([<CAP>]){2,})"
            },
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,})|(([<CAP>]).*)"
            },
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,})|(([<CAP>])(.*))"
            },
            {
                "truth": "((<M0>)|([<CAP>])){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>){2,})|([<CAP>])){2,}"
            }
        ]
    },
    {
        "sentence": "lines with a vowel starting with the string <M0>",
        "detail": [
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>])(.*)"
            },
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])(.*))+"
            },
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*)(.*)"
            },
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*<M0>.*)(.*)"
            },
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((<M0>)(.*)).*"
            },
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])(.*))|((<M0>)+)"
            },
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])(.*)).*(<M0>).*"
            },
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])(.*)).*((<M0>)+).*"
            },
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])(.*))|(.*<M0>.*)"
            },
            {
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])(.*))|((<M0>)(.*))"
            }
        ]
    },
    {
        "sentence": "lines finishing with the string <M0> followed by a number",
        "detail": [
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*<M0>.*[<NUM>].*"
            },
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<NUM>].*)+"
            },
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<NUM>].*)(.*)"
            },
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(<M0>.*[<NUM>].*)"
            },
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(.*[<NUM>].*).*"
            },
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((.*)([<NUM>])).*"
            },
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*([<NUM>]).*"
            },
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)*).*(.*[<NUM>].*).*"
            },
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>)).*([<NUM>]).*"
            },
            {
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*)).*([<NUM>]).*"
            }
        ]
    },
    {
        "sentence": "lines with a number at the end followed by a capital letter or <M0>",
        "detail": [
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])+).*(([<CAP>])|(<M0>)).*"
            },
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<NUM>].*)|(<M0>)).*([<CAP>]).*"
            },
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])|(.*[<CAP>].*)).*(<M0>).*"
            },
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*(([<CAP>])|([<NUM>])).*"
            },
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<NUM>].*)|([<CAP>])).*(<M0>).*"
            },
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])+)|((.*[<CAP>].*)|(<M0>))"
            },
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<CAP>])).*(([<NUM>])|(<M0>)).*"
            },
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>])).*(([<CAP>])|(<M0>)).*"
            },
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<CAP>])).*(([<CAP>])|(<M0>)).*"
            },
            {
                "truth": "(.*)(([<NUM>].*[<CAP>].*)|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])(.*)).*(([<CAP>])|(<M0>)).*"
            }
        ]
    },
    {
        "sentence": "lines starting with a capital letter",
        "detail": [
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>])(.*)"
            },
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*))+"
            },
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])+)(.*)"
            },
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*))*"
            },
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*)(.*)"
            },
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<CAP>]))+"
            },
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<CAP>]))(.*)"
            },
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b([<CAP>])(.*)\\b)+"
            },
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*)).*([<LET>]).*"
            },
            {
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*))|(.*[<CAP>].*)"
            }
        ]
    },
    {
        "sentence": "lines containing the string <M0> or the string <M1>",
        "detail": [
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|(<M1>))*"
            },
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)|(<M1>)\\b"
            },
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|(<M1>).*"
            },
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M1>)|(<M0>).*"
            },
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M1>)|(<M0>)\\b"
            },
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>)|(<M1>)).*"
            },
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|(<M1>).*"
            },
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|((<M1>)+)"
            },
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>)|(<M1>))+.*"
            },
            {
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>)|(<M1>))*.*"
            }
        ]
    },
    {
        "sentence": "lines with the string <M0> or a number followed by a lower-case letter",
        "detail": [
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<NUM>])*).*"
            },
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)|([<NUM>].*[<LOW>].*)"
            },
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>].*[<LOW>].*))+"
            },
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<NUM>].*[<LOW>].*).*"
            },
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>])).*([<LOW>]).*"
            },
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>.*[<LOW>].*)|([<NUM>]))+"
            },
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|([<NUM>].*[<LOW>].*)"
            },
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<NUM>])|([<LOW>])).*"
            },
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)|(([<NUM>].*[<LOW>].*))(.*)"
            },
            {
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])|(<M0>)).*([<LOW>]).*"
            }
        ]
    },
    {
        "sentence": "lines where the string <M0> is not followed by the string <M1>",
        "detail": [
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "<M0>.*<M1>.*"
            },
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*<M1>.*)+"
            },
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*<M0>.*<M1>.*"
            },
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "<M1>.*<M0>.*"
            },
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(<M1>).*"
            },
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*<M1>.*)*"
            },
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(.*<M1>.*).*"
            },
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b<M0>.*<M1>.*\\b"
            },
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*(<M1>).*"
            },
            {
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*<M1>.*).*(<M1>).*"
            }
        ]
    },
    {
        "sentence": "lines ending in a character before a letter",
        "detail": [
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(..*[<LET>].*)"
            },
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*[<LET>].*).*"
            },
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(..*[<LET>].*))+"
            },
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.)).*([<LET>]).*"
            },
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((.)+([<LET>]).*)"
            },
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*)).*([<LET>]).*"
            },
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*(.)+([<LET>]).*)"
            },
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.)).*(([<LET>])+).*"
            },
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*..*)).*([<LET>]).*"
            },
            {
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*([<LET>]).*([<LET>]).*)"
            }
        ]
    },
    {
        "sentence": "lines that have a vowel or capital letter",
        "detail": [
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<CAP>]))+"
            },
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<CAP>]))*"
            },
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<VOW>])|([<CAP>])\\b"
            },
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])|([<VOW>])\\b"
            },
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>])|([<VOW>]).*"
            },
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<VOW>])|([<CAP>]).*"
            },
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*)|(([<CAP>])+)"
            },
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*)|([<CAP>]).*"
            },
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*)|(([<CAP>])*)"
            },
            {
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*([<VOW>])|([<CAP>]).*)+"
            }
        ]
    },
    {
        "sentence": "lines containing 5 or more of the string <M0>",
        "detail": [
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*){5,}"
            },
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>){5,}"
            },
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>){5,}\\b"
            },
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>)){5,}"
            },
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>){5,}.*"
            },
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){5,})(.*)"
            },
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b((<M0>){5,})|(.*)\\b"
            },
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){5,})|((.*)(.))"
            },
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){5,})|(.*..*)"
            },
            {
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){5,})|(.*[<LET>].*)"
            }
        ]
    },
    {
        "sentence": "lines with the string <M0> or the strings <M1> before <M2>",
        "detail": [
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|(<M1>).*"
            },
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M2>)|(<M1>)).*"
            },
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M1>)|(<M0>)).*(<M2>).*"
            },
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|(<M1>.*<M2>.*)"
            },
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M1>)|(<M2>)).*"
            },
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|((<M1>).*(<M2>).*)"
            },
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b(<M0>)|(<M1>)\\b).*(<M2>).*"
            },
            {
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b((<M0>)|(<M1>)).*(<M2>).*\\b"
            }
        ]
    },
    {
        "sentence": "lines containing the string <M0> with a letter",
        "detail": [
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)+.*"
            },
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<LET>]).*"
            },
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*<M0>.*[<LET>].*"
            },
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>).*([<LET>]).*"
            },
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|([<LET>])"
            },
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|([<LET>]).*"
            },
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)+.*([<LET>]).*"
            },
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*([<LET>]).*"
            },
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>).*([<LET>]).*\\b"
            },
            {
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((.*)([<LET>])).*"
            }
        ]
    },
    {
        "sentence": "lines with a letter containing only a capital letter at least once",
        "detail": [
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<CAP>].*)+)+"
            },
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])+).*([<CAP>]).*"
            },
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])+).*([<LET>]).*"
            },
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<CAP>])+).*"
            },
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<LET>])+).*"
            },
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])+).*(.*[<CAP>].*).*"
            },
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<CAP>].*)+).*([<CAP>]).*"
            },
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])+).*(([<LET>])+).*"
            },
            {
                "truth": "([<LET>]).*(([<CAP>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])+).*(.*[<LET>].*).*"
            }
        ]
    },
    {
        "sentence": "lines with a vowel or letter",
        "detail": [
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<LET>]))+"
            },
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<LET>]))*"
            },
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<VOW>])|([<LET>]).*"
            },
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<VOW>]))+"
            },
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<VOW>])|([<LOW>]).*"
            },
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<VOW>])|([<LET>])\\b"
            },
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*)|(([<LET>])*)"
            },
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<VOW>].*)|([<LET>]))*"
            },
            {
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*)|(([<LET>])+)"
            }
        ]
    },
    {
        "sentence": "lines containing the string <M0>",
        "detail": [
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)+.*"
            },
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*<M0>.*"
            },
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)*"
            },
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)*.*"
            },
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)+"
            },
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.*<M0>.*)+\\b"
            },
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.*<M0>.*)*\\b"
            }
        ]
    },
    {
        "sentence": "lines containing a character that follows a lower-case letter",
        "detail": [
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+"
            },
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*..*[<LOW>].*"
            },
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(..*[<LOW>].*)+"
            },
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+([<LOW>]).*"
            },
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+(([<LOW>])+).*"
            },
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(..*[<LOW>].*)*"
            },
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.)+([<LOW>]).*\\b"
            },
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+((.*)([<LOW>])).*"
            },
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+(.*[<LOW>].*).*"
            },
            {
                "truth": ".*[<LOW>].*..*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*..*).*([<LOW>]).*"
            }
        ]
    },
    {
        "sentence": "lines using the word string <M0> before the string <M1> , no times or more",
        "detail": [
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M1>)*).*"
            },
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)*).*(<M1>).*"
            },
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*<M1>.*)*"
            },
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M1>){3,}).*"
            },
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M1>){2,}).*"
            },
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M1>)|(<M2>)).*"
            },
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*((<M1>)*).*"
            },
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M1>){4,}).*"
            },
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*((<M1>){3,}).*"
            },
            {
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>).*)|((<M2>){2,})"
            }
        ]
    },
    {
        "sentence": "items with a vowel or an upper case letter or <M0> .",
        "detail": [
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>))*"
            },
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|(<M0>))|([<VOW>])"
            },
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|([<VOW>]))|(<M0>).*"
            },
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>])|(<M0>)|([<VOW>]).*"
            },
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|(<M0>))|([<VOW>]).*"
            },
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])|([<VOW>])|(<M0>)\\b"
            },
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|([<VOW>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<CAP>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])|(<M0>)|([<VOW>])).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "lines that end with 5 or more capital letters , each followed by a character",
        "detail": [
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((.){5,}){5,}).*(.)+"
            },
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(([<CAP>]){5,})).*(.)+"
            },
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((.){5,}).*([<CAP>]).*){5,}"
            },
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((.){5,})|([<CAP>])).*(.)+"
            },
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((.*)([<CAP>])){5,}).*(.)+"
            },
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((.){5,})|([<CAP>])){5,}"
            },
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.){5,}).*(([<CAP>]){5,}).*"
            },
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((.){5,})|([<CAP>])).*(<M0>).*"
            },
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((.){5,})|([<CAP>])).*(.){5,}"
            },
            {
                "truth": "(.*)(([<CAP>].*..*){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((.*)(([<CAP>]){5,})){5,}).*(.)+"
            }
        ]
    },
    {
        "sentence": "my <U> <U> is <U> .",
        "detail": [
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.)*\\b"
            },
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])|(<M0>)\\b"
            },
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<NUM>])|([<LET>])\\b"
            },
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)|([<LOW>])\\b"
            },
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])|([<LOW>])|(<M0>)\\b"
            },
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])|([<CAP>])|(<M0>)\\b"
            },
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>])|([<LOW>])|(<M0>)\\b"
            },
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])|([<LET>])|(<M0>)\\b"
            },
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])|([<LET>])|([<LOW>])\\b"
            },
            {
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])|([<LET>])|(<M0>)\\b"
            }
        ]
    },
    {
        "sentence": "items with words that have only an upper case letter .",
        "detail": [
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b"
            },
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<CAP>]"
            },
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])*\\b"
            },
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])+\\b"
            },
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b[<CAP>]\\b)*"
            },
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*[<CAP>].*\\b"
            },
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b[<CAP>]\\b.*"
            },
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])(.*)\\b"
            },
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])|([<LET>])\\b"
            },
            {
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>])|([<CAP>])\\b"
            }
        ]
    },
    {
        "sentence": "lines containing the string <M0> , a capital letter , and a character",
        "detail": [
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>).*([<CAP>]).*"
            },
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<CAP>])|(.)+"
            },
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<CAP>])|(.)+"
            },
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>])|(<M0>)|(.)+"
            },
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*([<CAP>]).*"
            },
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<CAP>])|(.).*"
            },
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>).*([<CAP>])|(.)+"
            },
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<CAP>])|(.)).*"
            },
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)|([<CAP>])|(.)\\b"
            },
            {
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<CAP>])|(.)|([<LET>])).*"
            }
        ]
    },
    {
        "sentence": "lines with a vowel , the string <M0> , and a character",
        "detail": [
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*<M0>.*)|(.)+"
            },
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<VOW>])|(<M0>)|(.)+"
            },
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<VOW>])|(<M0>)|(.)\\b"
            },
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((<M0>)|(.)|(.)).*"
            },
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((<M0>)|(.)).*"
            },
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|(.)).*"
            },
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((<M0>)|(.)|([<LET>])).*"
            },
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<VOW>])|(<M0>)|(.)).*"
            },
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|(<M0>)|(.)).*([<CAP>]).*"
            },
            {
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((<M0>)|([<LET>])|(.)).*"
            }
        ]
    },
    {
        "sentence": "lines with either at least 1 <M0> , number , or <M1>",
        "detail": [
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>])|(<M1>))*"
            },
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>])|(<M1>))+"
            },
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)|([<NUM>])|(<M1>)\\b"
            },
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|(([<NUM>])|(<M1>))"
            },
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<NUM>])|(<M1>).*"
            },
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<NUM>])|(<M0>)|(<M1>).*"
            },
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|(([<NUM>])|(<M1>))"
            },
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*(<M0>)|([<NUM>])|(<M1>).*)+"
            },
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*([<CAP>]).*"
            },
            {
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|(([<NUM>])|(<M1>)).*"
            }
        ]
    },
    {
        "sentence": "lines with words with a letter before string <M0> of <M1>",
        "detail": [
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<LET>].*<M0>.*\\b"
            },
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*[<LET>].*<M0>.*\\b"
            },
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>]).*(<M0>).*\\b"
            },
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b[<LET>].*<M0>.*\\b.*"
            },
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>].*<M0>.*)|(<M1>)\\b"
            },
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b([<LET>]).*(<M0>).*\\b)+"
            },
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b([<LET>]).*(<M0>).*\\b.*"
            },
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b[<LET>].*<M0>.*\\b).*(<M1>).*"
            },
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>]).*(<M0>.*<M1>.*).*\\b"
            },
            {
                "truth": "\\b([<LET>]).*((<M0>)|(<M1>)).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>].*<M0>.*).*(<M1>).*\\b"
            }
        ]
    },
    {
        "sentence": "lines containing the string <M0> or a number followed by a vowel",
        "detail": [
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)*)|([<NUM>].*[<VOW>].*)"
            },
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+)|([<NUM>].*[<VOW>].*)"
            },
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|([<NUM>].*[<VOW>].*)"
            },
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<NUM>])|([<VOW>])).*"
            },
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)|(([<NUM>]).*([<VOW>]).*)"
            },
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<NUM>].*[<VOW>].*).*"
            },
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|(([<NUM>]).*([<VOW>]).*)"
            }
        ]
    },
    {
        "sentence": "lines that begin with a capital and end with a lowercase",
        "detail": [
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>])(.*)"
            },
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>]))(.*)"
            },
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*..*)(.*)"
            },
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*)).*(.)+"
            },
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*((.*)([<LOW>])).*"
            },
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*)).*(.*[<NUM>].*).*"
            },
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*))|(.*[<LOW>].*)"
            },
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*)).*((.*)(.)).*"
            },
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*)).*(.*[<LOW>].*).*"
            },
            {
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*)).*((.*)([<LOW>])).*"
            }
        ]
    },
    {
        "sentence": "lines containing a capital letter and 2 or more vowels",
        "detail": [
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]){2,}"
            },
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>]){2,}.*"
            },
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*[<VOW>].*){2,}"
            },
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<VOW>]){2,}).*"
            },
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<LOW>]){2,}).*"
            },
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<NUM>]){2,}).*"
            },
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<CAP>]){2,}).*"
            },
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>]){2,}).*([<VOW>]).*"
            },
            {
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>]).*(([<VOW>]){2,}).*"
            }
        ]
    },
    {
        "sentence": "lines concluding with the <M0> string or concluding with a letter",
        "detail": [
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LET>]))*"
            },
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LET>]))+"
            },
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<LET>])|([<LOW>]).*"
            },
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|(([<LET>])+)"
            },
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<LET>])|([<LET>]).*"
            },
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<LET>])|([<CAP>]).*"
            },
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LET>])).*([<CAP>]).*"
            },
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LET>])).*([<LET>]).*"
            },
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LET>]))|(.*[<LET>].*)"
            },
            {
                "truth": "(.*)(([<LET>])|(<M0>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|(([<LET>]).*([<LET>]).*)"
            }
        ]
    },
    {
        "sentence": "lines that end with only a character",
        "detail": [
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*"
            },
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.)"
            },
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(\\b)"
            },
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*)"
            },
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.))"
            },
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.))*"
            },
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.))+"
            },
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*..*)"
            },
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(\\b.*..*)\\b"
            },
            {
                "truth": "(.*)(\\b.\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(\\b.*..*\\b)"
            }
        ]
    },
    {
        "sentence": "lines with words and zero or more of the string <M0>",
        "detail": [
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b"
            },
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b<M0>\\b)*"
            },
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b(<M0>)*\\b)*"
            },
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*(<M0>)*\\b.*"
            },
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.*<M0>.*)*\\b"
            },
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*(<M0>)*.*\\b"
            },
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b(<M0>)*\\b.*"
            },
            {
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b.*<M0>.*\\b)*"
            }
        ]
    },
    {
        "sentence": "line with a lower-case letter , 4 times before <M0>",
        "detail": [
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]){4,}).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.){4,}).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*<M0>.*){4,}"
            },
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(([<LOW>]){4,}).*(<M0>).*\\b"
            },
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(([<LOW>]){4,}).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>].*[<LET>].*){4,}).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LOW>].*<M0>.*){4,}.*"
            },
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*((<M0>){4,}).*"
            },
            {
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>].*<M0>.*){4,}).*(<M0>).*"
            }
        ]
    },
    {
        "sentence": "lines containing string <M0> , string <M1> , a vowel or a capital letter",
        "detail": [
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M1>)|(<M0>)|([<CAP>]).*"
            },
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|(<M1>)|([<VOW>]).*"
            },
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|(<M1>)|([<CAP>]).*"
            },
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M1>)|(<M0>)|([<VOW>]).*"
            },
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)|((<M0>)|([<VOW>])|([<CAP>]))"
            },
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|((<M1>)|([<VOW>]).*)"
            },
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|((<M1>)|([<VOW>])|([<CAP>]))"
            },
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|((<M1>)|([<CAP>])|([<VOW>]))"
            },
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M1>.*)|((<M0>)|([<CAP>])|([<VOW>]))"
            },
            {
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|(([<VOW>])|([<CAP>])|([<CAP>]))"
            }
        ]
    },
    {
        "sentence": "lines that contain a lower-case letter followed by a character , zero times or more",
        "detail": [
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*..*)*"
            },
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*)*"
            },
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])*).*(.)*"
            },
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*.*)*"
            },
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])*).*(.)+"
            },
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>].*..*)*)*"
            },
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*((.)*).*"
            },
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LOW>].*..*)*.*"
            },
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*).*((.)*).*"
            },
            {
                "truth": "(.*[<LOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]).*(.)*).*"
            }
        ]
    },
    {
        "sentence": "lines starting in zero or more of the string <M0> or capital letter",
        "detail": [
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)*)|(.))(.*)"
            },
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)|([<CAP>]))*)(.*)"
            },
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)|([<CAP>]))(.*))*"
            },
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)*)|([<CAP>]))(.*)"
            },
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)(.*))|([<CAP>]))*"
            },
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|(([<CAP>])(.*)))*"
            },
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)*)|(([<CAP>]))(.*))"
            },
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)(.*))*)|([<CAP>])"
            },
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)+)|([<CAP>]))(.*)"
            },
            {
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((<M0>)*)|(([<CAP>])(.*)))*"
            }
        ]
    },
    {
        "sentence": "lines with only a character",
        "detail": [
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+"
            },
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*..*"
            },
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.)+\\b"
            },
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.)+"
            },
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*..*)+"
            },
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*..*)*"
            },
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.)+\\b"
            },
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*..*).*"
            },
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.)+([<CAP>]).*"
            },
            {
                "truth": ".",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.)+).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "lines ending with a number before a letter",
        "detail": [
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)([<NUM>].*[<LET>].*)"
            },
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>])).*([<LET>]).*"
            },
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<NUM>])+).*([<LET>]).*"
            },
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<NUM>]).*([<LET>]).*)"
            },
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>])).*(([<LET>])+).*"
            },
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(([<NUM>])+)).*([<LET>]).*"
            },
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(((.*)([<NUM>]))+).*([<LET>]).*"
            },
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*(.*)([<NUM>]).*).*([<LET>]).*"
            },
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<NUM>].*)).*([<LET>]).*"
            },
            {
                "truth": "((.*)([<NUM>])).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>])).*(.*[<LET>].*).*"
            }
        ]
    },
    {
        "sentence": "the lines that contain words words that also have a vowel at least 1 time",
        "detail": [
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b\\b"
            },
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b"
            },
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<VOW>]"
            },
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<VOW>]\\b"
            },
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<VOW>])+\\b"
            },
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*[<VOW>].*\\b"
            },
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b\\b[<VOW>]\\b"
            },
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b\\b([<VOW>])+\\b"
            },
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*([<VOW>])+.*\\b"
            },
            {
                "truth": "\\b([<VOW>])*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*([<VOW>])+\\b.*"
            }
        ]
    },
    {
        "sentence": "lines with 3 or more of the string <M0>",
        "detail": [
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>){3,}"
            },
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*){3,}"
            },
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>){3,}.*"
            },
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){3,})(.*)"
            },
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>){3,}\\b"
            },
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(<M0>)){3,}"
            },
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<CAP>]){3,}).*"
            },
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>){3,}).*(.)+"
            },
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b((<M0>){3,})(.*)\\b"
            },
            {
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>){3,}).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "lines starting with <M0> followed by a capital",
        "detail": [
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<CAP>].*)(.*)"
            },
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*<M0>.*)(.*)"
            },
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>.*[<CAP>].*)+)(.*)"
            },
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>.*[<CAP>].*)(.*))+"
            },
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*)).*([<CAP>]).*"
            },
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>.*[<CAP>].*)(.*))*"
            },
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b<M0>.*[<CAP>].*\\b)(.*)"
            },
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>.*[<CAP>].*)(.*)\\b"
            },
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>.*[<CAP>].*)|([<NUM>]))(.*)"
            },
            {
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>.*[<CAP>].*)|([<VOW>]))(.*)"
            }
        ]
    },
    {
        "sentence": "lines ending with a letter or vowel",
        "detail": [
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<LET>])|([<VOW>]))"
            },
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LET>]))|([<VOW>])"
            },
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((([<LET>])|([<VOW>]))+)"
            },
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LET>]))|(([<VOW>])+)"
            },
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LET>]))|(([<VOW>])*)"
            },
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)(([<LET>])|([<VOW>])).*"
            },
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<LET>])|(([<VOW>])+))"
            },
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((([<LET>])|([<VOW>]))*)"
            },
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LET>]))|(([<VOW>])(.*))"
            },
            {
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)((.*[<LET>].*)|([<VOW>]))"
            }
        ]
    },
    {
        "sentence": "lines containing a capital letter before a lower-case letter",
        "detail": [
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<CAP>].*[<LOW>].*"
            },
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<CAP>]).*([<LOW>]).*"
            },
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*([<LOW>]).*"
            },
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])+).*([<LOW>]).*"
            },
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>]).*([<LOW>]).*\\b"
            },
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(.*[<LOW>].*).*"
            },
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<CAP>])).*([<LOW>]).*"
            },
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*[<LOW>].*).*([<LET>]).*"
            },
            {
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*([<LOW>].*[<LOW>].*).*"
            }
        ]
    },
    {
        "sentence": "a vowel must come before a lower case letter and must have string <M0>",
        "detail": [
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*<M0>.*).*([<LOW>]).*"
            },
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*[<LOW>].*).*(<M0>).*"
            },
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<LOW>]){2,}).*"
            },
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<LOW>]){3,}).*"
            },
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*([<LOW>].*<M0>.*).*"
            },
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]){2,}).*([<LOW>]).*"
            },
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]).*([<LOW>]).*)|(<M0>)"
            },
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]){4,}).*([<LOW>]).*"
            },
            {
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]).*([<LOW>]).*)|(<M0>).*"
            }
        ]
    },
    {
        "sentence": "lines ending with a number then <M0>",
        "detail": [
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)([<NUM>].*<M0>.*)"
            },
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*[<NUM>].*)"
            },
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>].*<M0>.*))+"
            },
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*[<NUM>].*<M0>.*)"
            },
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>])).*(<M0>).*"
            },
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<NUM>].*<M0>.*)+)"
            },
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)([<NUM>].*<M0>.*).*"
            },
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<NUM>].*)).*(<M0>).*"
            },
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*(.*)([<NUM>]).*).*(<M0>).*"
            },
            {
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>])).*(.*<M0>.*).*"
            }
        ]
    },
    {
        "sentence": "lines with a capital letter , <U> at least twice , before the string <M0>",
        "detail": [
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*<M0>.*){2,}"
            },
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>].*<M0>.*)*"
            },
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])*).*(<M0>).*"
            },
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>]){2,}).*(<M0>).*"
            },
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<CAP>]){2,})|(<M0>))(.*)"
            },
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<CAP>])(.*)).*(<M0>).*"
            },
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b([<CAP>]){2,}\\b).*(<M0>).*"
            },
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(([<CAP>]){2,}).*(<M0>).*\\b"
            },
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<CAP>]){2,})(.*)).*(<M0>).*"
            },
            {
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<CAP>]){2,})|(<M0>)).*(<M0>).*"
            }
        ]
    },
    {
        "sentence": "items with words containing <M0> , <M1> , or a small letter .",
        "detail": [
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.*<M1>.*)|(<M0>)\\b"
            },
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.*<M0>.*)|(<M1>)\\b"
            },
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M1>)|(<M0>)|([<LOW>])\\b"
            },
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)|(<M1>)|([<LOW>])\\b"
            },
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.)|(<M0>)|([<LOW>])\\b"
            },
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.)|(<M1>)|([<LOW>])\\b"
            },
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>])|(<M0>)|(<M1>)\\b"
            },
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<VOW>])|(<M0>)|(<M1>)\\b"
            },
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M1>)|([<LOW>])|(<M0>)\\b"
            },
            {
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])|(<M0>)|(<M1>)\\b"
            }
        ]
    },
    {
        "sentence": "lines with the string <M0> at least 2 times",
        "detail": [
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>){2,}"
            },
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*<M0>.*"
            },
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,})(.*)"
            },
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>){2,}.*"
            },
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>){2,}\\b"
            },
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b(<M0>){2,}\\b.*"
            },
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,}).*(.)+"
            },
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,})|(.*[<CAP>].*)"
            },
            {
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<CAP>]){2,}).*"
            }
        ]
    },
    {
        "sentence": "lines containing a letter preceding a number before the string <M0> or the string <M1>",
        "detail": [
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*[<NUM>].*).*(<M0>).*"
            },
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(([<NUM>])|(<M0>)).*"
            },
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*([<NUM>].*<M0>.*).*"
            },
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*((<M0>)|(<M1>)).*"
            },
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>]).*([<NUM>]).*)|((<M1>)+)"
            },
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(([<NUM>])|(<M1>)).*"
            },
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>]).*([<NUM>]).*)|((<M0>)+)"
            },
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(([<NUM>])|(<M0>)|(<M1>)).*"
            },
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>].*[<NUM>].*)|(<M1>)).*(<M0>).*"
            },
            {
                "truth": "([<LET>].*[<NUM>].*).*((<M0>)|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(([<NUM>].*<M0>.*)|(<M1>)).*"
            }
        ]
    },
    {
        "sentence": "lines ending with a lower-case letter before a vowel",
        "detail": [
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*[<LOW>].*[<VOW>].*)"
            },
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)([<LOW>].*[<VOW>].*)"
            },
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>].*[<VOW>].*))+"
            },
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<LOW>].*[<VOW>].*)+)"
            },
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>])).*([<VOW>]).*"
            },
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>])).*(([<VOW>])+).*"
            },
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<LOW>]).*([<VOW>]).*)"
            },
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*([<LOW>]).*([<VOW>]).*)"
            },
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<LOW>].*)).*([<VOW>]).*"
            },
            {
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>])).*(.*[<VOW>].*).*"
            }
        ]
    },
    {
        "sentence": "lines with a number or a vowel",
        "detail": [
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])|([<VOW>]))+"
            },
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])|([<VOW>]))*"
            },
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<NUM>])|([<VOW>]).*"
            },
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<NUM>])|([<VOW>])\\b"
            },
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*)|(([<VOW>])+)"
            },
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*)|(([<VOW>])*)"
            },
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*)|(([<VOW>])(.*))"
            },
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*([<NUM>])|([<VOW>]).*)+"
            },
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<NUM>].*)|([<VOW>]))+"
            },
            {
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])|([<VOW>])).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "lines which words contain either of these - letter , number , or vowel",
        "detail": [
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)|([<LOW>])|([<VOW>])\\b"
            },
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)|([<NUM>])|([<VOW>])\\b"
            },
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])|([<NUM>])|([<VOW>])\\b"
            },
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b"
            },
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b"
            },
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<VOW>])|([<NUM>])|([<LET>])\\b"
            },
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<NUM>])|([<LOW>])|([<VOW>])\\b"
            },
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LOW>])|([<NUM>])|([<VOW>]).*"
            },
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b([<LET>])|([<NUM>])|([<VOW>])\\b)+"
            },
            {
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b([<LET>])|([<NUM>])|([<VOW>])\\b)*"
            }
        ]
    },
    {
        "sentence": "lines containing a letter , the string <M0> , and 0 or more characters",
        "detail": [
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|(<M0>)|(.))*"
            },
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*)|((<M0>)*)"
            },
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LET>])|(<M0>)|(.)+"
            },
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|(<M0>)|(.)).*(<M1>).*"
            },
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*(.)+"
            },
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LET>])|(<M0>)|(<M1>).*"
            },
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*)|((<M0>)*).*"
            },
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|(<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*)|((<M0>).*(<M1>).*)"
            }
        ]
    },
    {
        "sentence": "lines that begin with a lower-case letter or the string <M0>",
        "detail": [
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LOW>]))(.*)"
            },
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|(<M0>))(.*)"
            },
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])(.*))|(<M0>)"
            },
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*))|(([<LOW>])+)"
            },
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])(.*))|((<M0>)+)"
            },
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<LOW>])|(<M0>))+)(.*)"
            },
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*))|(.*[<LOW>].*)"
            },
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<LOW>].*)|(<M0>))(.*)"
            },
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*))|(([<LOW>])(.*))"
            },
            {
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])(.*))|(.*<M0>.*)"
            }
        ]
    },
    {
        "sentence": "lines with the string <M0> before a capital letter",
        "detail": [
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<CAP>].*)+"
            },
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<CAP>]).*"
            },
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>).*([<CAP>]).*"
            },
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<CAP>])+).*"
            },
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*([<CAP>]).*"
            },
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(.*[<CAP>].*).*"
            },
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*([<CAP>]).*"
            },
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((.*)([<CAP>])).*"
            },
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<CAP>].*[<CAP>].*).*"
            },
            {
                "truth": "((<M0>)*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*(.*[<CAP>].*).*"
            }
        ]
    },
    {
        "sentence": "lines with words and the string <M0>",
        "detail": [
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b"
            },
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)+\\b"
            },
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b<M0>\\b.*"
            },
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b(<M0>)+\\b.*"
            },
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b(<M0>)*\\b.*"
            },
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*(<M0>)+.*\\b"
            },
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b.*<M0>.*\\b)+"
            },
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b.*<M0>.*\\b)*"
            },
            {
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b.*<M0>.*\\b.*"
            }
        ]
    },
    {
        "sentence": "items with <M0> , a letter , or a vowel .",
        "detail": [
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LET>])|([<VOW>]))*"
            },
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*)|([<LET>]).*"
            },
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>])|(<M0>)|([<VOW>])\\b"
            },
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(<M0>)|([<LET>])|([<VOW>])\\b"
            },
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<LET>])|([<VOW>]).*"
            },
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)|(<M0>)|([<LET>])|([<VOW>])"
            },
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LET>])|([<VOW>])).*([<CAP>]).*"
            },
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LET>])|(<M0>)|([<VOW>]).*"
            },
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*)|((<M0>)|([<VOW>])|([<VOW>]))"
            },
            {
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*(<M0>)|([<LET>])|([<VOW>]).*)*"
            }
        ]
    },
    {
        "sentence": "all lines",
        "detail": [
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*)*"
            },
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LET>]))*"
            },
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<CAP>]))*"
            },
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>]))+"
            },
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){4,}"
            },
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<LOW>].*))+"
            },
            {
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<LET>].*))*"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>]))+"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*)*"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LET>]))*"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<CAP>]))*"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){4,}"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<LOW>].*))+"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<LET>].*))*"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*)*"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*)+"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LET>]))*"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<LOW>]))+"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<CAP>]))*"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){3,}"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<LET>].*))*"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<CAP>].*){4,}"
            },
            {
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<LOW>].*))+"
            }
        ]
    },
    {
        "sentence": "lines containing 2 characters preceding a vowel",
        "detail": [
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.){2,}"
            },
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(..*[<VOW>].*){2,}"
            },
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.){2,}.*[<VOW>].*"
            },
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(..*[<VOW>].*)"
            },
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.){2,}.*[<VOW>].*"
            },
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*..*).*([<VOW>]).*"
            },
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.){2,}.*[<VOW>].*).*"
            },
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.){2,}).*([<VOW>]).*"
            },
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.){2,}.*[<VOW>].*\\b"
            },
            {
                "truth": "(.)+(([<VOW>]){2,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(..*[<VOW>].*){2,}.*"
            }
        ]
    },
    {
        "sentence": "lines with a vowel with a character",
        "detail": [
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(.)+"
            },
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<VOW>]).*(.)+"
            },
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*)(.*)"
            },
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])+).*(.)+"
            },
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*)|(.)+"
            },
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*).*(.)+"
            },
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((.)+).*"
            },
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|(.))(.*)"
            },
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])(.*)).*(.)+"
            },
            {
                "truth": "(([<VOW>])|(.*..*))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.)).*([<VOW>]).*"
            }
        ]
    },
    {
        "sentence": "lines with vowel before capital letter or letter at least once",
        "detail": [
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<CAP>])|([<LET>])).*"
            },
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])+).*(([<CAP>])|([<LET>])).*"
            },
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*[<CAP>].*)+"
            },
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]).*([<CAP>]).*)|(([<LET>])+)"
            },
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]).*([<CAP>]).*)|(([<CAP>])+)"
            },
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((([<CAP>])+)|([<LET>])).*"
            },
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((([<CAP>])|([<LET>]))+).*"
            },
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((([<CAP>])|([<CAP>]))+).*"
            },
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])(.*)).*(([<CAP>])|([<LET>])).*"
            },
            {
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]).*(([<CAP>])+)|([<LET>])).*"
            }
        ]
    },
    {
        "sentence": "lines that have only letters in the <U> words .",
        "detail": [
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b"
            },
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b"
            },
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>])+\\b"
            },
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LET>])*\\b"
            },
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b[<LET>]\\b)*"
            },
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*[<LET>].*\\b"
            },
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*[<CAP>].*\\b"
            },
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*([<LET>])*.*\\b"
            },
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b([<LET>])*\\b.*"
            },
            {
                "truth": "(.*)(\\b[<LET>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b.*[<LET>].*\\b)*"
            }
        ]
    },
    {
        "sentence": "lines with either a letter or a vowel preceding the string <M0>",
        "detail": [
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<VOW>])).*(<M0>).*"
            },
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(([<VOW>])|(<M0>)).*"
            },
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<VOW>])).*((<M0>)+).*"
            },
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(([<LET>])|(<M0>)).*"
            },
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            },
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<VOW>])|([<LOW>])).*(<M0>).*"
            },
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|([<VOW>])|(<M0>)).*([<LOW>]).*"
            },
            {
                "truth": "(.*[<LET>].*)|([<VOW>].*<M0>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|([<VOW>])|(<M0>)).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "items with a vowel , numeral , or upper case letter .",
        "detail": [
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<VOW>])|([<NUM>])|([<CAP>])\\b"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<NUM>])|([<CAP>]))*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<NUM>])|([<VOW>])|([<CAP>]).*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<NUM>])|([<VOW>])|([<CAP>])\\b"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<VOW>])|([<NUM>])|([<CAP>]).*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<NUM>])|([<LET>])).*([<CAP>]).*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<CAP>]).*(([<VOW>])|([<NUM>])|([<LET>])).*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<NUM>])|([<CAP>])).*([<CAP>]).*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])|([<VOW>])|([<CAP>])).*([<CAP>]).*"
            },
            {
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])|([<NUM>])|([<CAP>])).*([<LET>]).*"
            }
        ]
    },
    {
        "sentence": "lines containing <M0> , <M1> , or a lower-case letter",
        "detail": [
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|(<M1>)|([<LOW>]).*"
            },
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*<M0>.*)|(<M1>).*"
            },
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M1>)|(<M0>)|([<LOW>]).*"
            },
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<LOW>])|(<M1>).*"
            },
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.)|(<M0>)|([<LOW>]).*"
            },
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LET>])|(<M0>)|(<M1>).*"
            },
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*<M0>.*)|([<LOW>]).*"
            },
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LOW>])|(<M0>)|(<M1>).*"
            },
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)|(<M0>)|([<LOW>]).*"
            },
            {
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LET>])|(<M0>)|([<LOW>]).*"
            }
        ]
    },
    {
        "sentence": "lines with the string <M0> or number before string <M1>",
        "detail": [
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<NUM>]).*"
            },
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|(<M1>)).*([<NUM>]).*"
            },
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M1>)|([<NUM>])).*"
            },
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)|(([<NUM>]).*(<M1>).*)"
            },
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<NUM>])|(<M1>)).*"
            },
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|(([<NUM>]).*(<M1>).*))*"
            },
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|(([<NUM>]).*(<M1>).*)"
            },
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*((<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|(([<NUM>]).*(<M1>).*))+"
            }
        ]
    },
    {
        "sentence": "lines ending with a number",
        "detail": [
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)([<NUM>])"
            },
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(([<NUM>])+)"
            },
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(.*[<NUM>].*)"
            },
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.*)([<NUM>]).*"
            },
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)(.*[<NUM>].*))+"
            },
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(\\b([<NUM>])+\\b)"
            },
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)(\\b([<NUM>])*\\b)"
            },
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*)([<NUM>].*[<NUM>].*)"
            },
            {
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>])).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "line where 1 of 3 <U> comes after the string <U> the string <M1> , a capital letter , or the string <M2>",
        "detail": [
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M1>)|([<CAP>])|(<M0>).*"
            },
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+((<M1>)|([<CAP>])|(<M0>)).*"
            },
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>)|([<CAP>])|(<M1>).*"
            },
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+((<M0>)|([<CAP>])|(<M1>)).*"
            },
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M1>)|([<CAP>])|(<M2>)).*"
            },
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*(<M2>).*"
            },
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M1>)|([<CAP>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<CAP>])|(<M1>)).*([<NUM>]).*"
            },
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<CAP>])|(<M2>)).*([<NUM>]).*"
            },
            {
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<CAP>])|([<NUM>])).*(<M1>).*"
            }
        ]
    },
    {
        "sentence": "lines with <M0> a letter before a number",
        "detail": [
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*([<LET>]).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])+).*([<NUM>]).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*([<NUM>]).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])+).*(<M0>).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<LET>].*[<NUM>].*).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)(.*)).*([<NUM>]).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<LET>])).*([<NUM>]).*"
            },
            {
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])|(<M0>)).*([<NUM>]).*"
            }
        ]
    },
    {
        "sentence": "lines with words and containing a number",
        "detail": [
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<NUM>])+\\b"
            },
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<NUM>])*\\b"
            },
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*[<NUM>].*\\b"
            },
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*([<NUM>])+.*\\b"
            },
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<NUM>])(.*)\\b"
            },
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.*[<NUM>].*)+\\b"
            },
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<NUM>].*[<NUM>].*\\b"
            },
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b([<NUM>])+\\b.*"
            },
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(.*[<NUM>].*)*\\b"
            },
            {
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b.*[<NUM>].*\\b)*"
            }
        ]
    },
    {
        "sentence": "lines with a number",
        "detail": [
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<NUM>].*"
            },
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>])+"
            },
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*)*"
            },
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*)+"
            },
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<NUM>])+.*"
            },
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<NUM>])|([<CAP>]).*"
            },
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])+)|(.*[<CAP>].*)"
            },
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*((.*)([<LET>])).*"
            },
            {
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*(.*[<LET>].*).*"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>])+"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*)+"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<NUM>].*"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<NUM>])+.*"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*)*"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])+)|(.*[<CAP>].*)"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<NUM>])|([<CAP>]).*"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*(.*[<LET>].*).*"
            },
            {
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*((.*)([<LET>])).*"
            }
        ]
    },
    {
        "sentence": "lines that contain the string <M0> before <M1> 3 times or more",
        "detail": [
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*){3,}"
            },
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*<M1>.*){3,}"
            },
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)*).*(<M1>).*"
            },
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((<M1>){3,}).*"
            },
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){3,}).*(<M1>).*"
            },
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>).*){3,}"
            },
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M1>).*((<M0>){3,}).*"
            },
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>.*<M1>.*){3,}.*"
            },
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(<M0>).*((<M1>){3,}).*"
            },
            {
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*((<M1>){3,}).*"
            }
        ]
    },
    {
        "sentence": "lines with a lower-case letter and number",
        "detail": [
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<LOW>].*"
            },
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "[<LOW>].*[<NUM>].*"
            },
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*[<NUM>].*)+"
            },
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<LOW>].*[<NUM>].*"
            },
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*[<NUM>].*)*"
            },
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*([<NUM>]).*"
            },
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|([<NUM>]))+"
            },
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(([<NUM>])+).*"
            },
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(.*[<NUM>].*).*"
            },
            {
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*).*([<NUM>]).*"
            }
        ]
    },
    {
        "sentence": "lines that have a letter after a character at least once",
        "detail": [
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+"
            },
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(..*[<LET>].*)+"
            },
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+((.)+).*"
            },
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+(([<LET>])+).*"
            },
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+(([<LET>])*).*"
            },
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.)+).*([<LET>]).*"
            },
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+((.*)([<LET>])).*"
            },
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+(([<LET>]){2,}).*"
            },
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(..*[<LET>].*).*((<M0>)+).*"
            },
            {
                "truth": "(.)+(([<NUM>])+).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*((.)+).*"
            }
        ]
    },
    {
        "sentence": "lines with words and a capital letter before a number",
        "detail": [
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<CAP>].*[<NUM>].*\\b"
            },
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*[<CAP>].*[<NUM>].*\\b"
            },
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>].*[<NUM>].*)+\\b"
            },
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b[<CAP>].*[<NUM>].*\\b)+"
            },
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b[<CAP>].*[<NUM>].*\\b)*"
            },
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>]).*([<NUM>]).*\\b"
            },
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b[<CAP>].*[<NUM>].*\\b.*"
            },
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<CAP>].*[<NUM>].*).*\\b"
            },
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(\\b([<CAP>]).*([<NUM>]).*\\b)+"
            },
            {
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*\\b([<CAP>]).*([<NUM>]).*\\b.*"
            }
        ]
    },
    {
        "sentence": "lines with vowel then a character",
        "detail": [
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*..*)+"
            },
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "[<VOW>].*..*"
            },
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<VOW>].*..*"
            },
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*..*).*"
            },
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])+).*(.)+"
            },
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(.)+"
            },
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*..*)(.*)"
            },
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*).*(.)+"
            },
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*..*).*(<M0>).*"
            },
            {
                "truth": "([<VOW>].*..*)*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>])(.*)).*(.)+"
            }
        ]
    },
    {
        "sentence": "lines with a letter followed by a character",
        "detail": [
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "[<LET>].*..*"
            },
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<LET>].*..*"
            },
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(.)+"
            },
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*..*)+"
            },
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+([<LET>]).*"
            },
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*..*).*"
            },
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<LET>].*..*\\b"
            },
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*..*).*([<LET>]).*"
            },
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*..*).*(.)+"
            },
            {
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*..*).*([<NUM>]).*"
            }
        ]
    },
    {
        "sentence": "lines containing a vowel before with or without a lower-case letter or the string <M0>",
        "detail": [
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*[<VOW>].*)|((<M0>)*)"
            },
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((([<LOW>])*)|(<M0>)).*"
            },
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]).*([<VOW>]).*)|((<M0>)*)"
            },
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(((<M0>)*)|([<LOW>])).*"
            },
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<VOW>]).*([<LOW>]).*)|((<M0>)*)"
            },
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*((([<LOW>])|(<M0>))*).*"
            },
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|(<M0>)).*"
            },
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|([<LET>])).*"
            },
            {
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<VOW>].*).*(([<LOW>])|(<M0>)).*"
            }
        ]
    },
    {
        "sentence": "lines containing a character followed by 3 or more lower-case letters",
        "detail": [
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(..*[<LOW>].*){3,}"
            },
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.)+(([<LOW>]){3,}).*"
            },
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.){3,}.*[<LOW>].*).*"
            },
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(..*[<LOW>].*){3,}.*"
            },
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*..*[<LOW>].*){3,}"
            },
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.){3,}).*([<LOW>]).*"
            },
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b(..*[<LOW>].*){3,}\\b"
            },
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*..*).*(([<LOW>]){3,}).*"
            },
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((..*[<LOW>].*){3,})(.*)"
            },
            {
                "truth": "(([<LOW>]){3,}).*(.)+",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((..*[<LOW>].*){3,}).*([<LOW>]).*"
            }
        ]
    },
    {
        "sentence": "lines where the string <M0> appears 2 or more times followed by either the string <M1> , a vowel , or a letter",
        "detail": [
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>)|([<VOW>])|([<LET>]).*)"
            },
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>).*)|(([<VOW>])|([<LET>]))"
            },
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>){2,})|((<M1>)|([<VOW>])|([<LET>]))"
            },
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>).*)|(([<LET>])|([<VOW>]))"
            },
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>).*)|(([<VOW>])|([<LET>])).*"
            },
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*((<M1>)|([<VOW>])|([<LET>])).*"
            },
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>).*)|(([<LET>])|([<VOW>])){2,}"
            },
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>).*)|(([<VOW>])|([<LET>])){2,}"
            },
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>).*)|(([<LET>])|([<VOW>])|([<LET>]))"
            },
            {
                "truth": "((<M0>){2,}).*((<M1>)|([<VOW>])|([<LET>])).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*(<M1>).*)|((<M1>)|([<VOW>])|([<LET>]))"
            }
        ]
    },
    {
        "sentence": "lines where an alphabet character <U> a , e , i , o or u",
        "detail": [
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<VOW>].*"
            },
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<NUM>].*"
            },
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<LOW>].*"
            },
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*(.)|([<VOW>]).*"
            },
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b.*[<VOW>].*\\b"
            },
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<VOW>].*..*\\b"
            },
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<LET>].*"
            },
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b[<VOW>].*[<LOW>].*\\b"
            },
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<VOW>])|([<LOW>])|(.)\\b"
            },
            {
                "truth": "[<VOW>].*[<LET>].*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<VOW>])|(.)\\b"
            }
        ]
    },
    {
        "sentence": "lines with a number before the string <M0> followed by the string <M1>",
        "detail": [
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])+).*(<M0>.*<M1>.*).*"
            },
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>].*<M0>.*).*(<M1>).*"
            },
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>]).*(<M0>.*<M1>.*).*"
            },
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*<M0>.*).*(<M1>).*"
            },
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])*).*(<M0>.*<M1>.*).*"
            },
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>]).*(<M0>).*).*(<M1>).*"
            },
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<NUM>].*).*(<M0>.*<M1>.*).*"
            },
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>])(.*)).*(<M0>.*<M1>.*).*"
            },
            {
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<NUM>]).*(<M0>).*)|(.*<M1>.*)"
            }
        ]
    },
    {
        "sentence": "<M0> <U> is <U> to do",
        "detail": [
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>)(.*)"
            },
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(.)+"
            },
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<CAP>]).*"
            },
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)|([<CAP>]))+"
            },
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((.)+).*"
            },
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*((.)*).*"
            },
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<NUM>])+).*"
            },
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<CAP>])+).*"
            },
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(.*[<CAP>].*).*"
            },
            {
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*<M0>.*).*([<CAP>]).*"
            }
        ]
    },
    {
        "sentence": "lines with a lower-case letter at least twice before a vowel",
        "detail": [
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*[<VOW>].*)+"
            },
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]){2,}).*(.)+"
            },
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>].*[<VOW>].*){2,}"
            },
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]){2,}).*([<VOW>]).*"
            },
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>]).*(([<VOW>]){2,}).*"
            },
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<LOW>]){2,})|([<VOW>]))(.*)"
            },
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*).*(([<VOW>]){2,}).*"
            },
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((.*[<LOW>].*){2,}).*([<VOW>]).*"
            },
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>].*[<VOW>].*)+).*([<VOW>]).*"
            },
            {
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>].*[<VOW>].*){2,}).*([<VOW>]).*"
            }
        ]
    },
    {
        "sentence": "items with <M0> preceding a vowel preceding a numeral .",
        "detail": [
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<VOW>].*).*([<VOW>]).*"
            },
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "<M0>.*[<VOW>].*[<NUM>].*"
            },
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<VOW>].*).*([<NUM>]).*"
            },
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<VOW>].*[<NUM>].*).*"
            },
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<VOW>].*).*([<LET>]).*"
            },
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<VOW>]).*(<M0>.*[<NUM>].*).*"
            },
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<NUM>].*<M0>.*).*([<VOW>]).*"
            },
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<VOW>]).*([<NUM>]).*).*"
            },
            {
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(.*[<VOW>].*[<NUM>].*).*"
            }
        ]
    },
    {
        "sentence": "lines with a letter before <M0>",
        "detail": [
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*<M0>.*)+"
            },
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<LET>].*<M0>.*"
            },
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LET>]).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])+).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>]).*((<M0>)+).*"
            },
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LET>].*).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*<M0>.*).*(<M0>).*"
            },
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LET>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LET>])(.*)).*(<M0>).*"
            }
        ]
    },
    {
        "sentence": "lines with at least 1 lower-case letter",
        "detail": [
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "([<LOW>])+"
            },
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "[<LOW>].*"
            },
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*[<LOW>].*"
            },
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])+)+"
            },
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(.*[<LOW>].*)+"
            },
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": ".*([<LOW>])+.*"
            },
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "\\b([<LOW>])+\\b"
            },
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|([<LET>]))+"
            },
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])+)|(.*[<LET>].*)"
            },
            {
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])+)|([<LET>])"
            }
        ]
    },
    {
        "sentence": "lines stating with 5 or more lower-case letters or vowels",
        "detail": [
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]){5,})|([<VOW>])"
            },
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|([<VOW>])){5,}"
            },
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<LOW>])|([<VOW>])){5,})(.*)"
            },
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<LOW>]){5,})|([<VOW>]))(.*)"
            },
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]){5,})|(([<VOW>])(.*))"
            },
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<LOW>])|([<VOW>])){5,})|([<LET>])"
            },
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>]){5,})|(([<VOW>]){5,})"
            },
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(([<LOW>])|(([<VOW>]){5,}))(.*)"
            },
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<LOW>])(.*))|([<VOW>])){5,}"
            },
            {
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((([<LOW>]){5,})|([<VOW>])){5,}"
            }
        ]
    },
    {
        "sentence": "lines with the string <M0> before a number before string <M1>",
        "detail": [
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*(([<NUM>])+).*"
            },
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*(([<NUM>])+).*"
            },
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>.*[<NUM>].*).*(<M1>).*"
            },
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "(<M0>).*([<NUM>].*<M1>.*).*"
            },
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>)+).*([<NUM>].*<M1>.*).*"
            },
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>.*[<NUM>].*)+).*(<M1>).*"
            },
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*([<NUM>]).*)|(<M1>).*"
            },
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*([<NUM>]).*).*(<M1>).*"
            },
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*([<NUM>]).*)|(.*<M1>.*)"
            },
            {
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "file_name": "dfa_1_layer_beam_search_10_84.txt",
                "dfa_equality": 0,
                "score": 0,
                "prediction": "((<M0>).*([<NUM>]).*)|((<M1>)+)"
            }
        ]
    }
]