[
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>.*[<CAP>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": ".*(<M0>).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>).*(([<CAP>])+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>).*(.*[<CAP>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)*).*([<CAP>]).*",
                "prediction": "(<M0>).*([<CAP>].*[<CAP>].*).*"
            }
        ],
        "sentence": "lines with the string <M0> before a capital letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<LOW>])|(<M2>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)|([<LOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>.*<M1>.*)|(([<LOW>])|([<LOW>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "((<M0>).*(<M1>).*)|(([<LOW>])|([<LOW>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*((<M1>)|(<M2>)|([<LOW>])).*",
                "prediction": "(<M0>).*((<M1>)|([<LOW>])|([<LOW>])).*"
            }
        ],
        "sentence": "lines with the string <M0> before <M1> or <M2> or a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": ".*(.)+(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(.)+(.*<M0>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(.)+((<M0>)+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "((.)+).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*).*((<M0>)*).*",
                "prediction": "(.)+((.*<M0>.*)+).*"
            }
        ],
        "sentence": "lines with a character before <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "\\b(<M0>)*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "(\\b<M0>\\b)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "\\b.*(<M0>)*\\b.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "\\b(.*<M0>.*)*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)*\\b).*(.)+",
                "prediction": "(\\b.*<M0>.*\\b)*"
            }
        ],
        "sentence": "lines with words and zero or more of the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": ".*([<CAP>])|([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "(.*[<CAP>].*)|(([<NUM>]){2,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": ".*(([<CAP>])|([<NUM>]))+.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "(.*[<CAP>].*)|(([<NUM>])*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>]).*",
                "prediction": "(.*[<CAP>].*)|(([<NUM>]){4,})"
            }
        ],
        "sentence": "lines containing capital letters or numbers"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "((.*)(<M0>))|([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "((<M0>)|([<VOW>])){4,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "(((<M0>)|([<VOW>])){4,})(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "((.*)((<M0>)|([<VOW>]))){4,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*(<M0>)|([<VOW>]).*){4,}",
                "prediction": "(.*((<M0>)|([<VOW>])){4,}).*"
            }
        ],
        "sentence": "lines where either the string <M0> or a vowel appear 4 or more times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "(([<VOW>])|([<LET>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": ".*([<VOW>])|([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "\\b([<VOW>])|([<LET>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": "(.*[<VOW>].*)|(([<LET>])+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<VOW>])|([<LET>]).*",
                "prediction": ".*([<VOW>])|([<CAP>]).*"
            }
        ],
        "sentence": "lines with a vowel or letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "\\b([<LET>])+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "\\b.*[<LET>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "\\b.*([<LET>])+.*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": "\\b([<LET>])|([<CAP>])+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<LET>])|([<LOW>])\\b",
                "prediction": ".*\\b([<LET>])+\\b.*"
            }
        ],
        "sentence": "lines with words and a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(.*[<VOW>].*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "([<VOW>].*<M0>.*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "((.*[<VOW>].*)(.*))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(([<VOW>])(.*)).*((<M0>)*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*)|((<M0>)(.*))",
                "prediction": "(([<VOW>])(.*)).*((<M0>)+).*"
            }
        ],
        "sentence": "lines with a vowel starting with the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*(.)+",
                "prediction": "..*<M0>.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(<M0>).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(<M0>).*(.*..*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(<M0>.*..*).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*(.)+",
                "prediction": "(<M0>.*..*)+"
            }
        ],
        "sentence": "lines wherein a character is preceded by the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b([<VOW>])+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b.*([<VOW>])+.*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b\\b([<VOW>])+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<VOW>])*\\b",
                "prediction": "\\b(.*[<VOW>].*)+\\b"
            }
        ],
        "sentence": "the lines that contain words words that also have a vowel at least 1 time"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>.*[<CAP>].*)(.*))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "(<M0>.*[<CAP>].*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "(\\b<M0>.*[<CAP>].*\\b)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>)(.*)).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*[<LET>].*)(.*)).*([<CAP>]).*",
                "prediction": "((<M0>).*([<CAP>]).*)(.*)"
            }
        ],
        "sentence": "lines starting with <M0> followed by a capital"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "\\b.*[<LOW>].*[<CAP>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "\\b[<CAP>].*[<LOW>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "\\b[<LOW>].*[<CAP>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "(\\b[<LOW>].*[<CAP>].*\\b)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(\\b.*[<CAP>].*\\b).*",
                "prediction": "\\b([<LOW>]).*([<CAP>]).*\\b"
            }
        ],
        "sentence": "lines with words containing a capital letter after a lower case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "((.*)([<NUM>].*<M0>.*))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "(.*)([<NUM>].*<M0>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "(.*)(.*[<NUM>].*<M0>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": ".*(.*)([<NUM>].*<M0>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>].*<M0>.*))*",
                "prediction": "(.*)(\\b[<NUM>].*<M0>.*\\b)"
            }
        ],
        "sentence": "lines ending with a number then <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "(.*)(<M0>.*[<NUM>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "(.*)(.*[<NUM>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": ".*(<M0>).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "(.*)(.*<M0>.*[<NUM>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>).*([<NUM>]).*\\b)",
                "prediction": "((.*)(<M0>)).*([<NUM>]).*"
            }
        ],
        "sentence": "lines finishing with the string <M0> followed by a number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "(<M0>).*((<M1>){3,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "(<M0>.*<M1>.*){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "(.*<M0>.*<M1>.*){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": ".*(<M0>.*<M1>.*){3,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(\\b(<M1>){3,}\\b).*",
                "prediction": "(.*<M0>.*).*((<M1>){3,}).*"
            }
        ],
        "sentence": "lines that contain the string <M0> before <M1> 3 times or more"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|([<LET>]))*",
                "prediction": "((.)|([<CAP>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|([<LET>]))*",
                "prediction": "((.)|([<LET>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|([<LET>]))*",
                "prediction": "(.*(.)|([<LET>]).*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|([<LET>]))*",
                "prediction": "(.)+(([<LET>])|([<CAP>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|([<LET>]))*",
                "prediction": ".*((.)|([<LET>]))+.*"
            }
        ],
        "sentence": "lines with a character or letter at least once"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "((<M0>){2,}).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "((<M0>){2,}).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "((<M0>){2,}).*(.*<M1>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "(<M0>).*((<M1>){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>){2,}\\b).*(<M1>).*",
                "prediction": "(((<M0>){2,})|(<M1>)).*(<M1>).*"
            }
        ],
        "sentence": "lines with the string <M0> at least 2 times and comes before the string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "([<LOW>].*[<VOW>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "(([<LOW>]){2,}).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "(([<LOW>]){2,}).*(.*[<VOW>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "(([<LOW>].*[<VOW>].*){2,}).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*){2,}",
                "prediction": "([<LOW>].*[<VOW>].*).*(([<VOW>]){2,}).*"
            }
        ],
        "sentence": "lines with a lower-case letter at least twice before a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>).*(([<NUM>])|([<LET>])|([<VOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>).*(([<LET>])|([<NUM>])|([<VOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "((<M0>)+).*(([<LET>])|([<NUM>])|([<VOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "((<M0>).*([<LET>]).*)|(([<NUM>])|([<VOW>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<LET>])|([<NUM>])|([<VOW>])).*",
                "prediction": "(<M0>.*[<LET>].*).*(([<LET>])|([<NUM>])|([<VOW>])).*"
            }
        ],
        "sentence": "lines with the string <M0> before a letter , number , or vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>])(.*))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>])*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>].*[<LET>].*)*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "([<LOW>].*[<LET>].*)((.*)([<LET>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])*)(.*)).*([<LET>]).*",
                "prediction": "(([<LOW>].*[<LET>].*)(.*))*"
            }
        ],
        "sentence": "lines starting with zero or more of a lower-case letter with a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "(.)+(([<LET>])|([<NUM>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "((.)|([<LET>])).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "((.)|([<LET>])|([<LOW>])).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "((.)|([<LET>])|([<LET>])).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.)|(([<LET>]).*([<NUM>]).*).*",
                "prediction": "((.)|([<LET>])|([<NUM>])).*([<NUM>]).*"
            }
        ],
        "sentence": "lines with a character or a letter , followed by a number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "(([<NUM>])|([<VOW>])).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "(([<NUM>])|([<VOW>])).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "(([<NUM>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<NUM>])|([<VOW>]).*",
                "prediction": "(([<NUM>])|([<VOW>])).*([<LET>]).*"
            }
        ],
        "sentence": "the string <M0> a number or a vowel appears in the lines"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*<M0>.*)*",
                "prediction": ".*..*<M0>.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*<M0>.*)*",
                "prediction": "\\b..*<M0>.*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*<M0>.*)*",
                "prediction": "(.)+(.*<M0>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*<M0>.*)*",
                "prediction": "(..*<M0>.*).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*..*<M0>.*)*",
                "prediction": ".*(..*<M0>.*).*([<CAP>]).*"
            }
        ],
        "sentence": "lines containing a character followed by a string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "[<LET>].*<M0>.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>)*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>)|([<CAP>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*).*(<M0>).*",
                "prediction": "([<LET>]).*((.*)(<M0>)).*"
            }
        ],
        "sentence": "items with a letter preceding <M0> ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": ".*<M0>.*<M1>.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(.*)(<M0>.*<M1>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(<M0>.*<M1>.*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(.*<M0>.*).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*)).*((<M1>)*).*",
                "prediction": "(<M0>.*<M1>.*)(.*)"
            }
        ],
        "sentence": "lines where the string <M0> is not followed by the string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": ".*(<M0>).*(([<LET>]){3,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "(<M0>.*[<LET>].*){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "((<M0>){3,}).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "(<M0>).*(([<LET>]){3,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>).*([<LET>]).*)|(([<LOW>]){3,})",
                "prediction": "(.*<M0>.*).*(([<LET>]){3,}).*"
            }
        ],
        "sentence": "lines with 3 or more of the string <M0> before a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "..*[<CAP>].*",
                "prediction": ".*[<CAP>].*..*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "..*[<CAP>].*",
                "prediction": ".*([<CAP>]).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "..*[<CAP>].*",
                "prediction": "(.*[<CAP>].*).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "..*[<CAP>].*",
                "prediction": "([<CAP>]).*(.*..*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "..*[<CAP>].*",
                "prediction": "\\b([<CAP>]).*(.)+\\b"
            }
        ],
        "sentence": "lines containing a capital letter before a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "([<VOW>]).*(([<LOW>])*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])|([<LOW>])).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])*)|(.*[<LOW>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(.*[<VOW>].*[<LOW>].*)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*[<LOW>].*)*",
                "prediction": "(([<VOW>])|([<LET>])).*([<LOW>]).*"
            }
        ],
        "sentence": "lines with no or multiple vowels followed by a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(.*<M0>.*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": ".*(<M0>).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*(([<CAP>])+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*(\\b([<LET>])+\\b).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|(<M0>)).*([<LET>]).*",
                "prediction": "(<M0>).*(.*[<CAP>].*).*"
            }
        ],
        "sentence": "<M0> <U> is <U> to do"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*((([<LOW>])|(<M0>))*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|([<LET>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|(<M1>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|(<M0>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>].*[<LOW>].*)|(<M0>))*",
                "prediction": "([<VOW>]).*((([<LOW>])|(<M0>)|(<M0>))).*"
            }
        ],
        "sentence": "lines containing a vowel before with or without a lower-case letter or the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "((.*)([<CAP>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "(.*[<LET>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>])).*(([<LET>])*).*",
                "prediction": "((.*)([<LET>])).*((<M0>)+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "(.*[<LET>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "((.*)([<CAP>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|([<NUM>]))(.*))*",
                "prediction": "((.*)([<LET>])).*((<M0>)+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "(.*[<LET>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "((.*)([<CAP>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|(<M1>)))*",
                "prediction": "((.*)([<LET>])).*((<M0>)+).*"
            }
        ],
        "sentence": "all lines"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(.){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(..*[<VOW>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(.*..*).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": "(.){2,}.*[<VOW>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<VOW>]){2,}).*",
                "prediction": ".*(.){2,}.*"
            }
        ],
        "sentence": "lines containing 2 characters preceding a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)(.*<M0>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)(<M0>.*[<VOW>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)([<VOW>].*<M0>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)((<M0>)|([<VOW>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*[<VOW>].*))*",
                "prediction": "(.*)(.*<M0>.*[<VOW>].*)"
            }
        ],
        "sentence": "lines that end with <M0> and a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "((<M0>)|([<LET>]))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "(.*<M0>.*)|(([<LET>])+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "((<M0>)|([<LET>]))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "((<M0>)|([<LET>])).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<LET>])|(<M0>))",
                "prediction": "((<M0>)|([<LET>])).*([<NUM>]).*"
            }
        ],
        "sentence": "lines concluding with the <M0> string or concluding with a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "(.*)((([<LET>])|([<VOW>])){2,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "(.*)((([<VOW>])|([<LET>])){2,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "((.*)(([<VOW>])|([<LET>]))){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "(.*)((([<VOW>]){2,})|([<LET>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<VOW>]))|(([<LET>]){2,})",
                "prediction": "((.*)([<LET>]))|(([<VOW>]){2,})"
            }
        ],
        "sentence": "lines ending in 2 or more of a vowel or letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": ".*[<LOW>].*<M0>.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "([<LOW>]).*(.*<M0>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "([<LOW>]).*((.*)(<M0>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((.*<M0>.*)*).*",
                "prediction": "([<LOW>].*<M0>.*).*([<CAP>]).*"
            }
        ],
        "sentence": "lines with a lower-case letter before <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(.*<M1>.*)|(<M0>)\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(<M1>)|(<M0>)|([<LOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(<M1>)|([<LOW>])|(<M0>)\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b(<M0>)|(<M1>)|([<LOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M1>)|([<LOW>])|(<M0>)\\b.*",
                "prediction": "\\b([<VOW>])|(<M1>)|(<M0>)\\b"
            }
        ],
        "sentence": "items with words containing <M0> , <M1> , or a small letter ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((<M0>){2,})|([<CAP>])"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "\\b((<M0>){2,})|([<CAP>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "(.*(<M0>){2,}.*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((<M0>){2,})|(([<CAP>]){2,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])){2,}",
                "prediction": "((<M0>){2,})|(.*[<CAP>].*)"
            }
        ],
        "sentence": "lines containing the string <M0> 2 times or a capital letter 2 times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "([<VOW>].*<M0>.*)|((.)|([<LOW>]))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)|([<LOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "([<VOW>]).*(((<M0>)|(.)|([<LOW>])))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "([<VOW>]).*(((<M0>)|(.)|([<LOW>]))).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])*).*((<M0>)|(.)|([<LOW>])).*",
                "prediction": "(([<VOW>]).*(<M0>).*)|((.)|([<LOW>]))"
            }
        ],
        "sentence": "lines with a zero or more of a vowel before string <M0> , character , or lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "([<CAP>].*[<VOW>].*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "(([<CAP>])(.*)).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "([<CAP>]).*((.*)([<VOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "(([<CAP>])(.*)).*(([<VOW>])+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])+)|(([<VOW>])(.*))",
                "prediction": "(.*[<CAP>].*).*(([<VOW>])+).*"
            }
        ],
        "sentence": "lines with a capital letter and stating with a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b(<M0>){5,}\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b(.*<M0>.*){5,}\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b((<M0>){5,})(.*)\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "(\\b(<M0>){5,}\\b)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>\\b){5,}",
                "prediction": "\\b((<M0>){5,})|(<M1>)\\b"
            }
        ],
        "sentence": "items with words containing just <M0> at least 5 times ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "(([<VOW>])|([<CAP>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "\\b([<VOW>])|([<CAP>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": ".*([<VOW>])|([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": ".*([<CAP>])|([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|([<CAP>])){3,}",
                "prediction": "(.*[<VOW>].*)|(([<CAP>])+)"
            }
        ],
        "sentence": "lines that have a vowel or capital letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "(.*)(([<LOW>])|([<LOW>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "(.*)((([<NUM>])|([<LOW>]))+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": "(.*)(([<NUM>])|([<LOW>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": ".*(.*)(([<NUM>])|([<LOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(.*([<NUM>])|([<LOW>]).*)",
                "prediction": ".*((.*)([<NUM>]))|([<LOW>]).*"
            }
        ],
        "sentence": "lines ending with numeral or lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "([<LOW>]){5,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(.*[<LOW>].*){5,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": ".*([<LOW>]){5,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(([<LOW>]){5,}).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){5,})(.*)",
                "prediction": "(([<LOW>])|([<LET>])){5,}"
            }
        ],
        "sentence": "items with a small letter at least 5 times ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "[<LET>].*..*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": ".*[<LET>].*..*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "([<LET>].*..*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "([<LET>]).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*..*).*([<CAP>]).*",
                "prediction": "([<LET>].*..*).*(.)+"
            }
        ],
        "sentence": "lines with a letter followed by a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "(..*[<LOW>].*){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "(.)+(([<LOW>]){3,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "(.*..*[<LOW>].*){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": ".*(..*[<LOW>].*){3,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>]){3,}).*(.)+",
                "prediction": "(.*..*).*(([<LOW>]){3,}).*"
            }
        ],
        "sentence": "lines containing a character followed by 3 or more lower-case letters"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*([<VOW>])|(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*([<VOW>]).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*(.)|([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*([<VOW>])|([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "[<VOW>].*[<LET>].*",
                "prediction": ".*([<VOW>])|([<CAP>]).*"
            }
        ],
        "sentence": "lines where an alphabet character <U> a , e , i , o or u"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "(([<NUM>].*[<LOW>].*)*)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "([<NUM>].*[<LOW>].*)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "([<NUM>]).*(([<LOW>])*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "(([<NUM>])*).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<NUM>].*)*",
                "prediction": "(([<NUM>])*).*(.*[<LOW>].*).*"
            }
        ],
        "sentence": "lines with a number , zero or more times followed by a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "(.*)((<M0>)|(<M1>))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "(.*)(((<M0>)|(<M1>))+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": ".*(.*)((<M0>)|(<M1>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "(.*)(\\b(<M0>)|(<M1>)\\b)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*((.*)(<M0>))|(<M1>).*",
                "prediction": "(.*)((.*<M0>.*)|(<M1>))"
            }
        ],
        "sentence": "lines ending with the string <M0> or the string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "([<NUM>]).*(<M0>.*[<LET>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "([<NUM>].*<M0>.*).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "(([<NUM>])+).*(<M0>.*[<LET>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "(([<NUM>].*<M0>.*)+).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<NUM>].*).*(<M0>.*[<LET>].*).*",
                "prediction": "([<NUM>].*<M0>.*).*(.*[<LET>].*).*"
            }
        ],
        "sentence": "lines with a number before string <M0> then a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "(.*)(.*<M0>.*<M1>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "((.*)(<M0>)).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "(.*)(<M0>.*<M1>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "(.*)((<M0>.*<M1>.*)|(<M1>))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)(<M0>.*<M1>.*))*",
                "prediction": "((.*)(<M0>)).*((<M1>)*).*"
            }
        ],
        "sentence": "items terminating with <M0> preceding <M1> ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "\\b(<M0>)|([<VOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "\\b.*(<M0>)|([<VOW>]).*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": ".*\\b(<M0>)|([<VOW>])\\b.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": "\\b(.*<M0>.*)|([<VOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<VOW>])\\b)+",
                "prediction": ".*\\b(<M0>)|([<VOW>]).*\\b"
            }
        ],
        "sentence": "lines with words and string <M0> or vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*))|(.*<M1>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*))|((.*)(<M1>))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*)).*((.*)(<M1>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*<M1>.*)(.*)).*([<VOW>]).*",
                "prediction": "((<M0>)(.*)).*((<M1>)+).*"
            }
        ],
        "sentence": "lines starting with the string <M0> with string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": ".*([<LOW>])+.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "(.*[<LOW>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "([<LOW>])+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "(([<LOW>])+)|(.*[<CAP>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>])+\\b)(.*)",
                "prediction": "([<LOW>].*[<LET>].*)+"
            }
        ],
        "sentence": "lines with at least 1 lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(.*[<LOW>].*<M0>.*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "([<LOW>].*<M0>.*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "(([<LOW>])+).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": "([<LOW>]).*((<M0>)+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*<M0>.*)*",
                "prediction": ".*([<LOW>].*<M0>.*)+.*"
            }
        ],
        "sentence": "lines that have a lower-case letter followed by the string <M0> , at least 1 time"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "(<M0>){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": ".*(<M0>){3,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "((.*)(<M0>)){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "(.*<M0>.*){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<NUM>]){3,}).*",
                "prediction": "((<M0>){3,}).*(.)+"
            }
        ],
        "sentence": "lines with 3 or more of the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "((.)|(<M0>)|(<M1>)).*(<M2>)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "(.*(<M0>)|(<M1>)|(<M2>).*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "((.)|(<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "((<M0>)|(<M1>)|(<M2>)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|(<M1>.*<M2>.*)",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*(<M2>).*"
            }
        ],
        "sentence": "lines containing at least 1 instance <U> the string <M0> , or the string <M1> preceding the string <M2>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(([<LET>])(.*)).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "([<LET>].*<M0>.*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(([<LET>])|(<M0>))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(([<LET>])(.*)).*((<M0>)*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LET>].*)|((<M0>)(.*))",
                "prediction": "(([<LET>])(.*)).*((<M0>){2,}).*"
            }
        ],
        "sentence": "line with letters starting with the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "([<CAP>])(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "(([<CAP>])(.*))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "([<CAP>].*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "([<CAP>]).*((.*)([<NUM>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])(.*))|((.*)([<LOW>]))",
                "prediction": "(([<CAP>])(.*)).*((.*)([<NUM>])).*"
            }
        ],
        "sentence": "lines that begin with a capital and end with a lowercase"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "(.*)((([<LET>])|([<VOW>]))+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "(.*)(([<LET>])|([<VOW>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "(.*)(([<LET>])|(([<VOW>])+))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": "((.*)([<LET>]))|(([<VOW>])+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)((([<CAP>])+)|([<VOW>]))",
                "prediction": ".*(.*)(([<LET>])|([<VOW>])).*"
            }
        ],
        "sentence": "lines ending with a letter or vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<LET>])|(<M0>)|([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*(<M0>)|([<LET>])|([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": ".*([<VOW>])|(<M0>)|([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "\\b(<M0>)|([<LET>])|([<VOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<LET>])|(<M0>).*",
                "prediction": "\\b([<LET>])|(<M0>)|([<VOW>])\\b"
            }
        ],
        "sentence": "items with <M0> , a letter , or a vowel ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": ".*[<LOW>].*[<NUM>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "([<LOW>].*[<NUM>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "([<LOW>]).*(([<NUM>])+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "([<LOW>]).*(.*[<NUM>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<NUM>]).*(([<LOW>]){3,}).*",
                "prediction": "(.*[<LOW>].*).*([<NUM>]).*"
            }
        ],
        "sentence": "lines with a lower-case letter and number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*[<LOW>].*..*",
                "prediction": ".*..*[<LOW>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*[<LOW>].*..*",
                "prediction": ".*(.)+([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*[<LOW>].*..*",
                "prediction": "(.)+([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*[<LOW>].*..*",
                "prediction": "(..*[<LOW>].*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*[<LOW>].*..*",
                "prediction": "(.)+(.*[<LOW>].*).*"
            }
        ],
        "sentence": "lines containing a character that follows a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": ".*(<M0>).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "(.*<M0>.*).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "(<M0>).*(.*[<LET>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "((<M0>)*).*(.*[<LET>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*(.*<M0>.*).*",
                "prediction": "(.*<M0>.*[<LET>].*).*([<NUM>]).*"
            }
        ],
        "sentence": "lines containing the string <M0> with a letter before it"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M1>.*<M0>.*).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": ".*<M0>.*<M1>.*<M2>.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(.*<M0>.*<M1>.*).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b<M0>.*<M1>.*\\b).*(<M2>).*",
                "prediction": "(.*<M0>.*).*(<M1>.*<M2>.*).*"
            }
        ],
        "sentence": "lines that have the word <M0> before the word <M1> , which is then followed by the word <M2>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "([<CAP>].*<M0>.*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "(([<CAP>]){2,}).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "\\b(([<CAP>]){2,}).*(<M0>).*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "(\\b([<CAP>]){2,}\\b).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*((<M0>){2,}).*",
                "prediction": "((([<CAP>]){2,})|([<LET>])).*(<M0>).*"
            }
        ],
        "sentence": "lines with a capital letter , <U> at least twice , before the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": ".*([<VOW>])|([<NUM>])|([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": ".*([<NUM>])|([<VOW>])|([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "\\b([<VOW>])|([<NUM>])|([<CAP>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<CAP>])).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<NUM>])|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<NUM>])|([<LET>])).*([<CAP>]).*"
            }
        ],
        "sentence": "items with a vowel , numeral , or upper case letter ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)|(<M1>))(.*)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)(.*))|(<M1>)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)|(<M1>)).*(<M2>).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)|(<M1>)).*(<M1>).*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(<M1>.*<M2>.*))(.*)",
                "prediction": "(((<M0>)|(<M1>)).*(<M2>).*)(.*)"
            }
        ],
        "sentence": "lines starting in string <M0> or <M1> before <M2>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(.)+(([<LET>])+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(..*[<LET>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "((.)+).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<NUM>])+).*",
                "prediction": "(.)+((.*)([<LET>])).*"
            }
        ],
        "sentence": "lines that have a letter after a character at least once"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "(.*)(..*[<LET>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "((.*)(.)).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "(.*)((.*..*)+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "(.*)(.*(.)+([<LET>]).*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((.)+([<CAP>]).*)|([<LET>]))",
                "prediction": "((.*)(.)).*(.*[<LET>].*).*"
            }
        ],
        "sentence": "lines ending in a character before a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(.))*",
                "prediction": "(([<CAP>])|(.)){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(.))*",
                "prediction": "([<CAP>])|((.){4,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(.))*",
                "prediction": "(.*[<CAP>].*)|((.){4,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(.))*",
                "prediction": ".*([<CAP>])|(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(.))*",
                "prediction": "(.*[<CAP>].*)|((.){2,})"
            }
        ],
        "sentence": "multiple lines with capital letters or characters"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|((.*)([<NUM>])))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|((.*)([<NUM>])))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|(.*[<NUM>].*))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|([<NUM>]))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>]))|((<M0>)(.*))",
                "prediction": "((<M0>)|(.*))|((.*)([<NUM>]))"
            }
        ],
        "sentence": "either start with string <M0> or end with any number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>]){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": ".*([<CAP>]){2,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>]).*((.*){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>].*[<VOW>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<CAP>])|([<VOW>]))(.*)){2,}",
                "prediction": "([<CAP>]).*(([<VOW>]){2,}).*"
            }
        ],
        "sentence": "lines containing a capital letter and 2 or more vowels"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": ".*([<VOW>])|([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": "(.*[<VOW>].*)|(([<NUM>])*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": "(.*[<VOW>].*)|(([<NUM>])+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": ".*([<NUM>])|([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>])|(.)+",
                "prediction": "\\b([<VOW>])|([<NUM>])\\b"
            }
        ],
        "sentence": "lines which contain a vowel , number or <U>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>].*[<NUM>].*)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>]).*(([<NUM>])|([<LET>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>]).*((([<NUM>])|([<LET>]))*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>]).*((([<NUM>])*)|([<LET>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>]).*([<NUM>]).*)|([<CAP>]))*",
                "prediction": "([<LOW>]).*(([<NUM>])|(.*[<LET>].*)).*"
            }
        ],
        "sentence": "lines with lower-case letter before number or zero or more of <U> letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(([<NUM>])|([<VOW>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": ".*([<NUM>])|([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(([<NUM>])|([<VOW>]))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "\\b([<NUM>])|([<VOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<VOW>])|([<NUM>]).*",
                "prediction": "(.*[<NUM>].*)|(([<VOW>])+)"
            }
        ],
        "sentence": "lines with a number or a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|(<M0>))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|(<M0>))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|(<M0>)).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|(<M0>)).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|([<CAP>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<CAP>])|(<M0>)).*([<NUM>]).*"
            }
        ],
        "sentence": "items with a vowel or an upper case letter or <M0> ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "(.*)([<NUM>].*[<LET>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "(.*)(([<NUM>].*[<LET>].*)+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "((.*)([<NUM>])).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "((.*)([<NUM>])).*(.*[<LET>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<NUM>])).*(.)+",
                "prediction": "((.*)([<NUM>])).*(([<LET>])+).*"
            }
        ],
        "sentence": "lines ending with a number before a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>].*[<CAP>].*)|(([<LET>])+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>].*[<CAP>].*)|(([<NUM>])+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>].*[<CAP>].*)|(([<LET>])*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "([<LOW>]).*(([<CAP>])|([<LET>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<CAP>].*)|(([<LET>])(.*))",
                "prediction": "(([<LOW>])|([<CAP>])).*([<NUM>]).*"
            }
        ],
        "sentence": "lines with a lower-case letter followed by a capital letter or any letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "((<M0>)|([<LOW>])|(<M1>)).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "(([<LET>])|([<LOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "(([<LET>])|(<M0>)|([<LOW>])).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "(([<LOW>])|(<M0>)|([<LET>])).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>]).*((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "((<M0>)|([<LET>])|([<LOW>])).*([<VOW>]).*"
            }
        ],
        "sentence": "lines in which a <M0> string , a letter that's lower-case , or a <M1> string are preceded by a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": ".*<M0>.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": ".*(<M0>)+.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": ".*(<M0>)*.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b(<M0>)(.*)\\b.*",
                "prediction": "\\b.*(<M0>)+\\b.*"
            }
        ],
        "sentence": "lines containing the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b(<M0>)|([<LOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b([<LOW>])|(<M0>)\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b((<M0>)|([<LOW>]))+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b.*(<M0>)|([<LOW>]).*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(<M0>)|(.*[<LOW>].*)\\b",
                "prediction": "\\b(.*<M0>.*)|([<LOW>])\\b"
            }
        ],
        "sentence": "lines with words and <M0> or lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": ".*([<VOW>])|(<M0>)|(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": ".*([<VOW>]).*(<M0>)|(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "([<VOW>]).*((<M0>)|(.)|([<LET>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "([<VOW>]).*(([<VOW>])|(<M0>)|(.)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>)|(.)|([<VOW>]).*",
                "prediction": "(([<VOW>])|(<M0>)|(.)).*(.)+"
            }
        ],
        "sentence": "lines with a vowel , the string <M0> , and a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "((<M0>)|(<M1>)|(<M2>)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "((<M0>)|(<M1>)|(<M1>)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "((<M1>)|(<M0>)|(<M2>)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": ".*((<M0>)|(<M1>)|(<M2>)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M2>)|(<M1>)).*",
                "prediction": "(.*(<M0>)|(<M1>)|(<M2>).*).*(<M2>).*"
            }
        ],
        "sentence": "lines containing the strings <M0> and <M1> , or before the string <M2> ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "((.*)([<LOW>])).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "(.*)([<LOW>].*[<VOW>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "(.*)(([<LOW>].*[<VOW>].*)+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "(.*)(.*[<LOW>].*[<VOW>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)([<LOW>])).*(([<VOW>])*).*",
                "prediction": "(.*)(.*([<LOW>].*[<VOW>].*)+)"
            }
        ],
        "sentence": "lines ending with a lower-case letter before a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>).*((.)+){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>)).*((.){3,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>.*..*)){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M1>)|(<M0>)).*((.){3,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(((<M0>)|(<M1>)){3,}).*(.)+",
                "prediction": "((<M0>)|(<M1>).*(.)+){3,}"
            }
        ],
        "sentence": "lines containing the string <M0> or the string <M1> before a character at least 3 times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b[<CAP>]\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b([<CAP>])*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b([<CAP>])+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b.*[<CAP>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<CAP>]\\b)",
                "prediction": "\\b[<CAP>].*[<CAP>].*\\b"
            }
        ],
        "sentence": "items with words that have only an upper case letter ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": ".*(<M0>)|(<M1>)|([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": "(.*(<M0>)|(<M1>)|([<VOW>]).*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": "(.*<M0>.*<M1>.*)|(([<VOW>])|([<CAP>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": "((<M0>)|(<M1>)|([<VOW>])).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])|([<VOW>])|(<M0>))|(<M1>)\\b",
                "prediction": ".*((<M0>)|(<M1>)|([<VOW>])).*([<CAP>]).*"
            }
        ],
        "sentence": "lines containing string <M0> , string <M1> , a vowel or a capital letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "([<LET>]){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "(.*[<LET>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": "(([<LET>])|([<CAP>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": ".*([<LET>]){2,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|([<CAP>])){2,}",
                "prediction": ".*([<CAP>]){2,}.*"
            }
        ],
        "sentence": "lines with 2 or more letters"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "(.*)(([<LET>])|([<CAP>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": ".*(.*)([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "(.*)(.*([<LET>]).*([<CAP>]).*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "(.*)(.*[<LET>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b([<LET>])*\\b)",
                "prediction": "((.*)([<LET>]))|((.*)([<LET>]))"
            }
        ],
        "sentence": "lines ending with a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "(([<LOW>])|(<M0>))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "(.*[<LOW>].*)|((<M0>)(.*))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "((([<LOW>])|(<M0>))(.*))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "\\b(([<LOW>])|(<M0>))(.*)\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])|(<M0>))(.*))*",
                "prediction": "((.*[<LOW>].*)|(<M0>))(.*)"
            }
        ],
        "sentence": "lines that begin with a lower-case letter or the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b(.*)([<VOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b(.*)(([<VOW>])|([<LET>]))\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b(.*)(([<VOW>])|(<M0>))\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b(.*)(([<VOW>])|([<NUM>]))\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)([<VOW>])\\b)*",
                "prediction": "\\b((.*)([<VOW>]))|([<LET>])\\b"
            }
        ],
        "sentence": "lines with words ending with vowels , or a zero"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>])|(<M0>)).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LOW>]).*((<M0>)|(<M1>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "([<LOW>].*<M0>.*)|((<M1>)+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(([<LOW>]).*(<M0>).*)|((<M1>)+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*).*((<M0>)|(<M1>)).*",
                "prediction": "(.*[<LOW>].*<M0>.*)|((<M1>)+)"
            }
        ],
        "sentence": "lines with a lower case letter followed by the string <M0> or the string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": ".*<M0>.*[<LOW>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "(<M0>).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": ".*(<M0>).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "(<M0>).*(.*[<LOW>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>]))+",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            }
        ],
        "sentence": "lines with the string <M0> containing only a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "(([<CAP>])|([<VOW>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "([<CAP>])|(([<VOW>]){2,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": ".*(([<CAP>])|([<VOW>])){2,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "([<CAP>]).*((([<CAP>])|([<VOW>])){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*[<CAP>].*)|([<VOW>])){2,}",
                "prediction": "(.*([<CAP>])|([<VOW>]).*){2,}"
            }
        ],
        "sentence": "lines with 2 or more of a capital letter or vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "((([<VOW>])|(<M0>))(.*))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "((([<VOW>])(.*))|(<M0>))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "(([<VOW>])(.*))|((<M0>)(.*))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "((([<VOW>])+)|(<M0>))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])(.*))|(.*<M0>.*)",
                "prediction": "((([<VOW>])|(<M0>))+)(.*)"
            }
        ],
        "sentence": "lines starting in a vowel or with string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "(\\b[<LET>]\\b)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "(\\b[<LET>]\\b)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "(\\b[<LET>]\\b)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": ".*\\b([<LET>])+\\b.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<LET>]\\b)",
                "prediction": "(\\b.*[<LET>].*\\b)*"
            }
        ],
        "sentence": "lines that have only letters in the <U> words ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "(<M0>.*[<NUM>].*).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "((<M0>.*[<NUM>].*)+).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "(<M0>).*([<NUM>].*<M1>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "((<M0>).*([<NUM>].*).*).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*([<NUM>].*<M1>.*).*",
                "prediction": "(<M0>.*[<NUM>].*).*(.*<M1>.*).*"
            }
        ],
        "sentence": "lines with the string <M0> before a number before string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "(([<VOW>])|(<M0>)|(<M1>)).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((.)|(<M0>)|(<M1>)).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "(((.)|(<M0>)|(<M1>))|([<NUM>]))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((<M0>)|(.)|(<M1>)).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.)|(<M0>)|([<NUM>])).*(<M1>).*",
                "prediction": "((.)|(<M0>)|(<M1>)).*(([<NUM>])|(<M1>)).*"
            }
        ],
        "sentence": "lines with a character , the string <M0> , or the string <M1> with a number beforehand ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "((.)|([<CAP>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "(([<CAP>])|([<LOW>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "(([<CAP>])|([<CAP>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": ".*(([<CAP>])|([<LOW>]))+.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LET>])|([<LOW>]))*.*",
                "prediction": "(.*([<CAP>])|([<LOW>]).*)+"
            }
        ],
        "sentence": "the lines that have either a capital letter or lower-case letter at least once"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "\\b<M0>.*[<LET>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "\\b.*<M0>.*[<LET>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "(\\b<M0>.*[<LET>].*\\b)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "\\b.*(<M0>).*([<LET>]).*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>).*([<LOW>]).*)|([<LET>])\\b",
                "prediction": "\\b(<M0>).*([<LET>]).*\\b"
            }
        ],
        "sentence": "lines with words and the string <M0> before a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(<M0>).*((.*)(<M1>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": ".*(<M0>).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(<M0>.*<M1>.*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(.*<M0>.*)|((<M1>)(.*))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|(.*<M1>.*))+",
                "prediction": "(<M0>).*(\\b(<M1>)+\\b).*"
            }
        ],
        "sentence": "lines with the string <M0> with the string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "((.){2,}).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<VOW>]){2,}).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<VOW>]){2,}).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "(([<LET>]){2,}).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>]).*(([<LOW>]){2,}).*",
                "prediction": "((([<VOW>]){2,})|([<LET>])).*([<LOW>]).*"
            }
        ],
        "sentence": "lines with at least 2 vowels before a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])(.*))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(.*[<CAP>].*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(\\b([<CAP>])(.*)\\b)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "([<CAP>].*[<CAP>].*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<CAP>]).*(([<VOW>])|([<NUM>])).*",
                "prediction": "(([<CAP>])(.*)).*(.*[<CAP>].*).*"
            }
        ],
        "sentence": "lines starting with a capital letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)*)|([<CAP>]))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)|([<CAP>]))*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)(.*))|([<CAP>]))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)|([<CAP>]))+)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)(.*))|(([<CAP>])*)",
                "prediction": "(((<M0>)|([<CAP>]))(.*))*"
            }
        ],
        "sentence": "lines starting in zero or more of the string <M0> or capital letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*(([<LOW>])*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*(([<LOW>]){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>].*[<LOW>].*).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*([<LOW>]).*",
                "prediction": "([<CAP>]).*([<LOW>].*[<LET>].*).*"
            }
        ],
        "sentence": "lines with capital letters before lower-case letters"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b([<LET>])|([<NUM>])|([<VOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "\\b([<LOW>])|([<NUM>])|([<VOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": "(\\b([<LET>])|([<NUM>])|([<VOW>])\\b)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.)|([<LET>])|([<NUM>])\\b",
                "prediction": ".*\\b([<LET>])|([<NUM>])|([<VOW>])\\b.*"
            }
        ],
        "sentence": "lines which words contain either of these - letter , number , or vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": ".*(<M0>)+.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": ".*(.*)(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": "(.*<M0>.*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": ".*(.*<M0>.*)+.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<NUM>])|(<M0>))+.*",
                "prediction": ".*(.*<M0>.*).*(<M0>).*"
            }
        ],
        "sentence": "lines containing the string <M0> once"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "((<M0>)|([<NUM>])|(<M1>))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "(([<NUM>])|(<M0>)|(<M1>)).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "((<M0>)|([<NUM>])|(<M1>)).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>)|([<NUM>])|(<M1>)\\b)+",
                "prediction": "(.*(<M0>)|([<NUM>])|(<M1>).*)+"
            }
        ],
        "sentence": "lines with either at least 1 <M0> , number , or <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "(([<NUM>])|(<M0>)).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*<M0>.*)|([<NUM>].*[<VOW>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": ".*((<M0>)|([<NUM>])).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<VOW>])).*([<NUM>]).*",
                "prediction": "(.*(<M0>)|([<NUM>]).*).*([<VOW>]).*"
            }
        ],
        "sentence": "lines containing the string <M0> or a number followed by a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "(<M0>.*[<CAP>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "(<M0>).*(([<CAP>]){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "\\b(<M0>.*[<CAP>].*){2,}\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": ".*(<M0>.*[<CAP>].*){2,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*(([<CAP>]){2,}).*",
                "prediction": "(<M0>).*((.*[<CAP>].*){2,}).*"
            }
        ],
        "sentence": "lines with <M0> followed by 2 or more capital letters"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>)|(<M0>)).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>)).*(<M1>.*<M1>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>)).*((<M1>)|(<M2>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>)).*((<M1>){5,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((<M0>).*(<M1>).*)){5,}",
                "prediction": "(([<NUM>])|(<M0>)).*(<M1>).*"
            }
        ],
        "sentence": "lines with a number or the string <M0> before the string <M1> , 5 or more times in it"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "((.*)(<M0>))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "(.*)((.*<M0>.*)+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "(.*)(\\b(<M0>)+\\b)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "\\b(.*)((<M0>)+)\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((.*)((<M0>)|([<LET>])))+",
                "prediction": "((.*)(.*<M0>.*))+"
            }
        ],
        "sentence": "lines ending with 1 or more of the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>){2,}",
                "prediction": "((.*)(<M0>)){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>){2,}",
                "prediction": "((<M0>)|([<LET>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>){2,}",
                "prediction": "((<M0>)|([<NUM>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>){2,}",
                "prediction": "((<M0>)|([<LOW>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>){2,}",
                "prediction": "((<M0>)|([<CAP>])){2,}"
            }
        ],
        "sentence": "items with <M0> at least twice ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "(\\b([<NUM>])|([<LET>])\\b)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b([<NUM>])|([<LET>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b([<NUM>])|([<LET>])|([<CAP>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": "\\b(.*[<NUM>].*)|([<LET>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<NUM>])|([<LET>]))+\\b",
                "prediction": ".*\\b([<NUM>])|([<LET>])|([<CAP>])\\b.*"
            }
        ],
        "sentence": "lines with words with a number or letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "(((<M0>)*).*(.)+)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "((<M0>)(.*)).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "((<M0>)*).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "(((<M0>)*).*(.)+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>.*..*)*)(.*)",
                "prediction": "((<M0>)(.*)).*((.)*).*"
            }
        ],
        "sentence": "lines starting with the string <M0> zero or more times followed by a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "([<NUM>]).*((.*)([<LOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": ".*([<NUM>])|((.*)([<LOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "(.*)(([<NUM>])|(.*[<LOW>].*))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "(.*)(([<NUM>])|(([<LOW>])+))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>])|((.*)([<LOW>])))+",
                "prediction": "(.*[<NUM>].*)|((.*)([<LOW>]))"
            }
        ],
        "sentence": "lines with a number or ending in lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "(([<LOW>])|([<VOW>])){5,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "((([<LOW>])|([<VOW>])){5,})(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "(([<LOW>]){5,})|(([<VOW>])(.*))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "(([<LOW>])|(([<VOW>]){5,}))(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])(.*))|(([<VOW>]){5,})",
                "prediction": "(([<LOW>].*[<VOW>].*)|([<VOW>])){5,}"
            }
        ],
        "sentence": "lines stating with 5 or more lower-case letters or vowels"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "([<CAP>]){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "(.*[<CAP>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": ".*([<CAP>]){2,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "\\b([<CAP>]){2,}\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>]){2,})(.*)",
                "prediction": "(([<CAP>])|([<LET>])){2,}"
            }
        ],
        "sentence": "lines containing 2 or more capital letters"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "(.*[<VOW>].*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": ".*([<VOW>]).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "([<VOW>].*..*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "([<VOW>]).*((.*)(.)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<VOW>])|(.*..*))*",
                "prediction": "(.*[<VOW>].*).*((.)+).*"
            }
        ],
        "sentence": "lines with a vowel with a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": ".*([<CAP>])|(<M0>)|(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "(.)+((<M1>)|([<CAP>])|(<M0>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "((<M1>)|([<CAP>])|(<M0>)).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "(.)+(([<CAP>])|(<M0>)|(<M1>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((<M0>)|([<CAP>])|(<M1>)).*",
                "prediction": "((<M1>)|([<CAP>])|(<M2>)).*(<M0>).*"
            }
        ],
        "sentence": "line where 1 of 3 <U> comes after the string <U> the string <M1> , a capital letter , or the string <M2>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*(([<VOW>])*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*(.*[<VOW>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*(([<VOW>])|([<CAP>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*<M0>.*[<VOW>].*",
                "prediction": "(<M0>).*([<VOW>].*[<VOW>].*).*"
            }
        ],
        "sentence": "items with <M0> preceding a vowel ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(..*[<NUM>].*)*",
                "prediction": ".*(.)+([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(.)+([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(.)+(([<NUM>])*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(.)+(.*[<NUM>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(..*[<NUM>].*)*",
                "prediction": "(.)+((.*)([<NUM>])).*"
            }
        ],
        "sentence": "items with a character preceding a numeral ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)((<M0>.*<M1>.*){2,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)(<M0>.*<M1>.*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "((.*)(<M0>.*<M1>.*)){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)((<M1>.*<M0>.*){2,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((.*)((<M1>){2,})).*",
                "prediction": "(.*)(((<M0>.*<M1>.*){2,})){2,}"
            }
        ],
        "sentence": "lines that end with the string <M0> followed by the string <M1> , at least 2 times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<LOW>])|([<CAP>])|([<LET>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<LOW>])|([<CAP>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<LOW>])+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<VOW>])|(.)+).*([<NUM>]).*",
                "prediction": "\\b([<LOW>])|([<CAP>])|(<M0>)\\b"
            }
        ],
        "sentence": "my <U> <U> is <U> ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "(\\b<M0>.*[<CAP>].*\\b)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "\\b(<M0>).*([<CAP>]).*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": ".*\\b<M0>.*[<CAP>].*\\b.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": "(\\b<M0>.*[<CAP>].*\\b)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*<M0>.*).*([<CAP>]).*\\b",
                "prediction": ".*\\b(<M0>).*([<CAP>]).*\\b.*"
            }
        ],
        "sentence": "lines with words that contain the string <M0> before a capital letter in them"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(<M0>)",
                "prediction": ".*(<M0>)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(<M0>)",
                "prediction": ".*<M0>.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(<M0>)",
                "prediction": "(<M0>).*((.*)([<CAP>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(<M0>)",
                "prediction": "(<M0>).*((.*)([<LET>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(<M0>)",
                "prediction": "(.*<M0>.*)*"
            }
        ],
        "sentence": "lines that have the <M0> string as an ending"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "(([<VOW>])|([<LET>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": ".*([<VOW>])|([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "\\b([<VOW>])|([<LET>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": ".*([<VOW>])|([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LET>])|([<VOW>]).*",
                "prediction": "(.*[<VOW>].*)|(([<LET>])+)"
            }
        ],
        "sentence": "lines that have a vowel or letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": ".*(.)+([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "(.)+(.*[<VOW>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "(.)+([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "([<VOW>]).*(.*..*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<LOW>])(.*))*).*([<VOW>]).*",
                "prediction": "(.)+(\\b([<VOW>])+\\b).*"
            }
        ],
        "sentence": "lines wherein the <U> character is a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*(([<VOW>])+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*(.*[<VOW>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>.*[<VOW>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*((.*)([<VOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*[<VOW>].*)+",
                "prediction": "(<M0>).*((.*[<VOW>].*)+).*"
            }
        ],
        "sentence": "lines containing the string <M0> followed by at least 1 vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": ".*(<M0>){5,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "(.*<M0>.*){5,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": "((.*)(<M0>)){5,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": ".*(.*<M0>.*){5,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(.*)(<M0>)\\b){5,}",
                "prediction": ".*(.*)((<M0>){5,}).*"
            }
        ],
        "sentence": "lines containing 5 or more of the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "([<NUM>].*[<VOW>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "([<NUM>]).*(([<VOW>])+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "(([<NUM>]).*([<VOW>]).*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "(([<NUM>])*).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*([<NUM>]).*([<VOW>]).*)+",
                "prediction": "([<NUM>]).*((.*[<VOW>].*)+).*"
            }
        ],
        "sentence": "items with a numeral preceding a vowel at least once ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "\\b([<NUM>])*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "(\\b[<NUM>]\\b)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "(\\b([<NUM>])*\\b)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "\\b(.*[<NUM>].*)*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>])*.*\\b",
                "prediction": "(\\b.*[<NUM>].*\\b)*"
            }
        ],
        "sentence": "lines with words that contain number , zero or more times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(<M0>)|([<NUM>].*[<LOW>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "((<M0>)|([<NUM>])).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "((<M0>)|([<NUM>].*[<LOW>].*))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(<M0>).*(([<NUM>])|([<LOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)|([<NUM>])).*",
                "prediction": "(([<NUM>])|(<M0>)).*([<LOW>]).*"
            }
        ],
        "sentence": "lines with the string <M0> or a number followed by a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "\\b[<CAP>].*[<NUM>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "\\b([<CAP>].*[<NUM>].*)+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "\\b.*[<CAP>].*[<NUM>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "\\b([<CAP>]).*([<NUM>]).*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(([<CAP>])*).*([<NUM>]).*\\b",
                "prediction": "(\\b[<CAP>].*[<NUM>].*\\b)+"
            }
        ],
        "sentence": "lines with words and a capital letter before a number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)(([<VOW>]){4,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "((.*)([<VOW>])){4,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)((.*[<VOW>].*){4,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)((([<VOW>]){4,})|([<LET>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(.*)(([<VOW>]){4,}).*",
                "prediction": "(.*)((([<VOW>]){4,})){4,}"
            }
        ],
        "sentence": "lines ending with a vowel , 4 or more times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<VOW>].*[<CAP>].*).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<VOW>].*[<LET>].*).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "([<LET>].*[<VOW>].*).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": "(.*[<VOW>].*[<CAP>].*).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*[<VOW>].*).*([<CAP>]).*",
                "prediction": ".*([<VOW>].*[<CAP>].*).*([<CAP>]).*"
            }
        ],
        "sentence": "lines followed by a vowel before a capital letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*..*){2,}",
                "prediction": "((<M0>){2,}).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*..*){2,}",
                "prediction": "((.){2,}).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(<M0>).*((.){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(([<NUM>]){2,}).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*..*){2,}",
                "prediction": "(([<LET>]){2,}).*(.)+"
            }
        ],
        "sentence": "at least twice , the string <M0> followed by a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": "(([<LOW>])|([<LET>]))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": "(([<LET>])|([<CAP>]))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": "(([<LOW>])|([<CAP>]))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": ".*([<CAP>])|([<LOW>])|([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<LOW>])|([<CAP>])|([<LET>]).*",
                "prediction": ".*([<LET>])|([<CAP>])|([<LOW>]).*"
            }
        ],
        "sentence": "items with any letter ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": ".*[<LOW>].*[<NUM>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "[<LOW>].*[<NUM>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "([<LOW>].*[<NUM>].*).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "([<LOW>]).*([<NUM>].*<M0>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*(<M0>.*[<NUM>].*).*",
                "prediction": "([<LOW>]).*([<NUM>].*[<NUM>].*).*"
            }
        ],
        "sentence": "lines with the string <M0> after a lower-case letter followed by a number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b.*[<NUM>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b([<NUM>])+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b(.*[<NUM>].*)+\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b[<NUM>].*[<NUM>].*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b([<NUM>])|([<LET>])|([<VOW>])\\b",
                "prediction": "\\b.*([<NUM>])+.*\\b"
            }
        ],
        "sentence": "lines with words and containing a number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>).*((<M1>)*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>.*<M1>.*).*((<M1>)*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>).*((<M1>){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>).*((<M1>)|(<M2>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b(<M0>).*(<M1>).*\\b)*",
                "prediction": "(<M0>).*((<M1>){3,}).*"
            }
        ],
        "sentence": "lines using the word string <M0> before the string <M1> , no times or more"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])*)|([<CAP>].*<M0>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])|([<CAP>])).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])*)|(([<CAP>]).*(<M0>).*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])|([<LET>])).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])|(([<LOW>]).*(<M0>).*))*",
                "prediction": "(([<LOW>])*)|(([<LET>]).*(<M0>).*)"
            }
        ],
        "sentence": "lines with or without lower-case letter or upper case letter before the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>].*[<LOW>].*).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>]).*([<LOW>].*<M0>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>])|(<M0>)|(<M0>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<LOW>])).*([<VOW>]).*",
                "prediction": "([<VOW>]).*(([<LOW>].*<M0>.*)|(<M0>))+"
            }
        ],
        "sentence": "a vowel must come before a lower case letter and must have string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>].*).*((.*)(<M0>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*(((.*)(<M0>))*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*((.*)((<M0>)*)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>]).*((.*)((<M0>)*).*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<CAP>])*).*((.*)(<M0>)).*",
                "prediction": "([<CAP>].*).*(((.*)(<M0>))*).*"
            }
        ],
        "sentence": "lines with a capital letter before ending with the string <M0> at least zero times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "((<M0>)|([<VOW>])){5,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": ".*((<M0>)|([<VOW>])){5,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "(.*(<M0>)|([<VOW>]).*){5,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "((.*<M0>.*)|([<VOW>])){5,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|(([<VOW>]){5,})",
                "prediction": "(.*((<M0>)|([<VOW>])){5,}.*){5,}"
            }
        ],
        "sentence": "lines containing string <M0> or vowel , 5 or more times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "(.*)(([<NUM>])|([<NUM>]))"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "(.*)(.*[<NUM>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "((.*)([<NUM>]))|(.*[<LET>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(([<NUM>])*)",
                "prediction": "((.*)([<NUM>]))|(.*<M0>.*)"
            }
        ],
        "sentence": "lined ending with a number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "([<VOW>].*[<CAP>].*){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "(.*[<VOW>].*[<CAP>].*){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "([<VOW>]).*(([<CAP>]){3,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "(([<VOW>]){3,}).*([<CAP>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<VOW>]){3,}).*([<CAP>]).*",
                "prediction": "(.*)(([<VOW>].*[<CAP>].*){3,})"
            }
        ],
        "sentence": "lines that contain a vowel followed by a capital letter at least 3 times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": ".*([<LET>]).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "(([<LET>])+).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "([<LET>]).*((<M0>)+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "(.*[<LET>].*).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LET>])+\\b).*(<M0>).*",
                "prediction": "([<LET>].*<M0>.*).*([<CAP>]).*"
            }
        ],
        "sentence": "lines with a letter before <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "((.*)(<M0>)){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "(.*)((<M0>){2,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "(.*)((.*<M0>.*){2,})"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "(.*)(((<M0>){2,})){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b(<M0>){2,}\\b)",
                "prediction": "(.*)(((<M0>){2,}))(.*)"
            }
        ],
        "sentence": "items terminating with <M0> at least twice ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "(<M0>){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": ".*(<M0>){2,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "(.*<M0>.*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "((<M0>){2,}).*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>){2,}).*([<VOW>]).*",
                "prediction": "((<M0>){2,}).*(.)+"
            }
        ],
        "sentence": "lines with the string <M0> at least 2 times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": ".*(<M0>)|([<CAP>])|(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": ".*([<CAP>]).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": ".*([<CAP>])|(<M0>)|(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": ".*(<M0>)|([<CAP>]).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*[<CAP>].*).*(.)+",
                "prediction": "\\b(<M0>)|([<CAP>])|(.)\\b"
            }
        ],
        "sentence": "lines containing the string <M0> , a capital letter , and a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(([<LET>])|(<M0>)|(.))*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "([<LET>]).*((<M0>)|(.)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": ".*([<LET>])|(<M0>)|(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(.*[<LET>].*)|((<M0>).*(.)+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LET>].*<M0>.*).*((.)*).*",
                "prediction": "(([<LET>])|(<M0>)|(<M1>)).*(.)+"
            }
        ],
        "sentence": "lines containing a letter , the string <M0> , and 0 or more characters"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": ".*<M0>.*[<LET>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": ".*(<M0>)|([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": ".*([<LET>])|(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": ".*(<M0>)+.*([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<LET>])|(<M0>)\\b.*",
                "prediction": "(.*<M0>.*)|([<LET>])"
            }
        ],
        "sentence": "lines containing the string <M0> with a letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": ".*(<M0>)|(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": "\\b(<M0>)|(<M1>)\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": ".*(<M1>)|(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": ".*(.*<M0>.*)|(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(((<M0>)|(<M1>)){3,})",
                "prediction": ".*((<M0>)|(<M1>))+.*"
            }
        ],
        "sentence": "lines containing the string <M0> or the string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "((<M0>)|([<NUM>].*<M1>.*))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "(<M0>).*((<M1>)|([<NUM>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "((<M0>)|([<NUM>])).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": "(([<NUM>])|(<M0>)).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*)|([<NUM>].*<M1>.*)",
                "prediction": ".*((<M0>)|([<NUM>])).*(<M1>).*"
            }
        ],
        "sentence": "lines with the string <M0> or number before string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "([<NUM>].*<M0>.*).*(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "([<NUM>]).*(<M0>.*<M1>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "([<NUM>]).*(.*<M0>.*<M1>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "(([<NUM>]).*(<M0>).*)|(.*<M1>.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>.*<M1>.*).*([<NUM>]).*",
                "prediction": "([<NUM>]).*(\\b<M0>.*<M1>.*\\b).*"
            }
        ],
        "sentence": "lines with a number before the string <M0> followed by the string <M1>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|((<M1>)|([<VOW>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|(<M1>.*[<VOW>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)+)|((<M1>).*([<VOW>]).*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "(((<M0>)+)|(<M1>)).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*((([<VOW>])|(<M1>))+).*",
                "prediction": "((<M0>)|(<M1>)|(<M1>)).*([<VOW>]).*"
            }
        ],
        "sentence": "the lines with the string <M0> ; at least once or the string <M1> before a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "(([<LOW>])*).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "([<LOW>].*<M0>.*)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "([<LOW>]).*(.*<M0>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "(.*[<LOW>].*).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>]).*((<M0>)*).*",
                "prediction": "(([<LOW>])*).*(.*<M0>.*).*"
            }
        ],
        "sentence": "zero lines with a lower-case letter before the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((<M0>)|([<CAP>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*){2,}",
                "prediction": ".*(<M0>){2,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((.*)(<M0>)){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((<M0>)|([<LET>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*){2,}",
                "prediction": "((<M0>){2,})|(.*[<CAP>].*)"
            }
        ],
        "sentence": "items with <M0> at least 2 times ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "(<M0>.*..*)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": ".*(<M0>.*..*)*.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "(<M0>).*((.)*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "(<M0>).*((.*)(.)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(<M0>).*((.)*).*",
                "prediction": "\\b(<M0>.*..*)*\\b"
            }
        ],
        "sentence": "lines with the string <M0> followed by a character , zero times or more"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "(<M0>.*[<VOW>].*).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "(<M0>).*([<VOW>].*[<NUM>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "([<VOW>]).*(<M0>.*[<NUM>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "([<VOW>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*<M0>.*).*([<VOW>].*[<NUM>].*).*",
                "prediction": "(<M0>).*(([<VOW>]).*([<NUM>]).*).*"
            }
        ],
        "sentence": "items with <M0> preceding a vowel preceding a numeral ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".",
                "prediction": "(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".",
                "prediction": ".*..*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".",
                "prediction": "(.*..*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".",
                "prediction": ".*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".",
                "prediction": ".*(.)+([<CAP>]).*"
            }
        ],
        "sentence": "lines with only a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "(.*)(.*[<NUM>].*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "(.*)(([<NUM>])+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "((.*)([<NUM>]))+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": ".*(.*)([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*)(\\b[<NUM>]\\b)",
                "prediction": "(.*)(\\b([<NUM>])+\\b)"
            }
        ],
        "sentence": "lines ending with a number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "(<M0>).*((<M1>)|(<M2>)).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "((<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "((<M0>)|(<M1>)).*(.*<M2>.*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": ".*((<M0>)|(<M1>)).*(<M2>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)+)|((<M1>).*(<M2>).*)",
                "prediction": "(.*<M0>.*)|((<M1>).*(<M2>).*)"
            }
        ],
        "sentence": "lines with the string <M0> or the strings <M1> before <M2>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*..*)*",
                "prediction": ".*[<VOW>].*..*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*..*)*",
                "prediction": "([<VOW>].*..*)(.*)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*..*)*",
                "prediction": "([<VOW>].*..*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*..*)*",
                "prediction": "([<VOW>]).*(.*..*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<VOW>].*..*)*",
                "prediction": "(.*[<VOW>].*).*(.)+"
            }
        ],
        "sentence": "lines with vowel then a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "([<CAP>].*..*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "([<CAP>]).*((.)*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*(.*..*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+(([<CAP>])+).*",
                "prediction": "(([<CAP>])+).*(.*[<LET>].*).*"
            }
        ],
        "sentence": "lines with at least 1 capital letter with a character before it"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "([<VOW>]).*(([<CAP>])|([<LET>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "(([<VOW>]).*([<CAP>]).*)|(([<LET>])+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "(([<VOW>])+).*(([<CAP>])|([<LET>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "([<VOW>]).*((([<CAP>])|([<LET>]))+).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((([<VOW>]).*([<CAP>]).*)|([<LET>]))+",
                "prediction": "(([<VOW>]).*(([<CAP>])|([<LET>]))+).*"
            }
        ],
        "sentence": "lines with vowel before capital letter or letter at least once"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": ".*((<M0>)|([<LOW>])){2,}.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "(([<LOW>])|(<M0>)){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "((<M0>)|([<LOW>])){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "(.*(<M0>)|([<LOW>]).*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*(([<LOW>]){2,})|(<M0>).*",
                "prediction": "\\b((<M0>)|([<LOW>])){2,}\\b"
            }
        ],
        "sentence": "lines that contain the string <M0> or a lower-case letter , at least 2 times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "(([<LOW>]){4,}).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "([<LOW>].*<M0>.*){4,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "([<LOW>]).*((<M0>){4,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "(([<LOW>].*<M0>.*){4,}).*(<M0>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(\\b([<LOW>]){4,}\\b).*(<M0>).*",
                "prediction": "(([<LOW>]){4,}).*(<M0>.*<M0>.*).*"
            }
        ],
        "sentence": "line with a lower-case letter , 4 times before <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": ".*([<NUM>]).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "([<NUM>].*[<VOW>].*)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "(([<NUM>])+).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "(.*[<NUM>].*).*([<VOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){2,}).*([<VOW>]).*",
                "prediction": "([<NUM>]).*(.*[<VOW>].*).*"
            }
        ],
        "sentence": "lines containing more than 1 number before a vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": "\\b([<CAP>])|([<VOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": ".*\\b([<CAP>])|([<CAP>])\\b.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": "\\b.*([<CAP>])|([<VOW>]).*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": ".*\\b([<CAP>])|([<VOW>])\\b.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b(.*[<CAP>].*)|([<VOW>])\\b",
                "prediction": ".*\\b([<CAP>])|([<CAP>])|([<VOW>])\\b.*"
            }
        ],
        "sentence": "lines with words an a capital letter or vowel"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "([<LET>].*[<NUM>].*){2,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "([<LET>]).*(([<NUM>]){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": "(.*[<LET>].*).*(([<NUM>]){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": ".*([<LET>]).*(([<NUM>]){2,}).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*([<CAP>].*[<NUM>].*){2,}.*",
                "prediction": ".*([<LET>].*[<NUM>].*){2,}.*"
            }
        ],
        "sentence": "lines containing a letter followed by a number 2 times"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": ".*([<LOW>])|([<LET>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(.*[<LOW>].*)|((.)+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(.*[<LOW>].*)|(([<LET>])+)"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|([<LET>])).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<LOW>])|(.)).*([<LET>]).*",
                "prediction": "(([<LOW>])|([<LET>])|(.))(.*)"
            }
        ],
        "sentence": "lines can either have a lower case letter or a letter that follows a character"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*..*)*",
                "prediction": "[<LOW>].*..*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*..*)*",
                "prediction": "([<LOW>]).*(.)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*..*)*",
                "prediction": "([<LOW>]).*(..*..*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*..*)*",
                "prediction": "([<LOW>]).*(.*..*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "([<LOW>].*..*)*",
                "prediction": "([<LOW>]).*((.)*).*"
            }
        ],
        "sentence": "items with a small letter preceding a character ."
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "\\b([<NUM>]){3,}\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "(\\b[<NUM>]\\b){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "\\b(.*[<NUM>].*){3,}\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "(\\b.*[<NUM>].*\\b){3,}"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b.*([<NUM>]){3,}.*\\b",
                "prediction": "(\\b([<NUM>]){3,}\\b){3,}"
            }
        ],
        "sentence": "lines with words that have numbers , 3 times or more"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": ".*([<CAP>]).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": ".*[<CAP>].*[<LOW>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "(.*[<CAP>].*).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "([<CAP>]).*(.*[<LOW>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": ".*\\b([<CAP>]).*([<LOW>]).*\\b.*",
                "prediction": "([<CAP>]).*([<LOW>].*[<LOW>].*).*"
            }
        ],
        "sentence": "lines containing a capital letter before a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "([<LOW>]).*((.)*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "([<LOW>].*..*)*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": ".*([<LOW>].*..*)*.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "(.*[<LOW>].*).*((.)*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.*[<LOW>].*..*)*",
                "prediction": "(([<LOW>]).*(.)*).*"
            }
        ],
        "sentence": "lines that contain a lower-case letter followed by a character , zero times or more"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": ".*([<NUM>])+.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "(.*[<NUM>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": ".*[<NUM>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "([<NUM>]).*(.*[<LET>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]){3,}).*([<LOW>]).*",
                "prediction": "([<NUM>]).*((.*)([<LET>])).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "(.*[<NUM>].*)+"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": ".*([<NUM>])+.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": ".*[<NUM>].*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "([<NUM>]).*(.*[<LET>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(([<NUM>]).*([<CAP>]).*)|(([<LOW>])|(<M0>)|(<M1>))",
                "prediction": "([<NUM>]).*((.*)([<LET>])).*"
            }
        ],
        "sentence": "lines with a number"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(<M0>)|(<M1>)|([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*([<LET>])|(<M0>)|(<M1>).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": "\\b(<M0>)|(<M1>)|([<LOW>])\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(.)|(<M1>)|([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(.)+((<M0>)|([<LOW>])|(<M1>)).*",
                "prediction": ".*(<M1>)|(<M0>)|([<LOW>]).*"
            }
        ],
        "sentence": "lines containing <M0> , <M1> , or a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": "\\b.*(<M0>)+\\b.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": "\\b.*<M0>.*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": "\\b.*(<M0>)+.*\\b"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": ".*\\b(<M0>)+\\b.*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "\\b((<M0>)+).*([<VOW>]).*\\b",
                "prediction": ".*\\b.*<M0>.*\\b.*"
            }
        ],
        "sentence": "lines with words and the string <M0>"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "((<M0>){2,}).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "((.*<M0>.*){2,}).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": ".*((<M0>){2,}).*([<LOW>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "((<M0>){2,}).*([<LOW>].*[<LOW>].*).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "(<M0>).*(([<LOW>]){2,}).*",
                "prediction": "(.*(<M0>){2,}.*).*([<LOW>]).*"
            }
        ],
        "sentence": "lines containing the string <M0> 2 or more times before a lower-case letter"
    },
    {
        "detail": [
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LET>])+).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "(.*[<LET>].*).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "([<LET>].*<M0>.*).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LET>])|(<M0>)).*([<NUM>]).*"
            },
            {
                "file_name": "dfa_1_layer_beam_search_5.txt",
                "dfa_equality": 0,
                "score": 0,
                "truth": "((<M0>)|([<CAP>])).*([<NUM>]).*",
                "prediction": "(([<LET>])+).*([<NUM>].*<M0>.*).*"
            }
        ],
        "sentence": "lines with <M0> a letter before a number"
    }
]